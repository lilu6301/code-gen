
//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_baseband_layer
 * rief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_FRAMEND
#define COFS_MODEL_FRAMEND


#include "cfm_framerend_global.h"
#include "cfm_framerend_global_types.h"
#include <vector>
#include "cofluent.h"
#include "cfm_readdatadriver.h"
#include "cfm_readdriver.h"
#include "cfm_sendwackdriver.h"
#include "cfm_writedriver.h"
#include "dt/cft_defaraddrchn_in.h"
#include "dt/cft_defdataread_in.h"
#include "dt/cft_defmemreadrequest_in.h"
#include "dt/cft_defmemwriterequest_in.h"
#include "dt/cft_defwriteack_in.h"
#include "dt/cft_defwdatachn_in.h"

class cfm_framerend : public cf_core::cf_function {
public:

typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defaraddrchn> p_mq_ARADDRin_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defawaddrchn> p_mq_AWADDRin_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defbrespchn> p_mq_BRESPchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defdataread> p_mq_DataRead_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defmemreadrequest> p_mq_MemReadRequest_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defmemwriterequest> p_mq_MemWriteRequest_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defrdatachn> p_mq_RDATAchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defwdatachn> p_mq_WDATAin_t;
typedef cf_core::cf_mq_initiator_socket<cfm_framerend, cft_defwriteack> p_mq_WriteAck_t;

/// constructor
cfm_framerend(sc_core::sc_module_name name);

/// destructor
virtual ~cfm_framerend(void);

p_mq_ARADDRin_t p_mq_ARADDRin;
p_mq_AWADDRin_t p_mq_AWADDRin;
p_mq_BRESPchn_t p_mq_BRESPchn;
p_mq_DataRead_t p_mq_DataRead;
p_mq_MemReadRequest_t p_mq_MemReadRequest;
p_mq_MemWriteRequest_t p_mq_MemWriteRequest;
p_mq_RDATAchn_t p_mq_RDATAchn;
p_mq_WDATAin_t p_mq_WDATAin;
p_mq_WriteAck_t p_mq_WriteAck;

cfm_readdatadriver *ReadDataDriver;
cfm_readdriver *ReadDriver;
cfm_sendwackdriver *SendWAckDriver;
cfm_writedriver *WriteDriver;

protected:
void cb_init_attributes(void);
void cb_init_local_vars(void);

public:
};
#endif
//<#!@READ-ONLY-SECTION-END@!#>