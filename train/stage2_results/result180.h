
/*!
 * \class cfm_backend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_DDRMEMORY_BACKEND
#define COFS_MODEL_DDRMEMORY_BACKEND

#include <vector>
#include "cfm_ddrmemory_global.h"
#include "cfm_ddrmemory_global_types.h"
#include "cofluent.h"
#include "dp/cfm_backend_dp_if.h"
#include "cfm_arbitration.h"
#include "cfm_backend_collectrequests.h"
#include "cfm_ddrcommandgeneration.h"
#include "cfm_memreadrequest.h"
#include "cfm_memwriterequest.h"
#include "cfm_responseforward.h"
#include "dt/cft_defdq.h"
#include "dt/cft_defdataread.h"
#include "dt/cft_defwriteack.h"
#include "dt/cft_defmemreadrequest.h"
#include "dt/cft_defmemwriterequest.h"
#include "dt/cft_defcommand.h"
#include "dt/cft_defrequestinformation.h"
#include "dt/cft_defrequests2memory.h"
#include "dt/cft_defmemorystatus.h"



class cfm_backend: public cf_core::cf_function_container, public cfm_backend_dp_if {
public:
	typedef cf_core::cf_message_queue<cft_defrequest2memory> mq_MemoryStatus_t;
	typedef cf_core::cf_event ev_RequestCounter_t;
	typedef cf_core::cf_message_queue<cft_defrequestinformation> mq_RequestInformation_t;
	typedef cf_core::cf_shared_variable<cft_deflistrequestptr> sv_ListRequestsPtr_t;

	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defdq> p_mq_DQs_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defdataread> p_mq_DataRead_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defwriteack> p_mq_WriteAck_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defmemreadrequest> p_mq_MemReadRequest_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defmemwriterequest> p_mq_MemWriteRequest_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defcommand> p_mq_DDRCommand_t;

	cfm_backend(sc_core::sc_module_name name);

	virtual ~cfm_backend(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	p_mq_DQs_t p_mq_DQs;
	p_mq_DataRead_t p_mq_DataRead;
	p_mq_WriteAck_t p_mq_WriteAck;
	std::vector<p_mq_MemReadRequest_t*> p_mq_MemReadRequest_vec;
	p_mq_MemWriteRequest_t p_mq_MemWriteRequest;
	p_mq_DDRCommand_t p_mq_DDRCommand;

public:
	cfm_arbitration* Arbitration;
	cfm_backend_collectrequests* CollectRequests;
	cfm_ddrcommandgeneration* DDRCommandGeneration;
	cfm_memreadrequest* MemReadRequest;
	cfm_memwriterequest* MemWriteRequest;
	cfm_responseforward* ResponseForward;

protected:
	void cb_init_attributes(void);
	void cb_init_local_vars(void);

public:
	std::vector<mq_MemoryStatus_t*> mq_MemoryStatus_vec;
	ev_RequestCounter_t ev_RequestCounter;
	mq_RequestInformation_t mq_RequestInformation;
	sv_ListRequestsPtr_t sv_ListRequestsPtr;




};

#endif // COFS_MODEL_DDRMEMORY_BACKEND

