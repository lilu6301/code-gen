
//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_backend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_DDRMEMORY_BACKEND
#define COFS_MODEL_DDRMEMORY_BACKEND

/// Model Header includes start
#include <vector>
#include "cfm_ddrmemory_global.h"
#include "cfm_ddrmemory_global_types.h"
#include "cofluent.h"
#include "dp/cfm_backend_dp_if.h"
#include "cfm_arbitration.h"
#include "cfm_collectrequests.h"
#include "cfm_ddrcommandgeneration.h"
#include "cfm_responseforward.h"
//set of dataType, sort alphabetically
#include "dt/cft_defack.h"
#include "dt/cft_defdataread.h"
#include "dt/cft_defdq.h"
#include "dt/cft_defmemreadrequest.h"
#include "dt/cft_defmemwriterequest.h"
#include "dt/cft_deffluent.h"

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'BackEnd includes' algorithm generated code

//End of 'BackEnd includes' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
/// Model Header includes end

///    \defgroup dxgBackEnd Function BackEnd
//@{
///        \page dxpBackEnd
//@{
///    \brief BackEnd function model start
class cfm_backend: public cf_core::cf_function_container,
		public cfm_backend_dp_if {
public:
	/// cfm_backend type define start
	/// relations typedef
//set of relation, sort alphabetically. format: cf_type<dataType> relation_name
	typedef cf_core::cf_event ev_RequestCounter_t;
	typedef cf_core::cf_message_queue<cft_defrequestinformation> mq_RequestInformation_t;
	typedef cf_core::cf_message_queue<cft_defrequests2memory> mq_Requests2Memory_t;
	typedef cf_core::cf_shared_variable<cft_deflistrequestsptr> sv_ListRequestsPtr_t;
	typedef cf_core::cf_shared_variable<cft_defmemorystatus> sv_MemoryStatus_t;

	/// ports typedef
//set of port, sort alphabetically, format: cf_type<dataType> port_name
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defack> p_mq_DDRCommand_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defdataread> p_mq_DataRead_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defdq> p_mq_DQs_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defmemreadrequest> p_mq_MemReadRequest_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defmemwriterequest> p_mq_MemWriteRequest_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defwriteack> p_mq_WriteAck_t;
	/// cfm_backend type define end

	/// constructor
	cfm_backend(sc_core::sc_module_name name);

	/// destructor
	virtual ~cfm_backend(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	/// \name input/output ports
	//@{
//set of port, sort alphabetically. format: port_type port_name
	p_mq_DDRCommand_t p_mq_DDRCommand;
	p_mq_DataRead_t p_mq_DataRead;
	p_mq_DQs_t p_mq_DQs;
	p_mq_MemReadRequest_t p_mq_MemReadRequest;
	p_mq_MemWriteRequest_t p_mq_MemWriteRequest;
	p_mq_WriteAck_t p_mq_WriteAck;
	//@}

public:
	/// \name functions
	//@{
//set of model, sort alphabetically. format: model_type* model_name
	cfm_arbitration* Arbitration;
	cfm_collectrequests* CollectRequests;
	cfm_ddrcommandgeneration* DDRCommandGeneration;
	cfm_responseforward* ResponseForward;
	//@}

protected:
	/// initialize attributes
	void cb_init_attributes(void);
	/// initialize definitions
	void cb_init_local_vars(void);

public:
	/// \name relations
	//@{
//set of relation, sort alphabetically. format: relation_type relation_name
	ev_RequestCounter_t ev_RequestCounter;
	mq_RequestInformation_t mq_RequestInformation;
	mq_Requests2Memory_t mq_Requests2Memory;
	sv_ListRequestsPtr_t sv_ListRequestsPtr;
	std::vector<sv_MemoryStatus_t*> sv_MemoryStatus_vec;
	//@}

	/// Model private fields start
	/// Model private fields end

	/// \name user-defined local declarations
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd local declarations' algorithm generated code

	//End of 'BackEnd local declarations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

};
///    \brief BackEnd function model end

//@}
//@}
#endif // COFS_MODEL_DDRMEMORY_BACKEND

//<#!@READ-ONLY-SECTION-END@!#>