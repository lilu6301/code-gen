<#!@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_backend
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_backend.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'BackEnd definitions' algorithm generated code

//End of 'BackEnd definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_backend ::cfm_backend() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),p_mq_DQs("p_mq_DQs"),p_mq_DataRead("p_mq_DataRead"),p_mq_MemReadRequest("p_mq_MemReadRequest"),p_mq_MemWriteRequest("p_mq_MemWriteRequest"),p_mq_ReqCounter("p_mq_ReqCounter"),p_mq_ReqInformation("p_mq_ReqInformation"),p_mq_Requests2Memory("p_mq_Requests2Memory"),p_mq_WriteAck("p_mq_WriteAck"),sv_ListRequestsPtr("ListRequestsPtr"),sv_MemoryStatus("MemoryStatus"),ev_ReqCounter("ReqCounter"),mq_ReqInformation("ReqInformation"),mq_Requests2Memory("Requests2Memory"),sv_WriteAck("WriteAck"){
cf_function_container::init();
//instantiation of models
Arbitration = new cfm_arbitration("Arbitration");
CollectRequests = new cfm_collectrequests("CollectRequests");
DDRCommandGeneration = new cfm_ddrcommandgeneration("DDRCommandGeneration");
ResponseForward = new cfm_responseforward("ResponseForward");
//connections
//model connect to port
Arbitration->p_sv_ListRequestsPtr(sv_ListRequestsPtr.p_target_socket);
Arbitration->p_ev_ReqCounter(ev_ReqCounter.p_target_socket);
Arbitration->p_mq_ReqInformation(mq_ReqInformation.p_target_socket);
Arbitration->p_mq_Requests2Memory(mq_Requests2Memory.p_target_socket);
Arbitration->p_sv_WriteAck(sv_WriteAck.p_target_socket);
//model connect to port
CollectRequests->p_mq_MemReadRequest(p_mq_MemReadRequest);
CollectRequests->p_mq_MemWriteRequest(p_mq_MemWriteRequest);
//model connect to port
DDRCommandGeneration->p_mq_DQs(p_mq_DQs);
DDRCommandGeneration->p_mq_MemReadRequest(p_mq_MemReadRequest);
DDRCommandGeneration->p_mq_MemWriteRequest(p_mq_MemWriteRequest);
//model connect to port
ResponseForward->p_mq_DataRead(p_mq_DataRead);
ResponseForward->p_mq_DQs(p_mq_DQs);
ResponseForward->p_mq_ReqCounter(p_mq_ReqCounter);
ResponseForward->p_mq_ReqInformation(mq_ReqInformation.p_target_socket);
ResponseForward->p_mq_Requests2Memory(mq_Requests2Memory.p_target_socket);
ResponseForward->p_sv_WriteAck(sv_WriteAck.p_target_socket);
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_backend::~cfm_backend(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'BackEnd destructor' algorithm generated code

//End of 'BackEnd destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
delete Arbitration;
delete CollectRequests;
delete DDRCommandGeneration;
delete ResponseForward;
}


//@{
void cfm_backend::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_backend::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>