
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_backend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_backend.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_backend
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'BackEnd definitions' algorithm generated code

//End of 'BackEnd definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_backend::cfm_backend(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_backend_dp_if(), p_mq_DQs("p_mq_DQs"), p_mq_DataRead(
				"p_mq_DataRead"), p_mq_WriteAck_0("p_mq_WriteAck_0"), p_mq_MemReadRequest(
				"p_mq_MemReadRequest"), p_mq_MemWriteRequest(
				"p_mq_MemWriteRequest"), p_mq_DDRCommand("p_mq_DDRCommand"), p_mq_WriteAck_1(
				"p_mq_WriteAck_1"), mq_RequestInformation("RequestInformation"), sv_ListRequestsPtr(
				"ListRequestsPtr"), ev_RequestCounter("RequestCounter"), mq_WriteAck2(
				"WriteAck2") {
	cf_function_container::init();
	Arbitration = new cfm_arbitration("Arbitration");
	DDRCommandGeneration = new cfm_ddrcommandgeneration("DDRCommandGeneration");
	ResponseForward = new cfm_responseforward("ResponseForward");
	CollectRequests = new cfm_collectrequests("CollectRequests");

	// instantiation of p_mq_WriteAck_1_vec
	for (cf_count i = 0; i < (cf_count) CollectRequests->p_mq_WriteAck_1_vec.size();
			i++) {
		p_mq_WriteAck_1_t* module = new p_mq_WriteAck_1_t(
				cf_string("p_mq_WriteAck_1[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_WriteAck_1_vec.push_back(module);
	}
	// instantiation of p_mq_WriteAck_2_vec
	for (cf_count i = 0; i < (cf_count) CollectRequests->p_mq_WriteAck_2_vec.size();
			i++) {
		p_mq_WriteAck_2_t* module = new p_mq_WriteAck_2_t(
				cf_string("p_mq_WriteAck_2[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_WriteAck_2_vec.push_back(module);
	}
	// connections
	Arbitration->p_mq_WriteAck(p_mq_WriteAck_0);
	Arbitration->p_mq_RequestInformation(mq_RequestInformation.p_target_socket);
	Arbitration->p_ev_RequestCounter(ev_RequestCounter.p_target_socket);
	Arbitration->p_sv_ListRequestsPtr(sv_ListRequestsPtr.p_target_socket);
	Arbitration->p_mq_WriteAck(p_mq_WriteAck_1);
	Arbitration->p_mq_WriteAck2(mq_WriteAck2.p_target_socket);

	DDRCommandGeneration->p_mq_DDRCommand(p_mq_DDRCommand);
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		DDRCommandGeneration->p_sv_MemoryStatus(
				sv_MemoryStatus[i].p_target_socket);
	}
	DDRCommandGeneration->p_mq_WriteAck(p_mq_WriteAck2);
	DDRCommandGeneration->p_mq_ReadAck(p_mq_DataRead);

	ResponseForward->p_mq_DQs(p_mq_DQs);
	ResponseForward->p_mq_WriteAck(p_mq_WriteAck_1);
	ResponseForward->p_mq_ReadAck(p_mq_DataRead);
	ResponseForward->p_mq_WriteAck2(mq_WriteAck2.p_target_socket);
	ResponseForward->p_mq_RequestInformation(mq_RequestInformation.p_target_socket);

	CollectRequests->p_mq_MemReadRequest(p_mq_MemReadRequest);
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		CollectRequests->p_sv_MemoryStatus(sv_MemoryStatus[i].p_target_socket);
	}
	for (cf_count i = 0; i < (cf_count) CollectRequests->p_mq_WriteAck_1_vec.size();
			i++) {
		p_mq_WriteAck_1_t* module = CollectRequests->p_mq_WriteAck_1_vec[i];
		if (module != nullptr) {
			module->p_mq_WriteAck2(mq_WriteAck2.p_target_socket);
		}
	}
	for (cf_count i = 0; i < (cf_count) CollectRequests->p_mq_WriteAck_2_vec.size();
			i++) {
		p_mq_WriteAck_2_t* module = CollectRequests->p_mq_WriteAck_2_vec[i];
		if (module != nullptr) {
			module->p_mq_WriteAck2(mq_WriteAck2.p_target_socket);
		}
	}
	CollectRequests->p_ev_RequestCounter(ev_RequestCounter.p_target_socket);
	CollectRequests->p_mq_RequestInformation(mq_RequestInformation.p_target_socket);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd constructor' algorithm generated code

	//End of 'BackEnd constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_backend::~cfm_backend(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd destructor' algorithm generated code

	//End of 'BackEnd destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	for (vector<p_mq_WriteAck_1_t*>::const_iterator vi =
			p_mq_WriteAck_1_vec.begin(); vi != p_mq_WriteAck_1_vec.end();
			vi++) {
		delete (*vi);
	}
	for (vector<p_mq_WriteAck_2_t*>::const_iterator vi =
			p_mq_WriteAck_2_vec.begin(); vi != p_mq_WriteAck_2_vec.end();
			vi++) {
		delete (*vi);
	}
	delete Arbitration;
	delete DDRCommandGeneration;
	delete ResponseForward;
	delete CollectRequests;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_backend::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd pre elaboration' algorithm generated code

	//End of 'BackEnd pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_backend::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd post elaboration' algorithm generated code

	//End of 'BackEnd post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_backend::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd post simulation' algorithm generated code

	//End of 'BackEnd post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_backend::cb_init_attributes() {

// initialize function attributes
// initialize relations attributes
	mq_RequestInformation.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_RequestInformation.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_RequestInformation.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_RequestInformation.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_RequestInformation.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_RequestInformation.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_RequestInformation.cfa_receive_threshold.init((cf_nonzero_count) 1);
	sv_ListRequestsPtr.cfa_write_time.init(cf_expr_duration(0, CF_NS));
	sv_ListRequestsPtr.cfa_read_time.init(cf_expr_duration(0, CF_NS));
	sv_ListRequestsPtr.cfa_semaphore.init(false);
	sv_ListRequestsPtr.cfa_concurrency.init((cf_nonzero_count) 1);
	ev_RequestCounter.cfa_set_time.init(cf_expr_duration(0, CF_NS));
	ev_RequestCounter.cfa_get_time.init(cf_expr_duration(0, CF_NS));
	ev_RequestCounter.cfa_event_policy.init(CF_EV_POLICY_COUNTER);
	mq_WriteAck2.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_WriteAck2.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_WriteAck2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_WriteAck2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_WriteAck2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_WriteAck2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_WriteAck2.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_backend::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BackEnd initializations' algorithm generated code

	//End of 'BackEnd initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>