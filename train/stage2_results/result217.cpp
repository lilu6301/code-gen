
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_aggswitch
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_aggswitch.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_serverroom
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_aggswitch
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'AGGSwitch definitions' algorithm generated code

// End of 'AGGSwitch definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_aggswitch ::cfm_aggswitch()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), cfm_aggswitch_dp_if(),
      mq_MsgQInboundDataCenterSwitch("MsgQInboundDataCenterSwitch"),
      mq_MsgQInboundRack("MsgQInboundRack"),
      mq_MsgQOutboundDataCenterSwitch("MsgQOutboundDataCenterSwitch"),
      mq_MsgQOutboundRack("MsgQOutboundRack"),
      p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch"),
      p_mq_MsgQToDataCenterSwitch("p_mq_MsgQToDataCenterSwitch"),
      p_mq_MsgQToRack("p_mq_MsgQToRack"),
      p_mq_MsgQToServerRoom("p_mq_MsgQToServerRoom") {
  cf_function_container::init();
  // instantiation of models
  InboundDataCenterSwitch =
      new cfm_inbounddatacenterswitch("InboundDataCenterSwitch");
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    cfm_inboundrack *module =
        new cfm_inboundrack(cf_string("InboundRack[%d]", i).c_str());
    CF_ASSERT(module)
    InboundRack_vec.push_back(module);
  }
  OutboundDataCenterSwitch =
      new cfm_outbounddatacenterswitch("OutboundDataCenterSwitch");
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    cfm_outboundrack *module =
        new cfm_outboundrack(cf_string("OutboundRack[%d]", i).c_str());
    CF_ASSERT(module)
    OutboundRack_vec.push_back(module);
  }
  RoutingFunction = new cfm_routingfunction("RoutingFunction");
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    mq_MsgQInboundRack_t *module =
        new mq_MsgQInboundRack_t(cf_string("MsgQInboundRack[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQInboundRack_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    mq_MsgQOutboundRack_t *module =
        new mq_MsgQOutboundRack_t(cf_string("MsgQOutboundRack[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQOutboundRack_vec.push_back(module);
  }
  // connections
  // model connect to relation
  InboundDataCenterSwitch->p_mq_MsgQInboundDataCenterSwitch(
      mq_MsgQInboundDataCenterSwitch.p_target_socket);
  // model connect to port
  InboundDataCenterSwitch->p_mq_MsgQToServerRoom(p_mq_MsgQToServerRoom);
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    cfm_inboundrack *module = InboundRack_vec[i];
    if (module != nullptr) {
      // model connect to relation
      for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
        module->p_mq_MsgQInboundRack(
            mq_MsgQInboundRack_vec[j]->p_target_socket);
      }
      // model connect to port
      module->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);
    }
  }
  // model connect to relation
  OutboundDataCenterSwitch->p_mq_MsgQOutboundDataCenterSwitch(
      mq_MsgQOutboundDataCenterSwitch.p_target_socket);
  // model connect to port
  OutboundDataCenterSwitch->p_mq_MsgQToDataCenterSwitch(
      p_mq_MsgQToDataCenterSwitch);
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    cfm_outboundrack *module = OutboundRack_vec[i];
    if (module != nullptr) {
      // model connect to relation
      for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
        module->p_mq_MsgQOutboundRack(
            mq_MsgQOutboundRack_vec[j]->p_target_socket);
      }
      // model connect to port
      module->p_mq_MsgQToRack(p_mq_MsgQToRack);
    }
  }
  // model connect to relation
  RoutingFunction->p_mq_MsgQInboundDataCenterSwitch(
      mq_MsgQInboundDataCenterSwitch.p_target_socket);
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    RoutingFunction->p_mq_MsgQInboundRack(
        mq_MsgQInboundRack_vec[i]->p_target_socket);
  }
  RoutingFunction->p_mq_MsgQOutboundDataCenterSwitch(
      mq_MsgQOutboundDataCenterSwitch.p_target_socket);
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    RoutingFunction->p_mq_MsgQOutboundRack(
        mq_MsgQOutboundRack_vec[i]->p_target_socket);
  }
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_aggswitch::~cfm_aggswitch(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'AGGSwitch destructor' algorithm generated code

  // End of 'AGGSwitch destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete InboundDataCenterSwitch;
  for (vector<cfm_inboundrack *>::const_iterator vi = InboundRack_vec.begin();
       vi != InboundRack_vec.end(); vi++) {
    delete (*vi);
  }
  delete OutboundDataCenterSwitch;
  for (vector<cfm_outboundrack *>::const_iterator vi = OutboundRack_vec.begin();
       vi != OutboundRack_vec.end(); vi++) {
    delete (*vi);
  }
  delete RoutingFunction;
  // deconstructor for vector relation
  for (vector<mq_MsgQInboundRack_t *>::const_iterator vi =
           mq_MsgQInboundRack_vec.begin();
       vi != mq_MsgQInboundRack_vec.end(); vi++) {
    delete (*vi);
  }
  for (vector<mq_MsgQOutboundRack_t *>::const_iterator vi =
           mq_MsgQOutboundRack_vec.begin();
       vi != mq_MsgQOutboundRack_vec.end(); vi++) {
    delete (*vi);
  }
}

//@{
void cfm_aggswitch::cb_init_attributes() {

  // initialize function attributes

  return;
}
//@}

//@{
void cfm_aggswitch::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Router25 initializations' algorithm generated code

  // End of 'Router25 initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>