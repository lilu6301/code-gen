@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_aggswitch
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_aggswitch.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'AGGSwitch definitions' algorithm generated code

//End of 'AGGSwitch definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_aggswitch ::cfm_aggswitch() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),p_mq_MsgQInboundDataCenterSwitch("p_mq_MsgQInboundDataCenterSwitch"),p_mq_MsgQInboundRack("p_mq_MsgQInboundRack"),p_mq_MsgQOutboundDataCenterSwitch("p_mq_MsgQOutboundDataCenterSwitch"),p_mq_MsgQOutboundRack("p_mq_MsgQOutboundRack"){
cf_function_container::init();
//instantiation of models
InboundDataCenterSwitch = new cfm_inbounddatacenterswitch("InboundDataCenterSwitch");
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		cfm_inboundrack* module = new cfm_inboundrack(
				cf_string("InboundRack[%d]", i).c_str());
		CF_ASSERT (module)
		InboundRack_vec.push_back(module);
	}
OutboundDataCenterSwitch = new cfm_outbounddatacenterswitch("OutboundDataCenterSwitch");
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		cfm_outboundrack* module = new cfm_outboundrack(
				cf_string("OutboundRack[%d]", i).c_str());
		CF_ASSERT (module)
		OutboundRack_vec.push_back(module);
	}
RoutingFunction = new cfm_routingfunction("RoutingFunction");
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		message_queue<cft_DefPacket> mq_MsgQInboundRack_t;
		CF_ASSERT (mq_MsgQInboundRack_t)
		mq_MsgQInboundRack_vec.push_back(mq_MsgQInboundRack_t);
	}
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		message_queue<cft_DefPacket> mq_MsgQOutboundRack_t;
		CF_ASSERT (mq_MsgQOutboundRack_t)
		mq_MsgQOutboundRack_vec.push_back(mq_MsgQOutboundRack_t);
	}
//connections
//model connect to port
InboundDataCenterSwitch->p_mq_MsgQInboundDataCenterSwitch(p_mq_MsgQInboundDataCenterSwitch);
InboundDataCenterSwitch->p_mq_MsgQServerRoom(p_mq_MsgQServerRoom);
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		cfm_inboundrack* module = InboundRack_vec[i];
		if (module!= nullptr) {
//model connect to port
for (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {
				module->p_mq_MsgQInboundRack(mq_MsgQInboundRack_vec[j]->p_target_socket);
			}
}
}
//model connect to port
OutboundDataCenterSwitch->p_mq_MsgQOutboundDataCenterSwitch(p_mq_MsgQOutboundDataCenterSwitch);
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		cfm_outboundrack* module = OutboundRack_vec[i];
		if (module!= nullptr) {
//model connect to port
for (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {
				module->p_mq_MsgQOutboundRack(mq_MsgQOutboundRack_vec[j]->p_target_socket);
			}
}
}
//model connect to relation
RoutingFunction->p_mq_MsgQInboundDataCenterSwitch(p_mq_MsgQInboundDataCenterSwitch);
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQInboundRack(mq_MsgQInboundRack_vec[i]->p_target_socket);
	}
RoutingFunction->p_mq_MsgQOutboundDataCenterSwitch(p_mq_MsgQOutboundDataCenterSwitch);
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQOutboundRack(mq_MsgQOutboundRack_vec[i]->p_target_socket);
	}
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_aggswitch::~cfm_aggswitch(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'AGGSwitch destructor' algorithm generated code

//End of 'AGGSwitch destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
delete InboundDataCenterSwitch;
for (vector<cfm_inboundrack*>::const_iterator vi = InboundRack_vec.begin();
			vi!= InboundRack_vec.end(); vi++) {
		delete (*vi);
	}
delete OutboundDataCenterSwitch;
for (vector<cfm_outboundrack*>::const_iterator vi = OutboundRack_vec.begin();
			vi!= OutboundRack_vec.end(); vi++) {
		delete (*vi);
	}
delete RoutingFunction;
//deconstructor for vector relation
for (vector<mq_MsgQInboundRack_t*>::const_iterator vi = mq_MsgQInboundRack_vec.begin();
			vi!= mq_MsgQInboundRack_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MsgQOutboundRack_t*>::const_iterator vi = mq_MsgQOutboundRack_vec.begin();
			vi!= mq_MsgQOutboundRack_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_aggswitch::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_aggswitch::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>