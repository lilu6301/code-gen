
/*
 * \class cfm_aggswitch
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_aggswitch.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_serverroom
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_aggswitch
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_aggswitch::cfm_aggswitch(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_aggswitch_dp_if()
, p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch")
, p_mq_MsgQToRack("p_mq_MsgQToRack")
, p_mq_MsgQToServerRoom("p_mq_MsgQToServerRoom")
, p_mq_MsgQToDataCenterSwitch("p_mq_MsgQToDataCenterSwitch")
, mq_MsgQInboundDataCenterSwitch("MsgQInboundDataCenterSwitch"
)
, mq_MsgQOutboundDataCenterSwitch("MsgQOutboundDataCenterSwitch"
)

{
	cf_function_container::init();
	InboundDataCenterSwitch = new cfm_inbounddatacenterswitch
	("InboundDataCenterSwitch");
	OutboundDataCenterSwitch = new cfm_outbounddatacenterswitch
	("OutboundDataCenterSwitch");
	RoutingFunction = new cfm_aggswitch_routingfunction
	("RoutingFunction");

	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		cfm_inboundrack* module=new cfm_inboundrack(cf_string("InboundRack[%d]", i).c_str());
		CF_ASSERT( module )
		InboundRack_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		cfm_outboundrack* module=new cfm_outboundrack(cf_string("OutboundRack[%d]", i).c_str());
		CF_ASSERT( module )
		OutboundRack_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		mq_MsgQInboundRack_t* module=new mq_MsgQInboundRack_t(cf_string("MsgQInboundRack[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQInboundRack_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		mq_MsgQOutboundRack_t* module=new mq_MsgQOutboundRack_t(cf_string("MsgQOutboundRack[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQOutboundRack_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb+1); i++)
	{
		p_mq_MsgQToServerRoom_t* module=new p_mq_MsgQToServerRoom_t(cf_string("p_mq_MsgQToServerRoom[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToServerRoom_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb+1); i++)
	{
		p_mq_MsgQToDataCenterSwitch_t* module=new p_mq_MsgQToDataCenterSwitch_t(cf_string("p_mq_MsgQToDataCenterSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToDataCenterSwitch_vec.push_back(module);
	}
	InboundDataCenterSwitch->p_mq_MsgQToServerRoom
	((*p_mq_MsgQToServerRoom_vec[
							i
							]
			)
	);
	InboundDataCenterSwitch->p_mq_MsgQInboundDataCenterSwitch
	(mq_MsgQInboundDataCenterSwitch
			.p_target_socket
	);
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		InboundDataCenterSwitch->p_mq_MsgQInboundRack
		(mq_MsgQInboundRack_vec[i]
				->p_target_socket
		);
	}

	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		cfm_inboundrack* module
		=InboundRack_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
				module->p_mq_MsgQInboundRack
				(mq_MsgQInboundRack_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MsgQToServerRoom
			((*p_mq_MsgQToServerRoom_vec[
							i
							]
					)
			);
		}
	}

	OutboundDataCenterSwitch->p_mq_MsgQOutboundDataCenterSwitch
	(mq_MsgQOutboundDataCenterSwitch
			.p_target_socket
	);
	OutboundDataCenterSwitch->p_mq_MsgQToDataCenterSwitch
	((*p_mq_MsgQToDataCenterSwitch_vec[
							i
							]
			)
	);
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		OutboundDataCenterSwitch->p_mq_MsgQOutboundRack
		(mq_MsgQOutboundRack_vec[i]
				->p_target_socket
		);
	}

	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		cfm_outboundrack* module
		=OutboundRack_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
				module->p_mq_MsgQOutboundRack
				(mq_MsgQOutboundRack_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MsgQToDataCenterSwitch
			((*p_mq_MsgQToDataCenterSwitch_vec[
							i
							]
					)
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQInboundRack
		(mq_MsgQInboundRack_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQOutboundRack
		(mq_MsgQOutboundRack_vec[i]
				->p_target_socket
		);
	}
	RoutingFunction->p_mq_MsgQToAggSwitch
	(p_mq_MsgQToAggSwitch
	);
	RoutingFunction->p_mq_MsgQToRack
	(p_mq_MsgQToRack
	);



	cf_function_container::elab_end();
}

cfm_aggswitch::~cfm_aggswitch(void) {

	for (vector<cfm_inboundrack*>::const_iterator vi = InboundRack_vec.begin(); vi != InboundRack_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_outboundrack*>::const_iterator vi = OutboundRack_vec.begin(); vi != OutboundRack_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQInboundRack_t*>::const_iterator vi = mq_MsgQInboundRack_vec.begin(); vi != mq_MsgQInboundRack_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQOutboundRack_t*>::const_iterator vi = mq_MsgQOutboundRack_vec.begin(); vi != mq_MsgQOutboundRack_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToServerRoom_t*>::const_iterator vi = p_mq_MsgQToServerRoom_vec.begin(); vi != p_mq_MsgQToServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToDataCenterSwitch_t*>::const_iterator vi = p_mq_MsgQToDataCenterSwitch_vec.begin(); vi != p_mq_MsgQToDataCenterSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	delete InboundDataCenterSwitch;	///ddd
	delete OutboundDataCenterSwitch;	///ddd
	delete RoutingFunction;	///ddd
}

void cfm_aggswitch::cb_before_elaboration(void) {

}

void cfm_aggswitch::cb_end_of_elaboration(void) {

}

void cfm_aggswitch::cb_end_of_simulation(void) {

}

void cfm_aggswitch::cb_init_attributes() {

	mq_MsgQInboundDataCenterSwitch.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQInboundDataCenterSwitch.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQInboundDataCenterSwitch.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQInboundDataCenterSwitch.cfa_queue_capacity.init((cf_nonzero_count) dpAggSwitchPortBufferSize);
	mq_MsgQInboundDataCenterSwitch.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQInboundDataCenterSwitch.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQInboundDataCenterSwitch.cfa_receive_threshold.init((cf_nonzero_count) 1);
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		(*mq_MsgQInboundRack_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQInboundRack_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQInboundRack_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQInboundRack_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpAggSwitchPortBufferSize);
		(*mq_MsgQInboundRack_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQInboundRack_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQInboundRack_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	mq_MsgQOutboundDataCenterSwitch.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQOutboundDataCenterSwitch.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQOutboundDataCenterSwitch.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQOutboundDataCenterSwitch.cfa_queue_capacity.init((cf_nonzero_count) dpAggSwitchPortBufferSize);
	mq_MsgQOutboundDataCenterSwitch.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQOutboundDataCenterSwitch.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQOutboundDataCenterSwitch.cfa_receive_threshold.init((cf_nonzero_count) 1);
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		(*mq_MsgQOutboundRack_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQOutboundRack_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQOutboundRack_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQOutboundRack_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpAggSwitchPortBufferSize);
		(*mq_MsgQOutboundRack_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQOutboundRack_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQOutboundRack_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_aggswitch::cb_init_local_vars(void) {


}


