
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_memorycontroller
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_memorycontroller.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_memorycontroller
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'MemoryController definitions' algorithm generated code

// End of 'MemoryController definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_memorycontroller ::cfm_memorycontroller()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), cfm_memorycontroller_dp_if(),
      p_mq_ARADDRchn("p_mq_ARADDRchn"), p_mq_AWADDRchn("p_mq_AWADDRchn"),
      p_mq_BRESPchn("p_mq_BRESPchn"), p_mq_DDRCommand("p_mq_DDRCommand"),
      p_mq_DQs("p_mq_DQs"), p_mq_WDATAchn("p_mq_WDATAchn"),
      p_mq_WriteAck("p_mq_WriteAck") {
  cf_function_container::init();
  // instantiation of models
  BackEnd = new cfm_backend("BackEnd");
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module =
        new cfm_frontend(cf_string("FrontEnd[%d]", i).c_str());
    CF_ASSERT(module)
    FrontEnd_vec.push_back(module);
  }
  RAddrDmux = new cfm_raddrdmux("RAddrDmux");
  WAddrDmux = new cfm_waddrdmux("WAddrDmux");
  WdataDmux = new cfm_wdatadmux("WdataDmux");
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    mq_ARADDRin_t *module =
        new mq_ARADDRin_t(cf_string("ARADDRin[%d]", i).c_str());
    CF_ASSERT(module)
    mq_ARADDRin_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    mq_AWADDRin_t *module =
        new mq_AWADDRin_t(cf_string("AWADDRin[%d]", i).c_str());
    CF_ASSERT(module)
    mq_AWADDRin_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    mq_DataRead_t *module =
        new mq_DataRead_t(cf_string("DataRead[%d]", i).c_str());
    CF_ASSERT(module)
    mq_DataRead_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    mq_WriteAck_t *module =
        new mq_WriteAck_t(cf_string("WriteAck[%d]", i).c_str());
    CF_ASSERT(module)
    mq_WriteAck_vec.push_back(module);
  }
  // connections
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  // model connect to port
  BackEnd->p_mq_DDRCommand(p_mq_DDRCommand);
  BackEnd->p_mq_DQs(p_mq_DQs);
  BackEnd->p_mq_WriteAck(p_mq_WriteAck);
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  // model connect to port
  FrontEnd->p_mq_BRESPchn(p_mq_BRESPchn);
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    p_mq_DDRCommand(p_mq_DDRCommand);
    p_mq_DQs(p_mq_DQs);
    p_mq_WriteAck(p_mq_WriteAck);
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    p_mq_ARADDRin(p_mq_ARADDRin);
    p_mq_AWADDRin(p_mq_AWADDRin);
    p_mq_DataRead(p_mq_DataRead);
    p_mq_MemReadRequest(p_mq_MemReadRequest);
    p_mq_MemWriteRequest(p_mq_MemWriteRequest);
    p_mq_WDATAin(p_mq_WDATAin);
    p_mq_WriteAck(p_mq_WriteAck);
  }
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_raddrdmux *module = RAddrDmux;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_waddrdmux *module = WAddrDmux;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_wdatadmux *module = WdataDmux;
    mq_WDATAin_t *mq_WDATAin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_writeack *module = WriteAck;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  // model connect to port
  RAddrDmux->p_mq_ARADDRchn(p_mq_ARADDRchn);
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemWriteRequest_t *mq_MemWriteRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_MemWriteRequest_t *mq_MemWriteRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemWriteRequest_t *mq_MemWriteRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_MemWriteRequest_t *mq_MemWriteRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemWriteRequest_t *mq_MemWriteRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_MemWriteRequest_t *mq_MemWriteRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_WriteAck_t *mq_WriteAck;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_ARADDRin_t *mq_ARADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_AWADDRin_t *mq_AWADDRin;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_frontend *module = FrontEnd;
    mq_DataRead_t *mq_DataRead;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_targetid;
   OPERATIONTYPE message_operation;
  }
  for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
    cfm_backend *module = BackEnd;
    mq_MemReadRequest_t *mq_MemReadRequest;
    cf_dt::cf_time transfer_time;
    cf_dt::cf_time message_time_stamp;
    cf_dt::cf_data_size message_size;
   DEVICEIDTYPE message_