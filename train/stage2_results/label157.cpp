//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_device
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_device.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_clientside
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_device
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Device definitions' algorithm generated code

//End of 'Device definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_device::cfm_device(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_device_dp_if(), p_mq_RDATAin(
				"p_mq_RDATAin"), p_mq_BRESPin("p_mq_BRESPin"), p_mq_ARADDRchn(
				"p_mq_ARADDRchn"), p_mq_WDATAchn("p_mq_WDATAchn"), p_mq_AWADDRchn(
				"p_mq_AWADDRchn") {
	cf_function_container::init();
	ReceiveWACK = new cfm_receivewack("ReceiveWACK");
	ReceiverRData = new cfm_receiverrdata("ReceiverRData");
	Sender = new cfm_sender("Sender");

	// connections
	ReceiveWACK->p_mq_BRESPin(p_mq_BRESPin);

	ReceiverRData->p_mq_RDATAin(p_mq_RDATAin);

	Sender->p_mq_ARADDRchn(p_mq_ARADDRchn);
	Sender->p_mq_WDATAchn(p_mq_WDATAchn);
	Sender->p_mq_AWADDRchn(p_mq_AWADDRchn);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device constructor' algorithm generated code

	//End of 'Device constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_device::~cfm_device(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device destructor' algorithm generated code

	//End of 'Device destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete ReceiveWACK;
	delete ReceiverRData;
	delete Sender;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_device::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device pre elaboration' algorithm generated code

	//End of 'Device pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_device::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device post elaboration' algorithm generated code

	//End of 'Device post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_device::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device post simulation' algorithm generated code

	//End of 'Device post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_device::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_device::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device initializations' algorithm generated code

	//End of 'Device initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>