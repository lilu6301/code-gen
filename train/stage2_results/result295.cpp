
/*
 * \class cfm_mymodel
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of MyModel generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_mymodel.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_mymodel::cfm_mymodel(sc_core::sc_module_name name)
cf_application(name)
, cfm_mymodel_dp_if()
, mq_p_in("p_in"
)
, mq_p_out("p_out"
)

{
	cf_application::init();
	packet_in = new cfm_packet_in
	("packet_in");
	packet_out = new cfm_packet_out
	("packet_out");
	packet_process = new cfm_packet_process
	("packet_process");

	packet_in->p_mq_p_in
	(mq_p_in
			.p_target_socket
	);

	packet_out->p_mq_p_out
	(mq_p_out
			.p_target_socket
	);

	packet_process->p_mq_p_in
	(mq_p_in
			.p_target_socket
	);
	packet_process->p_mq_p_out
	(mq_p_out
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_mymodel::~cfm_mymodel(void) {

	delete packet_in;	///ddd
	delete packet_out;	///ddd
	delete packet_process;	///ddd
}

void cfm_mymodel::cb_before_elaboration(void) {

}

void cfm_mymodel::cb_end_of_elaboration(void) {

}

void cfm_mymodel::cb_end_of_simulation(void) {

}

void cfm_mymodel::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_p_in.cfa_send_time.init(cf_expr_duration(1, CF_MS));
	mq_p_in.cfa_receive_time.init(cf_expr_duration(1, CF_MS));
	mq_p_in.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_p_in.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_p_in.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_p_in.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_p_in.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_p_out.cfa_send_time.init(cf_expr_duration(1, CF_MS));
	mq_p_out.cfa_receive_time.init(cf_expr_duration(1, CF_MS));
	mq_p_out.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_p_out.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_p_out.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_p_out.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_p_out.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_mymodel::cb_init_local_vars(void) {


}


