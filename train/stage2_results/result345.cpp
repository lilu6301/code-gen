
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_filesystem
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of Bluetooth_IPs generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_filesystem.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_bluetooth_ips
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_filesystem
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'FileSystem definitions' algorithm generated code

// End of 'FileSystem definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_filesystem ::cfm_filesystem()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function(name), cfm_filesystem_dp_if(), p_ev_WrOK("p_ev_WrOK"),
      p_mq_DataIn("p_mq_DataIn"), p_mq_DataOut("p_mq_DataOut"),
      p_mq_ReadWrite("p_mq_ReadWrite"), p_sv_Data("p_sv_Data") {
  cf_function::init();
  // connections
  cf_function::elab_end();
}
//@}

/// \name destructor
//@{
cfm_filesystem::~cfm_filesystem(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem destructor' algorithm generated code

  // End of 'FileSystem destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name pre-elaboration section
//@{
void cfm_filesystem::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem pre elaboration' algorithm generated code

  // End of 'FileSystem pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_filesystem::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem post elaboration' algorithm generated code

  // End of 'FileSystem post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_filesystem::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem post simulation' algorithm generated code

  // End of 'FileSystem post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_filesystem::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  cfa_scope.init(CF_FCT_SYSTEM);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_filesystem::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem initializations' algorithm generated code
  message_time_stamp = cf_dt::cf_time(0, CF_NS);
  message_size = cf_dt::cf_data_size(0, CF_BYTE);
  // bus_throughput = DP_RINGSTOP_THROUGHPUT.get_value();
  bus_width = DP_BLUETOOTH_DATA_BUS_WIDTH.get_value().to_scalar(CF_BYTE);
  bus_efficiency = DP_BLUETOOTH_EFFICIENCY.get_value();
  frequency_map_GL[RING] = DP_CPU_RING_FREQ.get_value().to_scalar(CF_HZ);
  latency = (float)DP_BLUETOOTH_RINGSTOP_LATENCY.get_value().to_scalar(CF_CYCLE);
  // End of 'FileSystem initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>