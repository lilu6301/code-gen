
/*
 * \class cfm_memorycontroller
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_memorycontroller.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_memorycontroller
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_memorycontroller::cfm_memorycontroller(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_memorycontroller_dp_if()
, p_mq_DQs("p_mq_DQs")
, p_mq_RDATAchn("p_mq_RDATAchn")
, p_mq_ARADDRchn("p_mq_ARADDRchn")
, p_mq_BRESPchn("p_mq_BRESPchn")
, p_mq_WDATAchn("p_mq_WDATAchn")
, p_mq_AWADDRchn("p_mq_AWADDRchn")
, p_mq_DDRCommand("p_mq_DDRCommand")
, mq_MemReadRequest("MemReadRequest"
)
, mq_MemWriteRequest("MemWriteRequest"
)

{
	cf_function_container::init();
	BackEnd = new cfm_backend
	("BackEnd");
	RAddrDux = new cfm_raddrdux
	("RAddrDux");
	WAddrDux = new cfm_waddrdux
	("WAddrDux");

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		cfm_frontend* module=new cfm_frontend(cf_string("FrontEnd[%d]", i).c_str());
		CF_ASSERT( module )
		FrontEnd_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_DataRead_t* module=new mq_DataRead_t(cf_string("DataRead[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DataRead_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_WriteAck_t* module=new mq_WriteAck_t(cf_string("WriteAck[%d]", i).c_str());
		CF_ASSERT( module )
		mq_WriteAck_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_ARADDRin_t* module=new mq_ARADDRin_t(cf_string("ARADDRin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_ARADDRin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_WDATAin_t* module=new mq_WDATAin_t(cf_string("WDATAin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_WDATAin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_MemReadRequest_t* module=new mq_MemReadRequest_t(cf_string("MemReadRequest[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MemReadRequest_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_MemWriteRequest_t* module=new mq_MemWriteRequest_t(cf_string("MemWriteRequest[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MemWriteRequest_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_AWADDRin_t* module=new mq_AWADDRin_t(cf_string("AWADDRin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_AWADDRin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_RDATAchn_t* module=new mq_RDATAchn_t(cf_string("RDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		mq_RDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_BRESPchn_t* module=new mq_BRESPchn_t(cf_string("BRESPchn[%d]", i).c_str());
		CF_ASSERT( module )
		mq_BRESPchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++)
	{
		mq_DQs_t* module=new mq_DQs_t(cf_string("DQs[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DQs_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		cfm_frontend* module
		=FrontEnd_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_DataRead
				(mq_DataRead_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_WriteAck
				(mq_WriteAck_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_MemReadRequest
				(mq_MemReadRequest_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_MemWriteRequest
				(mq_MemWriteRequest_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_ARADDRin
				(mq_ARADDRin_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_WDATAin
				(mq_WDataIn_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_DataDNRing
				(mq_DataDNRing_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_WriteDNRing
				(mq_WriteDNRing_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_DQs
			((*mq_DQs_vec[
							i
							]
					)
			);
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_BRESPchn
				(mq_BRESPchn_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(P_Nbr + 1); j++) {
				module->p_mq_RDATAchn
				(mq_RDATAchn_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MemReadRequest_0
			(mq_MemReadRequest_vec[0]
					->p_target_socket
			);
			module->p_mq_MemReadRequest_1
			(mq_MemReadRequest_vec[1]
					->p_target_socket
			);
			module->p_mq_MemReadRequest_2
			(mq_MemReadRequest_vec[2]
					->p_target_socket
			);
			module->p_mq_MemWriteRequest_0
			(mq_MemWriteRequest_vec[0]
					->p_target_socket
			);
			module->p_mq_MemWriteRequest_1
			(mq_MemWriteRequest_vec[1]
					->p_target_socket
			);
			module->p_mq_MemWriteRequest_2
			(mq_MemWriteRequest_vec[2]
					->p_target_socket
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_MemReadRequest
		(mq_MemReadRequest_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_MemWriteRequest
		(mq_MemWriteRequest_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_DataRead
		(mq_DataRead_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_WriteAck
		(mq_WriteAck_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_BRESPchn
		(mq_BRESPchn_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_RDATAchn
		(mq_RDATAchn_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		BackEnd->p_mq_DQs
		(mq_DQs_vec[i]
				->p_target_socket
		);
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		RAddrDux->p_mq_ARADDRin
		(mq_ARADDRin_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		RAddrDux->p_mq_RDATAchn
		(mq_RDATAchn_vec[i]
				->p_target_socket
		);
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		WAddrDux->p_mq_WDATAin
		(mq_WDataIn_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		WAddrDux->p_mq_DQs
		(mq_DQs_vec[i]
				->p_target_socket
		);
	}



	cf_function_container::elab_end();
}

cfm_memorycontroller::~cfm_memorycontroller(void) {

	for (vector<cfm_frontend*>::const_iterator vi = FrontEnd_vec.begin(); vi != FrontEnd_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DataRead_t*>::const_iterator vi = mq_DataRead_vec.begin(); vi != mq_DataRead_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_WriteAck_t*>::const_iterator vi = mq_WriteAck_vec.begin(); vi != mq_WriteAck_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_ARADDRin_t*>::const_iterator vi = mq_ARADDRin_vec.begin(); vi != mq_ARADDRin_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_RDATAchn_t*>::const_iterator vi = mq_RDATAchn_vec.begin(); vi != mq_RDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_BRESPchn_t*>::const_iterator vi = mq_BRESPchn_vec.begin(); vi != mq_BRESPchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DQs_t*>::const_iterator vi = mq_DQs_vec.begin(); vi != mq_DQs_vec.end(); vi++) {
		delete (*vi);
	}
	delete BackEnd;	///ddd
	delete RAddrDux;	///ddd
	delete WAddrDux;	///ddd
}

void cfm_memorycontroller::cb_before_elaboration(void) {

}

void cfm_memorycontroller::cb_end_of_elaboration(void) {

}

void cfm_memorycontroller::cb_end_of_simulation(void) {

}

void cfm_memorycontroller::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_DataRead_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DataRead_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DataRead_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DataRead_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DataRead_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DataRead_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_WriteAck_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_WriteAck_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_WriteAck_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_WriteAck_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_WriteAck_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_WriteAck_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_MemReadRequest_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MemReadRequest_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MemReadRequest_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_MemReadRequest_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MemReadRequest_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MemReadRequest_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_MemWriteRequest_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MemWriteRequest_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MemWriteRequest_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_MemWriteRequest_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MemWriteRequest_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MemWriteRequest_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_AWADDRin_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_AWADDRin_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_AWADDRin_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_AWADDRin_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_AWADDRin_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_AWADDRin_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_RDATAchn_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_RDATAchn_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_RDATAchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_RDATAchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_RDATAchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_RDATAchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_BRESPchn_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_BRESPchn_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_BRESPchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_BRESPchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_BRESPchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_BRESPchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		(*mq_DQs_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DQs_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DQs_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DQs_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_memorycontroller::cb_init_local_vars(void) {


}


