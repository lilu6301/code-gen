
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_memorycontroller
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_memorycontroller.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_memorycontroller
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'MemoryController definitions' algorithm generated code

//End of 'MemoryController definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_memorycontroller::cfm_memorycontroller(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_memorycontroller_dp_if(), p_mq_DQs(
				"p_mq_DQs"), p_mq_RDATAchn("p_mq_RDATAchn"), p_mq_ARADDRchn(
				"p_mq_ARADDRchn"), p_mq_BRESPchn("p_mq_BRESPchn"), p_mq_WDATAchn(
				"p_mq_WDATAchn"), p_mq_AWADDRchn("p_mq_AWADDRchn"), p_mq_DDRCommand(
				"p_mq_DDRCommand"), mq_DataRead("DataRead"), mq_MemReadRequest(
				"MemReadRequest"), mq_MemWriteRequest("MemWriteRequest") {
	cf_function_container::init();
	RAddrDmux = new cfm_rdownx("RAddrDmux");
	WAddrDmux = new cfm_waddxdmux("WAddrDmux");
	BackEnd = new cfm_backend("BackEnd");
	FrontEnd = new cfm_frontend("FrontEnd");

	// instantiation of mq_ARADDRin_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_ARADDRin_t* module = new mq_ARADDRin_t(
				cf_string("ARADDRin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_ARADDRin_vec.push_back(module);
	}
	// instantiation of mq_AWADDRin_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_AWADDRin_t* module = new mq_AWADDRin_t(
				cf_string("AWADDRin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_AWADDRin_vec.push_back(module);
	}
	// instantiation of mq_DataDNRing_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_DataDNRing_t* module = new mq_DataDNRing_t(
				cf_string("DataDNRing[%d]", i).c_str());
		CF_ASSERT (module)
		mq_DataDNRing_vec.push_back(module);
	}
	// instantiation of mq_DataUpRing_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_DataUpRing_t* module = new mq_DataUpRing_t(
				cf_string("DataUpRing[%d]", i).c_str());
		CF_ASSERT (module)
		mq_DataUpRing_vec.push_back(module);
	}
	// instantiation of mq_MemDNRing_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_MemDNRing_t* module = new mq_MemDNRing_t(
				cf_string("MemDNRing[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MemDNRing_vec.push_back(module);
	}
	// instantiation of mq_MemUpRing_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_MemUpRing_t* module = new mq_MemUpRing_t(
				cf_string("MemUpRing[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MemUpRing_vec.push_back(module);
	}
	// instantiation of mq_WriteAck_vec
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		mq_WriteAck_t* module = new mq_WriteAck_t(
				cf_string("WriteAck[%d]", i).c_str());
		CF_ASSERT (module)
		mq_WriteAck_vec.push_back(module);
	}
	// instantiation of p_mq_BRESPchn_vec
	for (cf_count i = 0; i < (cf_count) FrontEnd->p_mq_BRESPchn_vec.size();
			i++) {
		p_mq_BRESPchn_t* module = new p_mq_BRESPchn_t(
				cf_string("p_mq_BRESPchn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_BRESPchn_vec.push_back(module);
	}
	// instantiation of p_mq_DDRCommand_vec
	for (cf_count i = 0; i < (cf_count) BackEnd->p_mq_DDRCommand_vec.size();
			i++) {
		p_mq_DDRCommand_t* module = new p_mq_DDRCommand_t(
				cf_string("p_mq_DDRCommand[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_DDRCommand_vec.push_back(module);
	}
	// instantiation of p_mq_RDATAchn_vec
	for (cf_count i = 0; i < (cf_count) FrontEnd->p_mq_RDATAchn_vec.size();
			i++) {
		p_mq_RDATAchn_t* module = new p_mq_RDATAchn_t(
				cf_string("p_mq_RDATAchn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_RDATAchn_vec.push_back(module);
	}
	// connections
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0; j < (cf_count) RAddrDmux->p_mq_ARADDRin_vec.size();
				j++) {
			cfm_rdownx::p_mq_ARADDRin_t* port = RAddrDmux->p_mq_ARADDRin_vec[j];
			if (port != nullptr) {
				port->bind(mq_ARADDRin_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_DataDNRing_0_vec.size(); j++) {
			cfm_rdownx::p_mq_DataDNRing_0_t* port =
					RAddrDmux->p_mq_DataDNRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_DataUpRing_0_vec.size(); j++) {
			cfm_rdownx::p_mq_DataUpRing_0_t* port =
					RAddrDmux->p_mq_DataUpRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_MemDNRing_0_vec.size(); j++) {
			cfm_rdownx::p_mq_MemDNRing_0_t* port =
					RAddrDmux->p_mq_MemDNRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_MemUpRing_0_vec.size(); j++) {
			cfm_rdownx::p_mq_MemUpRing_0_t* port =
					RAddrDmux->p_mq_MemUpRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_WriteAck_0_vec.size(); j++) {
			cfm_rdownx::p_mq_WriteAck_0_t* port =
					RAddrDmux->p_mq_WriteAck_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_WriteAck_1_vec.size(); j++) {
			cfm_rdownx::p_mq_WriteAck_1_t* port =
					RAddrDmux->p_mq_WriteAck_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_WriteAck_2_vec.size(); j++) {
			cfm_rdownx::p_mq_WriteAck_2_t* port =
					RAddrDmux->p_mq_WriteAck_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_WriteAck_3_vec.size(); j++) {
			cfm_rdownx::p_mq_WriteAck_3_t* port =
					RAddrDmux->p_mq_WriteAck_3_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) RAddrDmux->p_mq_WriteAck_4_vec.size(); j++) {
			cfm_rdownx::p_mq_WriteAck_4_t* port =
					RAddrDmux->p_mq_WriteAck_4_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_ARADDRin_vec.size(); j++) {
			cfm_frontend::p_mq_ARADDRin_t* port = FrontEnd->p_mq_ARADDRin_vec[j];
			if (port != nullptr) {
				port->bind(mq_ARADDRin_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_DataDNRing_0_vec.size(); j++) {
			cfm_frontend::p_mq_DataDNRing_0_t* port =
					FrontEnd->p_mq_DataDNRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_DataUpRing_0_vec.size(); j++) {
			cfm_frontend::p_mq_DataUpRing_0_t* port =
					FrontEnd->p_mq_DataUpRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_MemDNRing_0_vec.size(); j++) {
			cfm_frontend::p_mq_MemDNRing_0_t* port =
					FrontEnd->p_mq_MemDNRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_MemUpRing_0_vec.size(); j++) {
			cfm_frontend::p_mq_MemUpRing_0_t* port =
					FrontEnd->p_mq_MemUpRing_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_0_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_0_t* port =
					FrontEnd->p_mq_WriteAck_0_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_1_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_1_t* port =
					FrontEnd->p_mq_WriteAck_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_2_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_2_t* port =
					FrontEnd->p_mq_WriteAck_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_3_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_3_t* port =
					FrontEnd->p_mq_WriteAck_3_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_4_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_4_t* port =
					FrontEnd->p_mq_WriteAck_4_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_DataDNRing_1_vec.size(); j++) {
			cfm_backend::p_mq_DataDNRing_1_t* port =
					BackEnd->p_mq_DataDNRing_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_DataUpRing_1_vec.size(); j++) {
			cfm_backend::p_mq_DataUpRing_1_t* port =
					BackEnd->p_mq_DataUpRing_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_MemDNRing_1_vec.size(); j++) {
			cfm_backend::p_mq_MemDNRing_1_t* port =
					BackEnd->p_mq_MemDNRing_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_MemUpRing_1_vec.size(); j++) {
			cfm_backend::p_mq_MemUpRing_1_t* port =
					BackEnd->p_mq_MemUpRing_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_WriteAck_1_vec.size(); j++) {
			cfm_backend::p_mq_WriteAck_1_t* port =
					BackEnd->p_mq_WriteAck_1_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_WriteAck_2_vec.size(); j++) {
			cfm_backend::p_mq_WriteAck_2_t* port =
					BackEnd->p_mq_WriteAck_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_WriteAck_3_vec.size(); j++) {
			cfm_backend::p_mq_WriteAck_3_t* port =
					BackEnd->p_mq_WriteAck_3_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_WriteAck_4_vec.size(); j++) {
			cfm_backend::p_mq_WriteAck_4_t* port =
					BackEnd->p_mq_WriteAck_4_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_DataDNRing_2_vec.size(); j++) {
			cfm_frontend::p_mq_DataDNRing_2_t* port =
					FrontEnd->p_mq_DataDNRing_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_DataUpRing_2_vec.size(); j++) {
			cfm_frontend::p_mq_DataUpRing_2_t* port =
					FrontEnd->p_mq_DataUpRing_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_MemDNRing_2_vec.size(); j++) {
			cfm_frontend::p_mq_MemDNRing_2_t* port =
					FrontEnd->p_mq_MemDNRing_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_MemUpRing_2_vec.size(); j++) {
			cfm_frontend::p_mq_MemUpRing_2_t* port =
					FrontEnd->p_mq_MemUpRing_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_MemUpRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_2_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_2_t* port =
					FrontEnd->p_mq_WriteAck_2_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_3_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_3_t* port =
					FrontEnd->p_mq_WriteAck_3_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) FrontEnd->p_mq_WriteAck_4_vec.size(); j++) {
			cfm_frontend::p_mq_WriteAck_4_t* port =
					FrontEnd->p_mq_WriteAck_4_vec[j];
			if (port != nullptr) {
				port->bind(mq_WriteAck_vec[i]->p_target_socket);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_DataDNRing_3_vec.size(); j++) {
			cfm_backend::p_mq_DataDNRing_3_t* port =
					BackEnd->p_mq_DataDNRing_3_vec[j];
			if (port != nullptr) {
				port->bind(mq_DataDNRing_vec[i]->p_target_socket);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nbr + 1); i++) {
		for (cf_count j = 0;
				j < (cf_count) BackEnd->p_mq_DataUpRing_3_vec.size(); j++) {
