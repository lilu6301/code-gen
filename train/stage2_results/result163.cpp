READ-ONLY-SECTION-START@!#>
/*
* \class cfm_memorycontroller
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_memorycontroller.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'MemoryController definitions' algorithm generated code

//End of 'MemoryController definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_memorycontroller ::cfm_memorycontroller() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),p_mq_ARADDRchn("p_mq_ARADDRchn"),p_mq_AWADDRchn("p_mq_AWADDRchn"),p_mq_BRESPchn("p_mq_BRESPchn"),p_mq_DQs("p_mq_DQs"),p_mq_MemReadRequest("p_mq_MemReadRequest"),p_mq_MemWriteRequest("p_mq_MemWriteRequest"),p_mq_RDATAchn("p_mq_RDATAchn"),p_mq_WriteAck("p_mq_WriteAck"),sv_DataRead("DataRead"),sv_DataWrite("DataWrite"),sv_MemReadRequest("MemReadRequest"),sv_MemWriteRequest("MemWriteRequest"),sv_RDATAchn("RDATAchn"),sv_WriteAck("WriteAck"),mq_ARADDRin("ARADDRin"),mq_AWADDRin("AWADDRin"),mq_DataRead("DataRead"),mq_DataWrite("DataWrite"),mq_MemReadRequest("MemReadRequest"),mq_MemWriteRequest("MemWriteRequest"),mq_RDATAchn("RDATAchn"),mq_WriteAck("WriteAck"),p_mq_WDATAchn("p_mq_WDATAchn"){
cf_function_container::init();
//instantiation of models
BackEnd = new cfm_backend("BackEnd");
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		cfm_frontend* module = new cfm_frontend(
				cf_string("FrontEnd[%d]", i).c_str());
		CF_ASSERT (module)
		FrontEnd_vec.push_back(module);
	}
RAddrDmux = new cfm_raddrdmux("RAddrDmux");
WAddrDmux = new cfm_waddrdmux("WAddrDmux");
WdataDmux = new cfm_wdatadmux("WdataDmux");
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_ARADDRin_t* module = new mq_ARADDRin_t(
				cf_string("ARADDRin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_ARADDRin_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_AWADDRin_t* module = new mq_AWADDRin_t(
				cf_string("AWADDRin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_AWADDRin_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_DataRead_t* module = new mq_DataRead_t(
				cf_string("DataRead[%d]", i).c_str());
		CF_ASSERT (module)
		mq_DataRead_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_DataWrite_t* module = new mq_DataWrite_t(
				cf_string("DataWrite[%d]", i).c_str());
		CF_ASSERT (module)
		mq_DataWrite_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_MemReadRequest_t* module = new mq_MemReadRequest_t(
				cf_string("MemReadRequest[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MemReadRequest_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_MemWriteRequest_t* module = new mq_MemWriteRequest_t(
				cf_string("MemWriteRequest[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MemWriteRequest_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_RDATAchn_t* module = new mq_RDATAchn_t(
				cf_string("RDATAchn[%d]", i).c_str());
		CF_ASSERT (module)
		mq_RDATAchn_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		mq_WriteAck_t* module = new mq_WriteAck_t(
				cf_string("WriteAck[%d]", i).c_str());
		CF_ASSERT (module)
		mq_WriteAck_vec.push_back(module);
	}
//connections
//model connect to port
BackEnd->p_mq_DQs(p_mq_DQs);
BackEnd->p_mq_WriteAck(p_mq_WriteAck);
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		cfm_frontend* module = FrontEnd_vec[i];
		if (module!= nullptr) {
//model connect to port
module->p_mq_BRESPchn(p_mq_BRESPchn);
for (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {
				module->p_mq_DataRead(mq_DataRead_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {
				module->p_mq_DataWrite(mq_DataWrite_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {
				module->p_mq_MemReadRequest(mq_MemReadRequest_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {
				module->p_mq_MemWriteRequest(mq_MemWriteRequest_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {
				module->p_mq_RDATAchn(mq_RDATAchn_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {
				module->p_mq_WriteAck(mq_WriteAck_vec[j]->p_target_socket);
			}
}
}
//model connect to port
RAddrDmux->p_mq_ARADDRchn(p_mq_ARADDRchn);
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		RAddrDmux->p_mq_ARADDRin(mq_ARADDRin_vec[i]->p_target_socket);
	}
RAddrDmux->p_mq_RDATAchn(p_mq_RDATAchn);
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		RAddrDmux->p_mq_WriteAck(mq_WriteAck_vec[i]->p_target_socket);
	}
//model connect to port
WAddrDmux->p_mq_AWADDRchn(p_mq_AWADDRchn);
for (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {
		WAddrDmux->p_mq_AWADDRin(mq_AWADDRin_vec[i]->p_target_socket);
	}
WAddrDmux->p_mq_WDATAchn(p_mq_WDATAchn);
//model connect to port
WdataDmux->p_mq_DQs(p_mq_DQs);
WdataDmux->p_mq_WDATAchn(p_mq_WDATAchn);
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_memorycontroller::~cfm_memorycontroller(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'MemoryController destructor' algorithm generated code

//End of 'MemoryController destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
delete BackEnd;
for (vector<cfm_frontend*>::const_iterator vi = FrontEnd_vec.begin();
			vi!= FrontEnd_vec.end(); vi++) {
		delete (*vi);
	}
delete RAddrDmux;
delete WAddrDmux;
delete WdataDmux;
//deconstructor for vector relation
for (vector<mq_ARADDRin_t*>::const_iterator vi = mq_ARADDRin_vec.begin();
			vi!= mq_ARADDRin_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_AWADDRin_t*>::const_iterator vi = mq_AWADDRin_vec.begin();
			vi!= mq_AWADDRin_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_DataRead_t*>::const_iterator vi = mq_DataRead_vec.begin();
			vi!= mq_DataRead_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_DataWrite_t*>::const_iterator vi = mq_DataWrite_vec.begin();
			vi!= mq_DataWrite_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MemReadRequest_t*>::const_iterator vi = mq_MemReadRequest_vec.begin();
			vi!= mq_MemReadRequest_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MemWriteRequest_t*>::const_iterator vi = mq_MemWriteRequest_vec.begin();
			vi!= mq_MemWriteRequest_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_RDATAchn_t*>::const_iterator vi = mq_RDATAchn_vec.begin();
			vi!= mq_RDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_WriteAck_t*>::const_iterator vi = mq_WriteAck_vec.begin();
			vi!= mq_WriteAck_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_memorycontroller::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_memorycontroller::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>