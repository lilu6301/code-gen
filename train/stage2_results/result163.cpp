
/*
 * \class cfm_memorycontroller
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of memss_ref generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_memorycontroller.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_memsub
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_memorycontroller
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_memorycontroller::cfm_memorycontroller(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_memorycontroller_dp_if()
, p_mq_DQs("p_mq_DQs")
, p_mq_RDATAchn("p_mq_RDATAchn")
, p_mq_ARADDRchn("p_mq_ARADDRchn")
, p_mq_BRESPchn("p_mq_BRESPchn")
, p_mq_WDATAchn("p_mq_WDATAchn")
, p_mq_AWADDRchn("p_mq_AWADDRchn")
, p_mq_DDRCommand("p_mq_DDRCommand")
, mq_MemReadRequest("MemReadRequest"
)
, mq_MemWriteRequest("MemWriteRequest"
)

{
	cf_function_container::init();
	BackEnd = new cfm_backend
	("BackEnd");
	FrontEnd = new cfm_frontend
	("FrontEnd");
	RAddrDmux = new cfm_raddrdmux
	("RAddrDmux");
	WAddrDmux = new cfm_waddrdmux
	("WAddrDmux");

	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++)
	{
		mq_ARADDRin_t* module=new mq_ARADDRin_t(cf_string("ARADDRin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_ARADDRin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++)
	{
		mq_DataRead_t* module=new mq_DataRead_t(cf_string("DataRead[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DataRead_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++)
	{
		mq_WDATAin_t* module=new mq_WDATAin_t(cf_string("WDATAin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_WDATAin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++)
	{
		mq_WriteAck_t* module=new mq_WriteAck_t(cf_string("WriteAck[%d]", i).c_str());
		CF_ASSERT( module )
		mq_WriteAck_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_WDATAin_vec.size(); j++)
		{
			cfm_backend
			::p_mq_WDATAin_t* port= BackEnd
			->p_mq_WDATAin_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_WDATAin_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_ARADDRin_vec.size(); j++)
		{
			cfm_backend
			::p_mq_ARADDRin_t* port= BackEnd
			->p_mq_ARADDRin_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_ARADDRin_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_DataRead_vec.size(); j++)
		{
			cfm_backend
			::p_mq_DataRead_t* port= BackEnd
			->p_mq_DataRead_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_DataRead_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_WriteAck_vec.size(); j++)
		{
			cfm_backend
			::p_mq_WriteAck_t* port= BackEnd
			->p_mq_WriteAck_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_WriteAck_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_MemReadRequest_vec.size(); j++)
		{
			cfm_backend
			::p_mq_MemReadRequest_t* port= BackEnd
			->p_mq_MemReadRequest_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MemReadRequest
						.p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_MemWriteRequest_vec.size(); j++)
		{
			cfm_backend
			::p_mq_MemWriteRequest_t* port= BackEnd
			->p_mq_MemWriteRequest_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MemWriteRequest
						.p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)BackEnd
				->p_mq_DataSize_vec.size(); j++)
		{
			cfm_backend
			::p_mq_DataSize_t* port= BackEnd
			->p_mq_DataSize_vec[j]
			;
			if(port != nullptr) {
				port->bind((cf_data_size) 64);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_ARADDRin_t* port= FrontEnd
		->p_mq_ARADDRin_vec[i]
		;
		if(port != nullptr) {
			port->bind(mq_ARADDRin_vec[i]
					->p_target_socket
			);
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_DataRead_t* port= FrontEnd
		->p_mq_DataRead_vec[i]
		;
		if(port != nullptr) {
			port->bind(mq_DataRead_vec[i]
					->p_target_socket
			);
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_WriteAck_t* port= FrontEnd
		->p_mq_WriteAck_vec[i]
		;
		if(port != nullptr) {
			port->bind(mq_WriteAck_vec[i]
					->p_target_socket
			);
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_WDATAin_t* port= FrontEnd
		->p_mq_WDATAin_vec[i]
		;
		if(port != nullptr) {
			port->bind(mq_WDATAin_vec[i]
					->p_target_socket
			);
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_MemReadRequest_t* port= FrontEnd
		->p_mq_MemReadRequest_vec[i]
		;
		if(port != nullptr) {
			port->bind(mq_MemReadRequest
					.p_target_socket
			);
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_MemWriteRequest_t* port= FrontEnd
		->p_mq_MemWriteRequest_vec[i]
		;
		if(port != nullptr) {
			port->bind(mq_MemWriteRequest
					.p_target_socket
			);
		}
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		cfm_frontend
		::p_mq_DataSize_t* port= FrontEnd
		->p_mq_DataSize_vec[i]
		;
		if(port != nullptr) {
			port->bind((cf_data_size) 32);
		}
	}

	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		RAddrDmux->p_mq_WDATAin
		(mq_WDATAin_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		RAddrDmux->p_mq_MemReadRequest
		(mq_MemReadRequest
				.p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		RAddrDmux->p_mq_MemWriteRequest
		(mq_MemWriteRequest
				.p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		RAddrDmux->p_mq_DataSize
		((cf_data_size) 64
		);
	}

	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_ARADDRin
		(mq_ARADDRin_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_DataRead
		(mq_DataRead_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_WriteAck
		(mq_WriteAck_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_WDATAin
		(mq_WDATAin_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_MemReadRequest
		(mq_MemReadRequest
				.p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_MemWriteRequest
		(mq_MemWriteRequest
				.p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		WAddrDmux->p_mq_DataSize
		((cf_data_size) 32
		);
	}



	cf_function_container::elab_end();
}

cfm_memorycontroller::~cfm_memorycontroller(void) {

	for (vector<cfm_dataread_t*>::const_iterator vi = mq_DataRead_vec.begin(); vi != mq_DataRead_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_wdatain_t*>::const_iterator vi = mq_WDATAin_vec.begin(); vi != mq_WDATAin_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_writeack_t*>::const_iterator vi = mq_WriteAck_vec.begin(); vi != mq_WriteAck_vec.end(); vi++) {
		delete (*vi);
	}
	delete BackEnd;	///ddd
	delete FrontEnd;	///ddd
	delete RAddrDmux;	///ddd
	delete WAddrDmux;	///ddd
}

void cfm_memorycontroller::cb_before_elaboration(void) {

}

void cfm_memorycontroller::cb_end_of_elaboration(void) {

}

void cfm_memorycontroller::cb_end_of_simulation(void) {

}

void cfm_memorycontroller::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		(*mq_ARADDRin_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_ARADDRin_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_ARADDRin_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_ARADDRin_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_ARADDRin_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_ARADDRin_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		(*mq_DataRead_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DataRead_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DataRead_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DataRead_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DataRead_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DataRead_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		(*mq_WriteAck_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_WriteAck_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_WriteAck_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_WriteAck_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_WriteAck_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_WriteAck_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	mq_MemReadRequest.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_MemReadRequest.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_MemReadRequest.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_MemReadRequest.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MemReadRequest.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MemReadRequest.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MemWriteRequest.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_MemWriteRequest.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_MemWriteRequest.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_MemWriteRequest.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MemWriteRequest.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MemWriteRequest.cfa_receive_threshold.init((cf_nonzero_count) 1);
	for (cf_count i = 0; i < (cf_count)(P_Nb + 1); i++) {
		(*mq_DataSize_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DataSize_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DataSize_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DataSize_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DataSize_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DataSize_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_memorycontroller::cb_init_local_vars(void) {


}


