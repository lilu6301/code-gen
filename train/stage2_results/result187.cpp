
/*
 * \class cfm_writedriver
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_writedriver.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_writedriver
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_writedriver::cfm_writedriver(sc_core::sc_module_name name)
cf_function(name)
, cfm_writedriver_dp_if()
, p_mq_MemWriteRequest("p_mq_MemWriteRequest")
, p_mq_WDATAin("p_mq_WDATAin")
, p_mq_AWADDRin("p_mq_AWADDRin")

{
	cf_function::init();



	cf_function::elab_end();
}

cfm_writedriver::~cfm_writedriver(void) {

}

void cfm_writedriver::cb_before_elaboration(void) {

}

void cfm_writedriver::cb_end_of_elaboration(void) {

}

void cfm_writedriver::cb_end_of_simulation(void) {

}

void cfm_writedriver::cb_init_attributes() {

	cfa_scope.init(CF_FCT_SYSTEM);

	return;
}

void cfm_writedriver::cb_init_local_vars(void) {

	isRequest = false;
	isAck = false;
	BlockSize = 4096;  //amount of data received then an interurpt is required.
	CurrentReceivedSize = 0;

	message_time_stamp = cf_dt::cf_time(0, CF_NS);
	message_size = cf_dt::cf_data_size(0, CF_BYTE);

	bus_width = DP_DDR_BUS_WIDTH.get_value().to_scalar(CF_BYTE);
	bus_efficiency = DP_DDR_EFFICIENCY.get_value();
	frequency_map_GL[MEMORY] = DP_DDR_INIT_FREQ.get_value().to_scalar(CF_HZ);
	evict = false;
}


