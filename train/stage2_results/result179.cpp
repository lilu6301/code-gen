
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_frontend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_frontend.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_frontend
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'FrontEnd definitions' algorithm generated code

// End of 'FrontEnd definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_frontend ::cfm_frontend()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), cfm_frontend_dp_if(),
      p_mq_ARADDRin("p_mq_ARADDRin"), p_mq_AWADDRin("p_mq_AWADDRin"),
      p_mq_BRESPchn("p_mq_BRESPchn"), p_mq_DataRead("p_mq_DataRead"),
      p_mq_MemReadRequest("p_mq_MemReadRequest"),
      p_mq_MemWriteRequest("p_mq_MemWriteRequest"),
      p_mq_RDATAchn("p_mq_RDATAchn"), p_mq_WDATAin("p_mq_WDATAin"),
      p_mq_WriteAck("p_mq_WriteAck") {
  cf_function_container::init();
  // instantiation of models
  ReadDataDriver = new cfm_readdata driver("ReadDataDriver");
  ReadDriver = new cfm_readdriver("ReadDriver");
  SendWAckDriver = new cfm_sendwackdriver("SendWAckDriver");
  WriteDriver = new cfm_writewrite("WriteDriver");
  // connections
  // model connect to port
  ReadDataDriver->p_mq_DataRead(p_mq_DataRead);
  ReadDataDriver->p_mq_RDATAchn(p_mq_RDATAchn);
  // model connect to port
  ReadDriver->p_mq_ARADDRin(p_mq_ARADDRin);
  ReadDriver->p_mq_MemReadRequest(p_mq_MemReadRequest);
  // model connect to port
  SendWAckDriver->p_mq_BRESPchn(p_mq_BRESPchn);
  SendWAckDriver->p_mq_WriteAck(p_mq_WriteAck);
  // model connect to port
  WriteDriver->p_mq_AWADDRin(p_mq_AWADDRin);
  WriteDriver->p_mq_MemWriteRequest(p_mq_MemWriteRequest);
  WriteDriver->p_mq_WDATAin(p_mq_WDATAin);
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_frontend::~cfm_frontend(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FrontEnd destructor' algorithm generated code

  // End of 'FrontEnd destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete ReadDataDriver;
  delete ReadDriver;
  delete SendWAckDriver;
  delete WriteDriver;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_frontend::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FrontEnd pre elaboration' algorithm generated code

  // End of 'FrontEnd pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_frontend::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FrontEnd post elaboration' algorithm generated code

  // End of 'FrontEnd post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_frontend::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FrontEnd post simulation' algorithm generated code

  // End of 'FrontEnd post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_frontend::cb_init_attributes() {

  // initialize function attributes

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_frontend::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FrontEnd initializations' algorithm generated code

  // End of 'FrontEnd initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>