
/*
 * \class cfm_frontend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of memss_ref generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_frontend.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_memsub
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_frontend
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_frontend::cfm_frontend(sc_core::sc_module_name name)
cf_function_container(name)
, p_mq_DataRead("p_mq_DataRead")
, p_mq_WriteAck("p_mq_WriteAck")
, p_mq_RDATAchn("p_mq_RDATAchn")
, p_mq_BRESPchn("p_mq_BRESPchn")
, p_mq_MemReadRequest("p_mq_MemReadRequest")
, p_mq_MemWriteRequest("p_mq_MemWriteRequest")
, p_mq_ARADDRin("p_mq_ARADDRin")
, p_mq_WDATAin("p_mq_WDATAin")
, p_mq_AWADDRin("p_mq_AWADDRin")

{
	cf_function_container::init();
	ReadDataDriver = new cfm_readdata driver
	("ReadDataDriver");
	ReadDriver = new cfm_readdriver
	("ReadDriver");
	SendWAckDriver = new cfm_sendwackdriver
	("SendWAckDriver");
	WriteDriver = new cfm_write driver
	("WriteDriver");

	ReadDataDriver->p_mq_RDATAchn
	(p_mq_RDATAchn
	);
	ReadDataDriver->p_mq_MemReadRequest
	(p_mq_MemReadRequest
	);

	ReadDriver->p_mq_BRESPchn
	(p_mq_BRESPchn
	);
	ReadDriver->p_mq_MemReadRequest
	(p_mq_MemReadRequest
	);

	SendWAckDriver->p_mq_RDATAchn
	(p_mq_RDATAchn
	);
	SendWAckDriver->p_mq_BRESPchn
	(p_mq_BRESPchn
	);

	WriteDriver->p_mq_WriteAck
	(p_mq_WriteAck
	);
	WriteDriver->p_mq_MemWriteRequest
	(p_mq_MemWriteRequest
	);



	cf_function_container::elab_end();
}

cfm_frontend::~cfm_frontend(void) {

	delete ReadDataDriver;	///ddd
	delete ReadDriver;	///ddd
	delete SendWAckDriver;	///ddd
	delete WriteDriver;	///ddd
}

void cfm_frontend::cb_before_elaboration(void) {

}

void cfm_frontend::cb_end_of_elaboration(void) {

}

void cfm_frontend::cb_end_of_simulation(void) {

}

void cfm_frontend::cb_init_attributes() {


	return;
}

void cfm_frontend::cb_init_local_vars(void) {


}


