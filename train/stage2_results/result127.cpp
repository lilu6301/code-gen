
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_tlm2lt
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of TLM2LT generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_tlm2lt.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'TLM2LT definitions' algorithm generated code

//End of 'TLM2LT definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_tlm2lt::cfm_tlm2lt(sc_core::sc_module_name name) :
		cf_application(name), mq_InitiatorReader("InitiatorReader"), mq_InitiatorWriter(
				"InitiatorWriter"), mq_ReferenceQueue("ReferenceQueue"), mq_ReferenceQueue2(
				"ReferenceQueue2"), mq_ReferenceQueue3("ReferenceQueue3"), mq_Sync(
				"Sync"), mq_Sync2("Sync2"), mq_Sync3("Sync3"), mq_TargetRequest(
				"TargetRequest"), mq_TargetResponse("TargetResponse") {
	cf_application::init();
	Reader = new cfm_reader("Reader");
	Target = new cfm_target("Target");
	Target_2 = new cfm_target_2("Target_2");
	Writer = new cfm_writer("Writer");

	// connections
	Reader->p_mq_InitiatorReader(mq_InitiatorReader.p_target_socket);
	Reader->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);
	Reader->p_mq_ReaderResponse(mq_ReaderResponse.p_target_socket);
	Reader->p_ev_Sync(mq_Sync.p_target_socket);

	Target->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);
	Target->p_mq_TargetResponse(mq_TargetResponse.p_target_socket);
	Target->p_ev_Sync(mq_Sync2.p_target_socket);

	Target_2->p_mq_TargetRequest(mq_TargetRequest.p_target_socket);
	Target_2->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);
	Target_2->p_ev_Sync3(mq_Sync3.p_target_socket);

	Writer->p_mq_InitiatorWriter(mq_InitiatorWriter.p_target_socket);
	Writer->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);
	Writer->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);
	Writer->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);
	Writer->p_ev_Sync(mq_Sync.p_target_socket);
	Writer->p_ev_Sync2(mq_Sync2.p_target_socket);
	Writer->p_ev_Sync3(mq_Sync3.p_target_socket);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'TLM2LT constructor' algorithm generated code

	//End of 'TLM2LT constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_tlm2lt::~cfm_tlm2lt(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'TLM2LT destructor' algorithm generated code

	//End of 'TLM2LT destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete Reader;
	delete Target;
	delete Target_2;
	delete Writer;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_tlm2lt::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'TLM2LT pre elaboration' algorithm generated code

	//End of 'TLM2LT pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_tlm2lt::cb_end_of_elaboration(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'TLM2LT post elaboration' algorithm generated code

//End of 'TLM2LT post elaboration' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_tlm2lt::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'TLM2LT post simulation' algorithm generated code

	//End of 'TLM2LT post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_tlm2lt::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	mq_InitiatorReader.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_InitiatorReader.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_InitiatorReader.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_InitiatorReader.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_InitiatorReader.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_InitiatorWriter.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_InitiatorWriter.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_InitiatorWriter.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_InitiatorWriter.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_InitiatorWriter.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_ReferenceQueue.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_ReferenceQueue.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_ReferenceQueue.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_ReferenceQueue.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_ReferenceQueue.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_ReferenceQueue2.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_ReferenceQueue2.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_ReferenceQueue2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_ReferenceQueue2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_ReferenceQueue2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_ReferenceQueue3.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_ReferenceQueue3.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_ReferenceQueue3.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_ReferenceQueue3.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_ReferenceQueue3.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Sync.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	mq_Sync.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	mq_Sync.cfa_semaphore.init(false);
	mq_Sync.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Sync2.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	mq_Sync2.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	mq_Sync2.cfa_semaphore.init(false);
	mq_Sync2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Sync3.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	mq_Sync3.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	mq_Sync3.cfa_semaphore.init(false);
	mq_Sync3.cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_tlm2lt::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'TLM2LT initializations' algorithm generated code

	//End of 'TLM2LT initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>