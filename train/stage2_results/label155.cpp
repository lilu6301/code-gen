//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_target
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_target.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_target
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Target definitions' algorithm generated code

//End of 'Target definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_target::cfm_target(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_target_dp_if()
, p_mq_ARADDRchn("p_mq_ARADDRchn")
, p_mq_WDATAchn("p_mq_WDATAchn")
, p_mq_AWADDRchn("p_mq_AWADDRchn")

{
	cf_function_container::init();
	MemoryController = new cfm_memorycontroller
	("MemoryController");

	// instantiation of Memory_vec
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		cfm_memory* module=new cfm_memory(cf_string("Memory[%d]", i).c_str());
		CF_ASSERT( module )
		Memory_vec.push_back(module);
	}
	// instantiation of mq_DDRCommand_vec
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		mq_DDRCommand_t* module=new mq_DDRCommand_t(cf_string("DDRCommand[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DDRCommand_vec.push_back(module);
	}
	// instantiation of mq_DQs_vec
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		mq_DQs_t* module=new mq_DQs_t(cf_string("DQs[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DQs_vec.push_back(module);
	}
	// instantiation of p_mq_BRESPchn_vec
	for (cf_count i = 0; i < (cf_count)MemoryController->p_mq_BRESPchn_vec.size(); i++)
	{
		p_mq_BRESPchn_t* module=new p_mq_BRESPchn_t(cf_string("p_mq_BRESPchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPchn_vec.push_back(module);
	}
	// instantiation of p_mq_RDATAchn_vec
	for (cf_count i = 0; i < (cf_count)MemoryController->p_mq_RDATAchn_vec.size(); i++)
	{
		p_mq_RDATAchn_t* module=new p_mq_RDATAchn_t(cf_string("p_mq_RDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDATAchn_vec.push_back(module);
	}
	// connections
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		cfm_memory* module
		=Memory_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(M_Nbr + 1); j++) {
				for (cf_count k = 0; k < (cf_count)module
						->p_mq_DQs_vec.size(); k++)
				{
					cfm_memory
					::p_mq_DQs_t* port= module
					->p_mq_DQs_vec[k]
					;
					if(port != nullptr) {
						port->bind(mq_DQs_vec[j]
								->p_target_socket
						);
					}
				}
			}
			for (cf_count j = 0; j < (cf_count)(M_Nbr + 1); j++) {
				module->p_mq_DDRCommand
				(mq_DDRCommand_vec[j]
						->p_target_socket
				);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		MemoryController->p_mq_DQs
		(mq_DQs_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)MemoryController
			->p_mq_RDATAchn_vec.size(); i++)
	{
		cfm_memorycontroller
		::p_mq_RDATAchn_t* port= MemoryController
		->p_mq_RDATAchn_vec[i]
		;
		if(port != nullptr) {
			port->bind((*p_mq_RDATAchn_vec[
							i
							]
					)
			);
		}
	}
	MemoryController->p_mq_ARADDRchn
	(p_mq_ARADDRchn
	);
	for (cf_count i = 0; i < (cf_count)MemoryController
			->p_mq_BRESPchn_vec.size(); i++)
	{
		cfm_memorycontroller
		::p_mq_BRESPchn_t* port= MemoryController
		->p_mq_BRESPchn_vec[i]
		;
		if(port != nullptr) {
			port->bind((*p_mq_BRESPchn_vec[
							i
							]
					)
			);
		}
	}
	MemoryController->p_mq_WDATAchn
	(p_mq_WDATAchn
	);
	MemoryController->p_mq_AWADDRchn
	(p_mq_AWADDRchn
	);
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		MemoryController->p_mq_DDRCommand
		(mq_DDRCommand_vec[i]
				->p_target_socket
		);
	}

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Target constructor' algorithm generated code

	//End of 'Target constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		CF_COMM_CB_MQ_RECEIVE((*mq_DQs_vec[i]
				)
				, cfm_target::mq_DQs_cb_receive_time
		);
	}

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_target::~cfm_target(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Target destructor' algorithm generated code

	//End of 'Target destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	for (vector<cfm_memory*>::const_iterator vi = Memory_vec.begin(); vi != Memory_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DDRCommand_t*>::const_iterator vi = mq_DDRCommand_vec.begin(); vi != mq_DDRCommand_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DQs_t*>::const_iterator vi = mq_DQs_vec.begin(); vi != mq_DQs_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_BRESPchn_t*>::const_iterator vi = p_mq_BRESPchn_vec.begin(); vi != p_mq_BRESPchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_RDATAchn_t*>::const_iterator vi = p_mq_RDATAchn_vec.begin(); vi != p_mq_RDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	delete MemoryController;	///ddd
}
//@}

/// \name pre-elaboration section
//@{
void cfm_target::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Target pre elaboration' algorithm generated code

	//End of 'Target pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_target::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Target post elaboration' algorithm generated code

	//End of 'Target post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_target::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Target post simulation' algorithm generated code

	//End of 'Target post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_target::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		(*mq_DDRCommand_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_CYCLE));
		(*mq_DDRCommand_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_CYCLE));
		(*mq_DDRCommand_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DDRCommand_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		(*mq_DQs_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_CYCLE));
		(*mq_DQs_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_DQs_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
	}

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_target::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Target initializations' algorithm generated code

	//End of 'Target initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name Overload function for mq_DQs message queue receive time
//@{
cf_duration cfm_target::mq_DQs_cb_receive_time(cf_payload_b* _trans) {
	CF_COMM_DEF_TRANS_REF(cft_defdqs, DQs_trans, _trans);
	//#COFS_MESSAGE_QUEUE_RECEIVE_TIME_BEGIN
	return cf_expr_duration(DQPutTime, CF_CYCLE);
	//#COFS_MESSAGE_QUEUE_RECEIVE_TIME_END
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>