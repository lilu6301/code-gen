//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_customizeddispatcherapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CustomizedDispatcherApp generated by C++
 * Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_customizeddispatcherapp.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'CustomizedDispatcherApp definitions' algorithm generated code

// End of 'CustomizedDispatcherApp definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_customizeddispatcherapp ::cfm_customizeddispatcherapp()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_application(name), mq_MsgQ("MsgQ") {
  cf_application::init();
  // instantiation of models
  for (cf_count i = 0; i < (cf_count)(1 + 1); i++) {
    cfm_consumer *module =
        new cfm_consumer(cf_string("Consumer[%d]", i).c_str());
    CF_ASSERT(module)
    Consumer_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(1 + 1); i++) {
    cfm_producer *module =
        new cfm_producer(cf_string("Producer[%d]", i).c_str());
    CF_ASSERT(module)
    Producer_vec.push_back(module);
  }
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(1 + 1); i++) {
    mq_MsgQ_t *module = new mq_MsgQ_t(cf_string("MsgQ[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQ_vec.push_back(module);
  }
  // connections
  for (cf_count i = 0; i < (cf_count)(1 + 1); i++) {
    cfm_consumer *module = Consumer_vec[i];
    if (module != nullptr) {
      // model connect to relation
      for (cf_count j = 0; j < (cf_count)(1 + 1); j++) {
        module->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);
      }
    }
  }
  for (cf_count i = 0; i < (cf_count)(1 + 1); i++) {
    cfm_producer *module = Producer_vec[i];
    if (module != nullptr) {
      // model connect to relation
      for (cf_count j = 0; j < (cf_count)(1 + 1); j++) {
        module->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);
      }
    }
  }
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_customizeddispatcherapp::~cfm_customizeddispatcherapp(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CustomizedDispatcherApp destructor' algorithm generated code

  // End of 'CustomizedDispatcherApp destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  for (vector<cfm_consumer *>::const_iterator vi = Consumer_vec.begin();
       vi != Consumer_vec.end(); vi++) {
    delete (*vi);
  }
  for (vector<cfm_producer *>::const_iterator vi = Producer_vec.begin();
       vi != Producer_vec.end(); vi++) {
    delete (*vi);
  }
  // deconstructor for vector relation
  for (vector<mq_MsgQ_t *>::const_iterator vi = mq_MsgQ_vec.begin();
       vi != mq_MsgQ_vec.end(); vi++) {
    delete (*vi);
  }
}

//@{
void cfm_customizeddispatcherapp::cb_init_attributes() {

  // initialize function attributes

  return;
}
//@}

//@{
void cfm_customizeddispatcherapp::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Router25 initializations' algorithm generated code

  // End of 'Router25 initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>