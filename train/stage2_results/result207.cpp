
/*
 * \class cfm_os
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of mtl_s_mdl generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_os.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_dies
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_os
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_os::cfm_os(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_os_dp_if()
, mq_finished_taskQ("finished_taskQ"
)
, mq_root_task_ready("root_task_ready"
)
, sv_sem_scheduler_access("sem_scheduler_access"
)

{
	cf_function_container::init();
	main_scheduler = new cfm_main_scheduler
	("main_scheduler");
	sched_itf = new cfm_sched_itf
	("sched_itf");
	software_timer = new cfm_software_timer
	("software_timer");
	task_offset_manager = new cfm_task_offset_manager
	("task_offset_manager");

	main_scheduler->p_mq_root_task_ready
	(mq_root_task_ready
			.p_target_socket
	);
	main_scheduler->p_mq_finished_taskQ
	(mq_finished_taskQ
			.p_target_socket
	);

	sched_itf->p_sv_sem_scheduler_access
	(sv_sem_scheduler_access
			.p_target_socket
	);
	sched_itf->p_mq_finished_taskQ
	(mq_finished_taskQ
			.p_target_socket
	);

	task_offset_manager->p_mq_root_task_ready
	(mq_root_task_ready
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_os::~cfm_os(void) {

	delete main_scheduler; ///ddd
	delete sched_itf; ///ddd
	delete software_timer; ///ddd
	delete task_offset_manager; ///ddd
}

void cfm_os::cb_before_elaboration(void) {

}

void cfm_os::cb_end_of_elaboration(void) {

}

void cfm_os::cb_end_of_simulation(void) {

}

void cfm_os::cb_init_attributes() {

	mq_finished_taskQ.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_finished_taskQ.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_finished_taskQ.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_finished_taskQ.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_finished_taskQ.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_finished_taskQ.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_root_task_ready.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_root_task_ready.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_root_task_ready.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_root_task_ready.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_root_task_ready.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_root_task_ready.cfa_receive_threshold.init((cf_nonzero_count) 1);
	sv_sem_scheduler_access.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	sv_sem_scheduler_access.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	sv_sem_scheduler_access.cfa_semaphore.init(true);
	sv_sem_scheduler_access.cfa_sem_counter.init((cf_nonzero_count) 1);

	return;
}

void cfm_os::cb_init_local_vars(void) {


}


