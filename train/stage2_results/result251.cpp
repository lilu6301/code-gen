
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_producer
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ApplicationModel generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_producer.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_applicationmodel
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_producer
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'Producer definitions' algorithm generated code

// End of 'Producer definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_producer ::cfm_producer()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), ev_Req("Req"), p_mq_Ack("p_mq_Ack"),
      p_mq_Msg("p_mq_Msg"), sv_DataVar("DataVar"), sv_TestProd("TestProd") {
  cf_function_container::init();
  // instantiation of models
  Generator = new cfm_generator("Generator");
  Sender = new cfm_sender("Sender");
  // connections
  // model connect to relation
  Generator->p_sv_DataVar(sv_DataVar.p_target_socket);
  Generator->p_ev_Req(ev_Req.p_target_socket);
  Generator->p_sv_TestProd(sv_TestProd.p_target_socket);
  // model connect to relation
  Sender->p_sv_DataVar(sv_DataVar.p_target_socket);
  Sender->p_ev_Req(ev_Req.p_target_socket);
  // model connect to port
  Sender->p_mq_Ack(p_mq_Ack);
  Sender->p_mq_Msg(p_mq_Msg);
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_producer::~cfm_producer(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Producer destructor' algorithm generated code

  // End of 'Producer destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete Generator;
  delete Sender;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_producer::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Producer pre elaboration' algorithm generated code

  // End of 'Producer pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_producer::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Producer post elaboration' algorithm generated code

  // End of 'Producer post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_producer::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Producer post simulation' algorithm generated code

  // End of 'Producer post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_producer::cb_init_attributes() {

  // initialize function attributes
  // initialize relations attributes
  sv_DataVar.cfa_write_time.init(cf_expr_duration(1, CF_NS));
  sv_DataVar.cfa_read_time.init(cf_expr_duration(1, CF_NS));
  sv_DataVar.cfa_semaphore.init(false);
  sv_DataVar.cfa_concurrency.init((cf_nonzero_count)1);
  ev_Req.cfa_set_time.init(cf_expr_duration(1, CF_NS));
  ev_Req.cfa_get_time.init(cf_expr_duration(1, CF_NS));
  ev_Req.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
  sv_TestProd.cfa_write_time.init(cf_expr_duration(1, CF_NS));
  sv_TestProd.cfa_read_time.init(cf_expr_duration(1, CF_NS));
  sv_TestProd.cfa_semaphore.init(false);
  sv_TestProd.cfa_concurrency.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_producer::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Producer initializations' algorithm generated code

  // End of 'Producer initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>