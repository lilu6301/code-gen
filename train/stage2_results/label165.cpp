//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_memory
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_memory.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_target
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_memory
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Memory definitions' algorithm generated code

//End of 'Memory definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_memory::cfm_memory(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_memory_dp_if(), p_mq_DDRCommand(
				"p_mq_DDRCommand") {
	cf_function_container::init();
	BankDmuxer = new cfm_bankdmuxer("BankDmuxer");

	// instantiation of MemoryCommandExecution_vec
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		cfm_memorycommandexecution* module = new cfm_memorycommandexecution(
				cf_string("MemoryCommandExecution[%d]", i).c_str());
		CF_ASSERT (module)
		MemoryCommandExecution_vec.push_back(module);
	}
	// instantiation of mq_DDRAction_vec
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		mq_DDRAction_t* module = new mq_DDRAction_t(
				cf_string("DDRAction[%d]", i).c_str());
		CF_ASSERT (module)
		mq_DDRAction_vec.push_back(module);
	}
	// instantiation of p_mq_DQs_vec
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		p_mq_DQs_t* module = new p_mq_DQs_t(
				cf_string("p_mq_DQs[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_DQs_vec.push_back(module);
	}
	// connections
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		BankDmuxer->p_mq_DDRAction(mq_DDRAction_vec[i]->p_target_socket);
	}
	BankDmuxer->p_mq_DDRCommand(p_mq_DDRCommand);

	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		cfm_memorycommandexecution* module = MemoryCommandExecution_vec[i];
		if (module != nullptr) {
			module->p_mq_DQs((*p_mq_DQs_vec[i]));
			for (cf_count j = 0; j < (cf_count)(NbBanksperMemory + 1); j++) {
				module->p_mq_DDRAction(mq_DDRAction_vec[j]->p_target_socket);
			}
		}
	}

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Memory constructor' algorithm generated code

	//End of 'Memory constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_memory::~cfm_memory(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Memory destructor' algorithm generated code

	//End of 'Memory destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	for (vector<cfm_memorycommandexecution*>::const_iterator vi =
			MemoryCommandExecution_vec.begin();
			vi != MemoryCommandExecution_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DDRAction_t*>::const_iterator vi = mq_DDRAction_vec.begin();
			vi != mq_DDRAction_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_DQs_t*>::const_iterator vi = p_mq_DQs_vec.begin();
			vi != p_mq_DQs_vec.end(); vi++) {
		delete (*vi);
	}
	delete BankDmuxer;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_memory::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Memory pre elaboration' algorithm generated code

	//End of 'Memory pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_memory::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Memory post elaboration' algorithm generated code

	//End of 'Memory post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_memory::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Memory post simulation' algorithm generated code

	//End of 'Memory post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_memory::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		(*mq_DDRAction_vec[i]).cfa_send_time.init(cf_expr_duration(10, CF_NS));
		(*mq_DDRAction_vec[i]).cfa_receive_time.init(
				cf_expr_duration(0, CF_CYCLE));
		(*mq_DDRAction_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_DDRAction_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_DDRAction_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
	}

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_memory::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Memory initializations' algorithm generated code

	//End of 'Memory initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>