!@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_serverroom
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_serverroom.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ServerRoom definitions' algorithm generated code

//End of 'ServerRoom definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_serverroom ::cfm_serverroom() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch"),p_mq_MsgQToRack("p_mq_MsgQToRack"),p_mq_MsgQToServerRoom("p_mq_MsgQToServerRoom"){
cf_function_container::init();
//instantiation of models
AGGSwitch = new cfm_aggswitch("AGGSwitch");
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		cfm_rack* module = new cfm_rack(
				cf_string("Rack[%d]", i).c_str());
		CF_ASSERT (module)
		Rack_vec.push_back(module);
	}
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		MessageQueue<cft_DefPacket> mq_MsgQToAggSwitch_t;
		CF_ASSERT (mq_MsgQToAggSwitch_t)
		mq_MsgQToAggSwitch_vec.push_back(mq_MsgQToAggSwitch_t);
	}
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		MessageQueue<cft_DefPacket> mq_MsgQToRack_t;
		CF_ASSERT (mq_MsgQToRack_t)
		mq_MsgQToRack_vec.push_back(mq_MsgQToRack_t);
	}
//connections
//model connect to port
AGGSwitch->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);
AGGSwitch->p_mq_MsgQToRack(p_mq_MsgQToRack);
AGGSwitch->p_mq_MsgQToServerRoom(p_mq_MsgQToServerRoom);
for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
		cfm_rack* module = Rack_vec[i];
		if (module!= nullptr) {
//model connect to port
for (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {
				module->p_mq_MsgQToAggSwitch(mq_MsgQToAggSwitch_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {
				module->p_mq_MsgQToRack(mq_MsgQToRack_vec[j]->p_target_socket);
			}
}
}
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_serverroom::~cfm_serverroom(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ServerRoom destructor' algorithm generated code

//End of 'ServerRoom destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
delete AGGSwitch;
for (vector<cfm_rack*>::const_iterator vi = Rack_vec.begin();
			vi!= Rack_vec.end(); vi++) {
		delete (*vi);
	}
//deconstructor for vector relation
for (vector<mq_MsgQToAggSwitch_t*>::const_iterator vi = mq_MsgQToAggSwitch_vec.begin();
			vi!= mq_MsgQToAggSwitch_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MsgQToRack_t*>::const_iterator vi = mq_MsgQToRack_vec.begin();
			vi!= mq_MsgQToRack_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_serverroom::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_serverroom::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>