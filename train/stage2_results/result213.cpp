
/*
 * \class cfm_serverroom
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_serverroom.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_datacenter
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_serverroom
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_serverroom::cfm_serverroom(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_serverroom_dp_if()

{
	cf_function_container::init();
	AGGSwitch = new cfm_aggswitch
	("AGGSwitch");

	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		cfm_rack* module=new cfm_rack(cf_string("Rack[%d]", i).c_str());
		CF_ASSERT( module )
		Rack_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		mq_MsgQToAggSwitch_t* module=new mq_MsgQToAggSwitch_t(cf_string("MsgQToAggSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQToAggSwitch_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++)
	{
		mq_MsgQToRack_t* module=new mq_MsgQToRack_t(cf_string("MsgQToRack[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQToRack_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb+1); i++)
	{
		p_mq_MsgQToDataCenterSwitch_t* module=new p_mq_MsgQToDataCenterSwitch_t(cf_string("p_mq_MsgQToDataCenterSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToDataCenterSwitch_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb+1); i++)
	{
		p_mq_MsgQToServerRoom_t* module=new p_mq_MsgQToServerRoom_t(cf_string("p_mq_MsgQToServerRoom[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToServerRoom_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		cfm_rack* module
		=Rack_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
				module->p_mq_MsgQToRack
				(mq_MsgQToRack_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
				module->p_mq_MsgQToAggSwitch
				(mq_MsgQToAggSwitch_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MsgQToDataCenterSwitch
			((*p_mq_MsgQToDataCenterSwitch_vec[
							i
							]
					)
			);
			module->p_mq_MsgQToServerRoom
			((*p_mq_MsgQToServerRoom_vec[
							i
							]
					)
			);
		}
	}

	AGGSwitch->p_mq_MsgQToServerRoom
	((*p_mq_MsgQToServerRoom_vec[
							0
							]
			)
	);
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)AGGSwitch
				->p_mq_MsgQToAggSwitch_vec.size(); j++)
		{
			cfm_aggswitch
			::p_mq_MsgQToAggSwitch_t* port= AGGSwitch
			->p_mq_MsgQToAggSwitch_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MsgQToAggSwitch_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)AGGSwitch
				->p_mq_MsgQToRack_vec.size(); j++)
		{
			cfm_aggswitch
			::p_mq_MsgQToRack_t* port= AGGSwitch
			->p_mq_MsgQToRack_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MsgQToRack_vec[i]
						->p_target_socket
				);
			}
		}
	}
	AGGSwitch->p_mq_MsgQToDataCenterSwitch
	((*p_mq_MsgQToDataCenterSwitch_vec[
							0
							]
			)
	);



	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		CF_COMM_CB_MQ_SEND((*mq_MsgQToAggSwitch_vec[i]
				)
				, cfm_serverroom::mq_MsgQToAggSwitch_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*mq_MsgQToAggSwitch_vec[i]
				)
				, cfm_serverroom::mq_MsgQToAggSwitch_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		CF_COMM_CB_MQ_SEND((*mq_MsgQToRack_vec[i]
				)
				, cfm_serverroom::mq_MsgQToRack_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*mq_MsgQToRack_vec[i]
				)
				, cfm_serverroom::mq_MsgQToRack_cb_receive_time
		);
	}

	cf_function_container::elab_end();
}

cfm_serverroom::~cfm_serverroom(void) {

	for (vector<cfm_rack*>::const_iterator vi = Rack_vec.begin(); vi != Rack_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQToAggSwitch_t*>::const_iterator vi = mq_MsgQToAggSwitch_vec.begin(); vi != mq_MsgQToAggSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQToRack_t*>::const_iterator vi = mq_MsgQToRack_vec.begin(); vi != mq_MsgQToRack_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToDataCenterSwitch_t*>::const_iterator vi = p_mq_MsgQToDataCenterSwitch_vec.begin(); vi != p_mq_MsgQToDataCenterSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToServerRoom_t*>::const_iterator vi = p_mq_MsgQToServerRoom_vec.begin(); vi != p_mq_MsgQToServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
	delete AGGSwitch;	///ddd
}

void cfm_serverroom::cb_before_elaboration(void) {

}

void cfm_serverroom::cb_end_of_elaboration(void) {

}

void cfm_serverroom::cb_end_of_simulation(void) {

}

void cfm_serverroom::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		(*mq_MsgQToAggSwitch_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQToAggSwitch_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpToAggSwitchPortBufferSize);
		(*mq_MsgQToAggSwitch_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQToAggSwitch_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQToAggSwitch_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
		(*mq_MsgQToRack_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQToRack_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpToRackPortBufferSize);
		(*mq_MsgQToRack_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQToRack_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQToRack_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_serverroom::cb_init_local_vars(void) {


}

cf_duration cfm_serverroom::mq_MsgQToAggSwitch_cb_send_time(cf_payload_b* _trans) {
	CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToAggSwitch_trans, _trans);
	return cf_expr_duration(dpToAggSwitchPortBufferSize.get_value(), CF_US);
}
cf_duration cfm_serverroom::mq_MsgQToAggSwitch_cb_receive_time(cf_payload_b* _trans) {
	CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToAggSwitch_trans, _trans);
	return cf_expr_duration(dpToAggSwitchPortBufferSize.get_value(), CF_US);
}
cf_duration cfm_serverroom::mq_MsgQToRack_cb_send_time(cf_payload_b* _trans) {
	CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToRack_trans, _trans);
	return cf_expr_duration(dpToRackPortBufferSize.get_value(), CF_US);
}
cf_duration cfm_serverroom::mq_MsgQToRack_cb_receive_time(cf_payload_b* _trans) {
	CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToRack_trans, _trans);
	return cf_expr_duration(dpToRackPortBufferSize.get_value(), CF_US);
}


