//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_rack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_rack.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_serverroom
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_rack
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'Rack definitions' algorithm generated code

// End of 'Rack definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_rack : cf_function_container(name),
           cfm_rack_dp_if(),
           p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch"),
           p_mq_MsgQToRack("p_mq_MsgQToRack") {
  cf_function_container::init();
  // instantiation of models
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    cfm_server *module = new cfm_server(cf_string("Server[%d]", i).c_str());
    CF_ASSERT(module)
    Server_vec.push_back(module);
  }
  ToRSwitch = new cfm_torswitch("ToRSwitch");
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    mq_MsgQServerToToRSwitch_t *module = new mq_MsgQServerToToRSwitch_t(
        cf_string("MsgQServerToToRSwitch[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQServerToToRSwitch_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    mq_MsgQToServer_t *module =
        new mq_MsgQToServer_t(cf_string("MsgQToServer[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQToServer_vec.push_back(module);
  }
  // connections
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    cfm_server *module = Server_vec[i];
    if (module != nullptr) {
      for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
        module->p_mq_MsgQServerToToRSwitch(
            mq_MsgQServerToToRSwitch_vec[j]->p_target_socket);
      }
      for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
        module->p_mq_MsgQToServer(mq_MsgQToServer_vec[j]->p_target_socket);
      }
    }
  }
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    ToRSwitch->p_mq_MsgQServerToToRSwitch(
        mq_MsgQServerToToRSwitch_vec[i]->p_target_socket);
  }
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    ToRSwitch->p_mq_MsgQToServer(mq_MsgQToServer_vec[i]->p_target_socket);
  }
ToRSwitch->p_mq_MsgQToAggSwitch((p_mq_MsgQToAggSwitch);
ToRSwitch->p_mq_MsgQToRack((p_mq_MsgQToRack);
	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_rack::~cfm_rack(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Rack destructor' algorithm generated code

  // End of 'Rack destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  for (vector<cfm_server *>::const_iterator vi = Server_vec.begin();
       vi != Server_vec.end(); vi++) {
    delete (*vi);
  }
  delete ToRSwitch;
  // deconstructor for vector relation
  for (vector<mq_MsgQServerToToRSwitch_t *>::const_iterator vi =
           mq_MsgQServerToToRSwitch_vec.begin();
       vi != mq_MsgQServerToToRSwitch_vec.end(); vi++) {
    delete (*vi);
  }
  for (vector<mq_MsgQToServer_t *>::const_iterator vi =
           mq_MsgQToServer_vec.begin();
       vi != mq_MsgQToServer_vec.end(); vi++) {
    delete (*vi);
  }
}
//@}

/// \name pre-elaboration section
//@{
void cfm_rack::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Rack pre elaboration' algorithm generated code

  // End of 'Rack pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_rack::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Rack post elaboration' algorithm generated code

  // End of 'Rack post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_rack::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Rack post simulation' algorithm generated code

  // End of 'Rack post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_rack::cb_init_attributes() {

  // initialize function attributes
  // initialize relations attributes
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    (*mq_MsgQServerToToRSwitch_vec[i])
        .cfa_send_time.init(cf_expr_duration(0, CF_NS));
    (*mq_MsgQServerToToRSwitch_vec[i])
        .cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
    (*mq_MsgQServerToToRSwitch_vec[i])
        .cfa_queue_capacity.init(
            (cf_nonzero_count)dpServerToToRSwitchBufferSize);
    (*mq_MsgQServerToToRSwitch_vec[i])
        .cfa_concurrency.init((cf_nonzero_count)1);
    (*mq_MsgQServerToToRSwitch_vec[i])
        .cfa_send_threshold.init((cf_nonzero_count)1);
    (*mq_MsgQServerToToRSwitch_vec[i])
        .cfa_receive_threshold.init((cf_nonzero_count)1);
  }
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    (*mq_MsgQToServer_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
    (*mq_MsgQToServer_vec[i])
        .cfa_queue_capacity.init(
            (cf_nonzero_count)dpToRSwitchToServerBufferSize);
    (*mq_MsgQToServer_vec[i]).cfa_concurrency.init((cf_nonzero_count)1);
    (*mq_MsgQToServer_vec[i]).cfa_send_threshold.init((cf_nonzero_count)1);
    (*mq_MsgQToServer_vec[i]).cfa_receive_threshold.init((cf_nonzero_count)1);
  }

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_rack::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Rack initializations' algorithm generated code

  // End of 'Rack initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name Overload function for mq_MsgQServerToToRSwitch message queue receive
/// time
//@{
cf_duration
cfm_rack::mq_MsgQServerToToRSwitch_cb_receive_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQServerToToRSwitch_trans, _trans);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_BEGIN
  return cf_expr_duration(dpServerToToRSwitchTime, CF_NS);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_END
}
//@}
/// \name Overload function for mq_MsgQToServer message queue send time
//@{
cf_duration cfm_rack::mq_MsgQToServer_cb_send_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToServer_trans, _trans);
  //#COFS_MESSAGE_QUEUE_SEND_TIME_BEGIN
  return cf_expr_duration(dpToRSwitchToServerTime / 2, CF_NS);
  //#COFS_MESSAGE_QUEUE_SEND_TIME_END
}
//@}
/// \name Overload function for mq_MsgQToServer message queue receive time
//@{
cf_duration cfm_rack::mq_MsgQToServer_cb_receive_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToServer_trans, _trans);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_BEGIN
  return cf_expr_duration(dpToRSwitchToServerTime / 2, CF_NS);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_END
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>