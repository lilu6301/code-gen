//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_videoprotocolstack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++
 * Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_SOFTWAREDEFINEDRADIOAPP_VIDEOPROTOCOLSTACK
#define COFS_MODEL_SOFTWAREDEFINEDRADIOAPP_VIDEOPROTOCOLSTACK

/// Model Header includes start
#include "cfm_ipvideo.h"
#include "cfm_mpetsl.h"
#include "cfm_rtpudp.h"
#include "cfm_softwaredefinedradioapp_global.h"
#include "cfm_softwaredefinedradioapp_global_types.h"
#include "cofluent.h"
#include "dp/cfm_videoprotocolstack_dp_if.h"
// set of dataType, sort alphabetically
#include "dt/cft_defvideo.h"

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'VideoProtocolStack includes' algorithm generated code

// End of 'VideoProtocolStack includes' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
/// Model Header includes end

///    \defgroup dxgVideoProtocolStack Function VideoProtocolStack
//@{
///        \page dxpVideoProtocolStack
//@{
///    \brief VideoProtocolStack function model start
class cfm_videoprotocolstack : public cf_core::cf_function_container,
                               public cfm_videoprotocolstack_dp_if {
public:
  /// cfm_videoprotocolstack type define start
  /// relations typedef
  // set of relation, sort alphabetically. format: cf_type<dataType>
  // relation_name
  typedef cf_core::cf_message_queue<cft_defvideo> mq_IPToRTP_t;
  typedef cf_core::cf_message_queue<cft_defvideo> mq_MPEToIP_t;

  /// ports typedef
  // set of port, sort alphabetically, format: cf_type<dataType> port_name
  typedef cf_core::cf_mq_initiator_socket<cfm_videoprotocolstack, cfm_defvideo>
      p_mq_NetToDVB_t;
  typedef cf_core::cf_mq_initiator_socket<cfm_videoprotocolstack, cfm_defvideo>
      p_mq_RTPToApp_t;
  /// cfm_videoprotocolstack type define end

  /// constructor
  cfm_videoprotocolstack(sc_core::sc_module_name name);

  /// destructor
  virtual ~cfm_videoprotocolstack(void);

public:
  /// \name input/output ports
  //@{
  // set of port, sort alphabetically. format: port_type port_name
  p_mq_NetToDVB_t p_mq_NetToDVB;
  p_mq_RTPToApp_t p_mq_RTPToApp;
  //@}

public:
  /// \name functions
  //@{
  // set of model, sort alphabetically. format: model_type* model_name
  cfm_ipvideo *IPVideo;
  cfm_mpetsl *MPETSL;
  cfm_rtpudp *RTPUDP;
  //@}

protected:
  /// initialize attributes
  void cb_init_attributes(void);
  /// initialize definitions
  void cb_init_local_vars(void);

public:
  /// \name relations
  //@{
  // set of relation, sort alphabetically. format: relation_type relation_name
  mq_IPToRTP_t mq_IPToRTP;
  mq_MPEToIP_t mq_MPEToIP;
  //@}

  /// Model private fields start
  /// Model private fields end

  /// \name user-defined local declarations
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'VideoProtocolStack local declarations' algorithm generated code

  // End of 'VideoProtocolStack local declarations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
};
///    \brief VideoProtocolStack function model end

//@}
//@}
#endif // COFS_MODEL_SOFTWAREDEFINEDRADIOAPP_VIDEOPROTOCOLSTACK

//<#!@READ-ONLY-SECTION-END@!#>