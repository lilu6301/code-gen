
//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_hwmodel
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CompleteDevice generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_COMPLEDEVICES_HWMODEL
#define COFS_MODEL_COMPLEDEVICES_HWMODEL

/// Model Header includes start
#include "cfm_completedevice_global.h"
#include "cfm_completedevice_global_types.h"
#include "cofluent.h"
#include "dp/cfm_hwmodel_dp_if.h"
//set of dataType, sort alphabetically
#include "dt/cft_defframe.h"
#include "dt/cft_defprocessingmode.h"

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'hwModel includes' algorithm generated code
void cfm_hwmodel::revert_frame() {

  /* Reverting the image means that Pixel 0 becomes Pixel N-1, where N is the
   * frame size (in Pixels) In YUV 422 format, it implies to:
   *   - Revert the Y table, located at offset 0
   *   - Revert the U table, located at offset N
   *   - Revert the V table, located at offset N*1.5
   */
  byte *outpayload = outputFrame.payload;
  byte *inpayload = inputFrame.payload;

  //4-Pixel block index in a line
  int pixel_block_idx = 0;

  //Line index
  int line_idx;

  //4-Pixel block offset, from the beginning of the frame
  int current_block_ofs = 0;

  // For each frame line
  for (line_idx = 0; line_idx < NbPixelsPerLineMax; line_idx++) {
    // For each pixel block
    for (pixel_block_idx = 0; pixel_block_idx < NbPixelsPerLineMax / 4;
         pixel_block_idx++) {

      // Revert the Y table
      outpayload[current_block_ofs] =
          inpayload[current_block_ofs + 1]; //swap Y table, located at offset 0
      outpayload[current_block_ofs + 1] =
          inpayload[current_block_ofs + 2]; //swap Y table, located at offset N
      outpayload[current_block_ofs + 1] =
          inpayload[current_block_ofs + 3]; //swap Y table, located at offset N*1.5

      // Revert the U table
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 1] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 2]; //swap U table,
                                                                       located at
                                                                       offset N
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 3] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 4]; //swap U
                                                                       table,
                                                                       located at
                                                                       offset N*1.5

      // Revert the V table
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 4] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 5]; //swap V
                                                                       table,
                                                                       located at
                                                                       offset N*1.5

      current_block_ofs += 4;
    }
  }
}

//<#!@READ-ONLY-SECTION-START@!#>