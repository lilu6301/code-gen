
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_clientside
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_clientside.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_clientside
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ClientSide definitions' algorithm generated code

//End of 'ClientSide definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_clientside::cfm_clientside(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_clientside_dp_if() {
	cf_function_container::init();

	// instantiation of Device_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_device* module = new cfm_device(cf_string("Device[%d]", i).c_str());
		CF_ASSERT (module)
		Device_vec.push_back(module);
	}
	// instantiation of RDDmux_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_rddmux* module = new cfm_rdownx(cf_string("RDDmux[%d]", i).c_str());
		CF_ASSERT (module)
		RDDmux_vec.push_back(module);
	}
	// instantiation of WRDMux_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_wrdmux* module = new cfm_wrdmux(cf_string("WRDmux[%d]", i).c_str());
		CF_ASSERT (module)
		WRDmux_vec.push_back(module);
	}
	// instantiation of mq_BRESPin_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		mq_BRESPin_t* module = new mq_BRESPin_t(
				cf_string("BRESPin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_BRESPin_vec.push_back(module);
	}
	// instantiation of mq_RDATAin_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		mq_RDATAin_t* module = new mq_RDATAin_t(
				cf_string("RDATAin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_RDATAin_vec.push_back(module);
	}
	// instantiation of p_mq_ARADDRchn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_ARADDRchn_t* module = new p_mq_ARADDRchn_t(
				cf_string("p_mq_ARADDRchn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_ARADDRchn_vec.push_back(module);
	}
	// instantiation of p_mq_BRESPchn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_BRESPchn_t* module = new p_mq_BRESPchn_t(
				cf_string("p_mq_BRESPchn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_BRESPchn_vec.push_back(module);
	}
	// instantiation of p_mq_CMT0chn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_CMT0chn_t* module = new p_mq_CMT0chn_t(
				cf_string("p_mq_CMT0chn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_CMT0chn_vec.push_back(module);
	}
	// instantiation of p_mq_CMT1chn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_CMT1chn_t* module = new p_mq_CMT1chn_t(
				cf_string("p_mq_CMT1chn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_CMT1chn_vec.push_back(module);
	}
	// instantiation of p_mq_Device_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_Device_t* module = new p_mq_Device_t(
				cf_string("p_mq_Device[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_Device_vec.push_back(module);
	}
	// instantiation of p_mq_RDownx_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_RDownx_t* module = new p_mq_RDownx_t(
				cf_string("p_mq_RDownx[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_RDownx_vec.push_back(module);
	}
	// instantiation of p_mq_Rng2Sbo_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_Rng2Sbo_t* module = new p_mq_Rng2Sbo_t(
				cf_string("p_mq_Rng2Sbo[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_Rng2Sbo_vec.push_back(module);
	}
	// instantiation of p_mq_WDATAchn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_WDATAchn_t* module = new p_mq_WDATAchn_t(
				cf_string("p_mq_WDATAchn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_WDATAchn_vec.push_back(module);
	}
	// instantiation of p_mq_WMT0chn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_WMT0chn_t* module = new p_mq_WMT0chn_t(
				cf_string("p_mq_WMT0chn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_WMT0chn_vec.push_back(module);
	}
	// instantiation of p_mq_WMT1chn_vec
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		p_mq_WMT1chn_t* module = new p_mq_WMT1chn_t(
				cf_string("p_mq_WMT1chn[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_WMT1chn_vec.push_back(module);
	}
	// connections
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_device* module = Device_vec[i];
		if (module != nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_RDATAin_vec.push_back(mq_RDATAin_vec[j]);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_BRESPin_vec.push_back(mq_BRESPin_vec[j]);
			}
			module->p_mq_ARADDRchn((*p_mq_ARADDRchn_vec[i]));
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_Rng2Sbo_vec.push_back(mq_Rng2Sbo_vec[j]);
			}
			module->p_mq_WDATAchn((*p_mq_WDATAchn_vec[i]));
			module->p_mq_AWADDRchn((*p_mq_AWADDRchn_vec[i]));
		}
	}

	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_rdownx* module = RDDmux_vec[i];
		if (module != nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_RDATAin_vec.push_back(mq_RDATAin_vec[j]);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_BRESPin_vec.push_back(mq_BRESPin_vec[j]);
			}
			module->p_mq_RDownx((*p_mq_RDownx_vec[i]));
		}
	}

	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_wrdmux* module = WRDMux_vec[i];
		if (module != nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_BRESPin_vec.push_back(mq_BRESPin_vec[j]);
			}
			module->p_mq_BRESPchn((*p_mq_BRESPchn_vec[i]));
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_Rng2Sbo_vec.push_back(mq_Rng2Sbo_vec[j]);
			}
			module->p_mq_WMT0chn((*p_mq_WMT0chn_vec[i]));
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->mq_WMT1chn_vec.push_back(mq_WMT1chn_vec[j]);
			}
		}
	}

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ClientSide constructor' algorithm generated code

	//End of 'ClientSide constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_clientside::~cfm_clientside(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ClientSide destructor' algorithm generated code

	//End of 'ClientSide destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	for (vector<cfm_device*>::const_iterator vi = Device_vec.begin();
			vi != Device_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_rdownx*>::const_iterator vi = RDDmux_vec.begin();
			vi != RDDmux_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_wrdmux*>::const_iterator vi = WRDMux_vec.begin();
			vi != WRDMux_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_BRESPin_t*>::const_iterator vi = mq_BRESPin_vec.begin();
			vi != mq_BRESPin_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_RDATAin_t*>::const_iterator vi = mq_RDATAin_vec.begin();
			vi != mq_RDATAin_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_ARADDRchn_t*>::const_iterator vi = p_mq_ARADDRchn_vec.begin();
			vi != p_mq_ARADDRchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_BRESPchn_t*>::const_iterator vi = p_mq_BRESPchn_vec.begin();
			vi != p_mq_BRESPchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_CMT0chn_t*>::const_iterator vi = p_mq_CMT0chn_vec.begin();
			vi != p_mq_CMT0chn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_CMT1chn_t*>::const_iterator vi = p_mq_CMT1chn_vec.begin();
			vi != p_mq_CMT1chn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_Device_t*>::const_iterator vi = p_mq_Device_vec.begin();
			vi != p_mq_Device_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_RDownx_t*>::const_iterator vi = p_mq_RDownx_vec.begin();
			vi != p_mq_RDownx_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_Rng2Sbo_t*>::const_iterator vi = p_mq_Rng2Sbo_vec.begin();
			vi != p_mq_Rng2Sbo_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_WDATAchn_t*>::const_iterator vi = p_mq_WDATAchn_vec.begin();
			vi != p_mq_WDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_WMT0chn_t*>::const_iterator vi = p_mq_WMT0chn_vec.begin();
			vi != p_mq_WMT0chn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_WMT1chn_t*>::const_iterator vi = p_mq_WMT1chn_vec.begin();
			vi != p_mq_WMT1chn_vec.end(); vi++) {
		delete (*vi);
	}
}
//@}

/// \name pre-elaboration section
//@{
void cfm_clientside::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ClientSide pre elaboration' algorithm generated code

	//End of 'ClientSide pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_clientside::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ClientSide post elaboration' algorithm generated code

	//End of 'ClientSide post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_clientside::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ClientSide post simulation' algorithm generated code

	//End of 'ClientSide post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_clientside::cb_init_attributes() {

// initialize function attributes
// initialize relations attributes
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*mq_BRESPin_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*mq_BRESPin_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*mq_RDATAin_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*mq_RDATAin_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_CMT0chn_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_CMT0chn_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_CMT1chn_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_CMT1chn_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_Device_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_Device_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_RDownx_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_RDownx_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_Rng2Sbo_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_Rng2Sbo_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_WDATAchn_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_WDATAchn_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_WMT0chn_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_WMT0chn_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		(*p_mq_WMT1chn_vec[i]).set_send_time(cf_expr_duration(1, CF_NS));
		(*p_mq_WMT1chn_vec[i]).set_receive_time(cf_expr_duration(1, CF_NS));
	}

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_clientside::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ClientSide initializations' algorithm generated code

	//End of 'ClientSide initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>