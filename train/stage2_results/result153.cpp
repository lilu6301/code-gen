
/*
 * \class cfm_clientside
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of NetworkSwitch generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_clientside.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_networkswitch
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_clientside
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_clientside::cfm_clientside(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_clientside_dp_if()

{
	cf_function_container::init();

	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++)
	{
		cfm_device* module=new cfm_device(cf_string("Device[%d]", i).c_str());
		CF_ASSERT( module )
		Device_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++)
	{
		cfm_rddmux* module=new cfm_rddmux(cf_string("RDDmux[%d]", i).c_str());
		CF_ASSERT( module )
		RDDmux_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++)
	{
		cfm_wrdmux* module=new cfm_wrdmux(cf_string("WRDmux[%d]", i).c_str());
		CF_ASSERT( module )
		WRDmux_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++)
	{
		mq_BRESPin_t* module=new mq_BRESPin_t(cf_string("BRESPin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_BRESPin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++)
	{
		mq_RDATAin_t* module=new mq_RDATAin_t(cf_string("RDATAin[%d]", i).c_str());
		CF_ASSERT( module )
		mq_RDATAin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb+1); i++)
	{
		p_mq_RDATAchn_t* module=new p_mq_RDATAchn_t(cf_string("p_mq_RDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb+1); i++)
	{
		p_mq_ARADDRchn_t* module=new p_mq_ARADDRchn_t(cf_string("p_mq_ARADDRchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ARADDRchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb+1); i++)
	{
		p_mq_BRESPchn_t* module=new p_mq_BRESPchn_t(cf_string("p_mq_BRESPchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb+1); i++)
	{
		p_mq_WDATAchn_t* module=new p_mq_WDATAchn_t(cf_string("p_mq_WDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_WDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb+1); i++)
	{
		p_mq_AWADDRchn_t* module=new p_mq_AWADDRchn_t(cf_string("p_mq_AWADDRchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_AWADDRchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		cfm_device* module
		=Device_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nb + 1); j++) {
				module->p_mq_RDATAin
				(mq_RDATAin_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nb + 1); j++) {
				module->p_mq_BRESPin
				(mq_BRESPin_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_RDATAchn
			((*p_mq_RDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_ARADDRchn
			((*p_mq_ARADDRchn_vec[
							i
							]
					)
			);
			module->p_mq_BRESPchn
			((*p_mq_BRESPchn_vec[
							i
							]
					)
			);
			module->p_mq_WDATAchn
			((*p_mq_WDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_AWADDRchn
			((*p_mq_AWADDRchn_vec[
							i
							]
					)
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		cfm_rddmux* module
		=RDDmux_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nb + 1); j++) {
				module->p_mq_RDATAin
				(mq_RDATAin_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nb + 1); j++) {
				module->p_mq_BRESPin
				(mq_BRESPin_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_RDATAchn
			((*p_mq_RDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_ARADDRchn
			((*p_mq_ARADDRchn_vec[
							i
							]
					)
			);
			module->p_mq_BRESPchn
			((*p_mq_BRESPchn_vec[
							i
							]
					)
			);
			module->p_mq_WDATAchn
			((*p_mq_WDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_AWADDRchn
			((*p_mq_AWADDRchn_vec[
							i
							]
					)
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		cfm_wrdmux* module
		=WRDmux_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nb + 1); j++) {
				module->p_mq_RDATAin
				(mq_RDATAin_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nb + 1); j++) {
				module->p_mq_BRESPin
				(mq_BRESPin_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_RDATAchn
			((*p_mq_RDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_ARADDRchn
			((*p_mq_ARADDRchn_vec[
							i
							]
					)
			);
			module->p_mq_BRESPchn
			((*p_mq_BRESPchn_vec[
							i
							]
					)
			);
			module->p_mq_WDATAchn
			((*p_mq_WDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_AWADDRchn
			((*p_mq_AWADDRchn_vec[
							i
							]
					)
			);
		}
	}



	cf_function_container::elab_end();
}

cfm_clientside::~cfm_clientside(void) {

	for (vector<cfm_device*>::const_iterator vi = Device_vec.begin(); vi != Device_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_rddmux*>::const_iterator vi = RDDmux_vec.begin(); vi != RDDmux_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_wrdmux*>::const_iterator vi = WRDmux_vec.begin(); vi != WRDmux_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_BRESPin_t*>::const_iterator vi = mq_BRESPin_vec.begin(); vi != mq_BRESPin_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_RDATAin_t*>::const_iterator vi = mq_RDATAin_vec.begin(); vi != mq_RDATAin_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_RDATAchn_t*>::const_iterator vi = p_mq_RDATAchn_vec.begin(); vi != p_mq_RDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_ARADDRchn_t*>::const_iterator vi = p_mq_ARADDRchn_vec.begin(); vi != p_mq_ARADDRchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_BRESPchn_t*>::const_iterator vi = p_mq_BRESPchn_vec.begin(); vi != p_mq_BRESPchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_WDATAchn_t*>::const_iterator vi = p_mq_WDATAchn_vec.begin(); vi != p_mq_WDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_AWADDRchn_t*>::const_iterator vi = p_mq_AWADDRchn_vec.begin(); vi != p_mq_AWADDRchn_vec.end(); vi++) {
		delete (*vi);
	}
}

void cfm_clientside::cb_before_elaboration(void) {

}

void cfm_clientside::cb_end_of_elaboration(void) {

}

void cfm_clientside::cb_end_of_simulation(void) {

}

void cfm_clientside::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*mq_BRESPin_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_BRESPin_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_BRESPin_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_BRESPin_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_BRESPin_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_BRESPin_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_BRESPin_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*mq_RDATAin_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_RDATAin_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_RDATAin_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_RDATAin_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_RDATAin_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_RDATAin_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_RDATAin_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*p_mq_RDATAchn_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_RDATAchn_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_RDATAchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*p_mq_RDATAchn_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*p_mq_RDATAchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*p_mq_RDATAchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*p_mq_RDATAchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*p_mq_ARADDRchn_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_ARADDRchn_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_ARADDRchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*p_mq_ARADDRchn_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*p_mq_ARADDRchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*p_mq_ARADDRchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*p_mq_ARADDRchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*p_mq_BRESPchn_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_BRESPchn_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_BRESPchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*p_mq_BRESPchn_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*p_mq_BRESPchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*p_mq_BRESPchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*p_mq_BRESPchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*p_mq_WDATAchn_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_WDATAchn_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_WDATAchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*p_mq_WDATAchn_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*p_mq_WDATAchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*p_mq_WDATAchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*p_mq_WDATAchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nb + 1); i++) {
		(*p_mq_AWADDRchn_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_AWADDRchn_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*p_mq_AWADDRchn_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*p_mq_AWADDRchn_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*p_mq_AWADDRchn_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*p_mq_AWADDRchn_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*p_mq_AWADDRchn_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_clientside::cb_init_local_vars(void) {


}


