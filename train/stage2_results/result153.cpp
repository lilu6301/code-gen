
/*
 * \class cfm_clientside
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_clientside.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_clientside
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_clientside::cfm_clientside(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_clientside_dp_if()

{
	cf_function_container::init();
	RDDux = new cfm_rddux
	("RDDux");
	WRDux = new cfm_wrdux
	("WRDux");

	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		cfm_device* module=new cfm_device(cf_string("Device[%d]", i).c_str());
		CF_ASSERT( module )
		Device_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_ARADDRchn_t* module=new p_mq_ARADDRchn_t(cf_string("p_mq_ARADDRchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ARADDRchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_BRESPchn_t* module=new p_mq_BRESPchn_t(cf_string("p_mq_BRESPchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDATAchn_t* module=new p_mq_RDATAchn_t(cf_string("p_mq_RDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_WDATAchn_t* module=new p_mq_WDATAchn_t(cf_string("p_mq_WDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_WDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_AWADDRchn_t* module=new p_mq_AWADDRchn_t(cf_string("p_mq_AWADDRchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_AWADDRchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_BRESPin_t* module=new p_mq_BRESPin_t(cf_string("p_mq_BRESPin[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDATAin_t* module=new p_mq_RDATAin_t(cf_string("p_mq_RDATAin[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDATAin_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_WDataIn_t* module=new p_mq_WDataIn_t(cf_string("p_mq_WDataIn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_WDataIn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_ADataIn_t* module=new p_mq_ADataIn_t(cf_string("p_mq_ADataIn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ADataIn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_ADOIn_t* module=new p_mq_ADOIn_t(cf_string("p_mq_ADOIn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ADOIn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_ADOOut_t* module=new p_mq_ADOOut_t(cf_string("p_mq_ADOOut[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ADOOut_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_ADOUp_t* module=new p_mq_ADOUp_t(cf_string("p_mq_ADOUp[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ADOUp_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_BRESPin_0_t* module=new p_mq_BRESPin_0_t(cf_string("p_mq_BRESPin_0[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPin_0_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_BRESPin_1_t* module=new p_mq_BRESPin_1_t(cf_string("p_mq_BRESPin_1[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPin_1_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_BRESPin_2_t* module=new p_mq_BRESPin_2_t(cf_string("p_mq_BRESPin_2[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPin_2_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_CDataIn_t* module=new p_mq_CDataIn_t(cf_string("p_mq_CDataIn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_CDataIn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_CDataOut_t* module=new p_mq_CDataOut_t(cf_string("p_mq_CDataOut[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_CDataOut_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_CCFIn_t* module=new p_mq_CCFIn_t(cf_string("p_mq_CCFIn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_CCFIn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_CCFOut_t* module=new p_mq_CCFOut_t(cf_string("p_mq_CCFOut[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_CCFOut_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_CCUp_t* module=new p_mq_CCUp_t(cf_string("p_mq_CCUp[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_CCUp_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDataIn_0_t* module=new p_mq_RDataIn_0_t(cf_string("p_mq_RDataIn_0[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDataIn_0_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDataIn_1_t* module=new p_mq_RDataIn_1_t(cf_string("p_mq_RDataIn_1[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDataIn_1_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDataIn_2_t* module=new p_mq_RDataIn_2_t(cf_string("p_mq_RDataIn_2[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDataIn_2_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDataOut_0_t* module=new p_mq_RDataOut_0_t(cf_string("p_mq_RDataOut_0[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDataOut_0_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDataOut_1_t* module=new p_mq_RDataOut_1_t(cf_string("p_mq_RDataOut_1[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDataOut_1_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RDataOut_2_t* module=new p_mq_RDataOut_2_t(cf_string("p_mq_RDataOut_2[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDataOut_2_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_RUp_t* module=new p_mq_RUp_t(cf_string("p_mq_RUp[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RUp_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++)
	{
		p_mq_Up_t* module=new p_mq_Up_t(cf_string("p_mq_Up[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_Up_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		cfm_device* module
		=Device_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RDataIn
				(p_mq_RDataIn_0_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RDataOut
				(p_mq_RDataOut_0_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_BRESPin
				(p_mq_BRESPin_0_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_BRESPout
				(p_mq_BRESPout_0_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCFIn
				(p_mq_CCFIn_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCFOut
				(p_mq_CCFOut_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCUp
				(p_mq_CCUp_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_ADOIn
				(p_mq_ADOIn_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_ADOOut
				(p_mq_ADOOut_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_ADOUp
				(p_mq_ADOUp_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CDataIn
				(p_mq_CDataIn_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CDataOut
				(p_mq_CDataOut_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCFIn_1
				(p_mq_CCFIn_1_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCFIn_2
				(p_mq_CCFIn_2_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCFOut_1
				(p_mq_CCFOut_1_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_CCFOut_2
				(p_mq_CCFOut_2_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RDataIn_1
				(p_mq_RDataIn_1_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RDataIn_2
				(p_mq_RDataIn_2_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RDataOut_1
				(p_mq_RDataOut_1_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RDataOut_2
				(p_mq_RDataOut_2_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RUp_1
				(p_mq_RUp_1_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(C_Nbr + 1); j++) {
				module->p_mq_RUp_2
				(p_mq_RUp_2_vec[j]
						->p_target_socket
				);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RDataIn_0_vec[i]
				)
				, cfm_client::p_mq_RDataIn_0_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RDataIn_0_vec[i]
				)
				, cfm_client::p_mq_RDataIn_0_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RDataOut_0_vec[i]
				)
				, cfm_client::p_mq_RDataOut_0_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RDataOut_0_vec[i]
				)
				, cfm_client::p_mq_RDataOut_0_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RDataIn_1_vec[i]
				)
				, cfm_client::p_mq_RDataIn_1_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RDataIn_1_vec[i]
				)
				, cfm_client::p_mq_RDataIn_1_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RDataIn_2_vec[i]
				)
				, cfm_client::p_mq_RDataIn_2_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RDataIn_2_vec[i]
				)
				, cfm_client::p_mq_RDataIn_2_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RDataOut_1_vec[i]
				)
				, cfm_client::p_mq_RDataOut_1_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RDataOut_1_vec[i]
				)
				, cfm_client::p_mq_RDataOut_1_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RDataOut_2_vec[i]
				)
				, cfm_client::p_mq_RDataOut_2_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RDataOut_2_vec[i]
				)
				, cfm_client::p_mq_RDataOut_2_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RUp_1_vec[i]
				)
				, cfm_client::p_mq_RUp_1_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RUp_1_vec[i]
				)
				, cfm_client::p_mq_RUp_1_cb_receive_time
		);
	}
	for (cf_count i = 0; i < (cf_count)(C_Nbr + 1); i++) {
		CF_COMM_CB_MQ_SEND((*p_mq_RUp_2_vec[i]
				)
				, cfm_client::p_mq_RUp_2_cb_send_time
		);
		CF_COMM_CB_MQ_RECEIVE((*p_mq_RUp_2_vec[i]
				)
				, cfm_client::p_mq_RUp_2_cb_receive_time
		);
	}



	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000000);

	cf_trace_report("0x00000000");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000000);

	cf_trace_report("0x00000000");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000001);

	cf_trace_report("0x00000001");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000002);

	cf_trace_report("0x00000002");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000003);

	cf_trace_report("0x00000003");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000004);

	cf_trace_report("0x00000004");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000005);

	cf_trace_report("0x00000005");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000006);

	cf_trace_report("0x00000006");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000007);

	cf_trace_report("0x00000007");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000008);

	cf_trace_report("0x00000008");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000009);

	cf_trace_report("0x00000009");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000010);

	cf_trace_report("0x00000010");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000011);

	cf_trace_report("0x00000011");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000012);

	cf_trace_report("0x00000012");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000013);

	cf_trace_report("0x00000013");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000014);

	cf_trace_report("0x00000014");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_BIG
	);

	set_address(0x00000015);

	cf_trace_report("0x00000015");

	cf_endianess.init(cf_dt::CF_DP_ENDIANESS_LITTLE
	);

	set_address(0x00000016);

	cf_trace_report("0x00000016");
