!@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_clientside
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_clientside.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ClientSide definitions' algorithm generated code

//End of 'ClientSide definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_clientside ::cfm_clientside() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),mq_BRESPin("BRESPin"),mq_RDATAin("RDATAin"),p_mq_ARADDRchn("p_mq_ARADDRchn"),p_mq_AWADDRchn("p_mq_AWADDRchn"),p_mq_BRESPchn("p_mq_BRESPchn"),p_mq_RDATAchn("p_mq_RDATAchn"),p_mq_WDATAchn("p_mq_WDATAchn"){
cf_function_container::init();
//instantiation of models
for (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {
		cfm_device* module = new cfm_device(
				cf_string("Device[%d]", i).c_str());
		CF_ASSERT (module)
		Device_vec.push_back(module);
	}
RDDmux = new cfm_rddmux("RDDmux");
WRDmux = new cfm_wrdmux("WRDmux");
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {
		mq_BRESPin_t* module = new mq_BRESPin_t(
				cf_string("BRESPin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_BRESPin_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {
		mq_RDATAin_t* module = new mq_RDATAin_t(
				cf_string("RDATAin[%d]", i).c_str());
		CF_ASSERT (module)
		mq_RDATAin_vec.push_back(module);
	}
//connections
for (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {
		cfm_device* module = Device_vec[i];
		if (module!= nullptr) {
//model connect to relation
for (cf_count j = 0; j < (cf_count)( C_Nbr + 1); j++) {
				module->p_mq_BRESPin(mq_BRESPin_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( C_Nbr + 1); j++) {
				module->p_mq_RDATAin(mq_RDATAin_vec[j]->p_target_socket);
			}
//model connect to port
module->p_mq_ARADDRchn(p_mq_ARADDRchn);
module->p_mq_AWADDRchn(p_mq_AWADDRchn);
module->p_mq_BDATAchn(p_mq_BDATAchn);
}
}
//model connect to relation
for (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {
		RDDmux->p_mq_RDATAin(mq_RDATAin_vec[i]->p_target_socket);
	}
//model connect to port
RDDmux->p_mq_RDATAchn(p_mq_RDATAchn);
//model connect to relation
for (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {
		WRDmux->p_mq_BRESPin(mq_BRESPin_vec[i]->p_target_socket);
	}
//model connect to port
WRDmux->p_mq_BRESPchn(p_mq_BRESPchn);
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_clientside::~cfm_clientside(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ClientSide destructor' algorithm generated code

//End of 'ClientSide destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
for (vector<cfm_device*>::const_iterator vi = Device_vec.begin();
			vi!= Device_vec.end(); vi++) {
		delete (*vi);
	}
delete RDDmux;
delete WRDmux;
//deconstructor for vector relation
for (vector<mq_BRESPin_t*>::const_iterator vi = mq_BRESPin_vec.begin();
			vi!= mq_BRESPin_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_RDATAin_t*>::const_iterator vi = mq_RDATAin_vec.begin();
			vi!= mq_RDATAin_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_clientside::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_clientside::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>