/*
 * \class cfm_callprotocolstack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_callprotocolstack.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_mobilephone
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_callprotocolstack
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_callprotocolstack::cfm_callprotocolstack(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_callprotocolstack_dp_if()
, p_mq_NetToUMTS("p_mq_NetToUMTS")
, p_mq_UMTSToNet("p_mq_UMTSToNet")
, p_mq_HTTPToApp("p_mq_HTTPToApp")
, p_mq_AppToHTTP("p_mq_AppToHTTP")
, mq_HTTPToIP("HTTPToIP"
)
, mq_IPToHTTP("IPToHTTP"
)
, mq_IPToUMTS("IPToUMTS"
)
, mq_UMTSToIP("UMTSToIP"
)

{
	cf_function_container::init();
	HTTPTCP = new cfm_httptcp
	("HTTPTCP");
	IPCall = new cfm_ipcall
	("IPCall");
	UMTS = new cfm_umts
	("UMTS");

	HTTPTCP->p_mq_IPToHTTP
	(mq_IPToHTTP
			.p_target_socket
	);
	HTTPTCP->p_mq_HTTPToIP
	(mq_HTTPToIP
			.p_target_socket
	);
	HTTPTCP->p_mq_HTTPToApp
	(p_mq_HTTPToApp
	);
	HTTPTCP->p_mq_AppToHTTP
	(p_mq_AppToHTTP
	);

	IPCall->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);
	IPCall->p_mq_IPToHTTP
	(mq_IPToHTTP
			.p_target_socket
	);
	IPCall->p_mq_HTTPToIP
	(mq_HTTPToIP
			.p_target_socket
	);

	UMTS->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);
	UMTS->p_mq_NetToUMTS
	(p_mq_NetToUMTS
	);
	UMTS->p_mq_UMTSToNet
	(p_mq_UMTSToNet
	);
	UMTS->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_callprotocolstack::~cfm_callprotocolstack(void) {

	delete HTTPTCP;	///ddd
	delete IPCall;	///ddd
	delete UMTS;	///ddd
}

void cfm_callprotocolstack::cb_before_elaboration(void) {

}

void cfm_callprotocolstack::cb_end_of_elaboration(void) {

}

void cfm_callprotocolstack::cb_end_of_simulation(void) {

}

void cfm_callprotocolstack::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_HTTPToIP.cfa_send_time.init(cf_expr_duration(10, CF_MS));
	mq_HTTPToIP.cfa_receive_time.init(cf_expr_duration(10, CF_MS));
	mq_HTTPToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_HTTPToIP.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_HTTPToIP.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_IPToHTTP.cfa_send_time.init(cf_expr_duration(10, CF_MS));
	mq_IPToHTTP.cfa_receive_time.init(cf_expr_duration(10, CF_MS));
	mq_IPToHTTP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_IPToHTTP.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_IPToHTTP.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_IPToUMTS.cfa_send_time.init(cf_expr_duration(10, CF_MS));
	mq_IPToUMTS.cfa_receive_time.init(cf_expr_duration(10, CF_MS));
	mq_IPToUMTS.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_IPToUMTS.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_IPToUMTS.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_UMTSToIP.cfa_send_time.init(cf_expr_duration(10, CF_MS));
	mq_UMTSToIP.cfa_receive_time.init(cf_expr_duration(10, CF_MS));
	mq_UMTSToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_UMTSToIP.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_UMTSToIP.cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}

void cfm_callprotocolstack::cb_init_local_vars(void) {


}


