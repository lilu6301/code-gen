
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_callprotocolstack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator
 * for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_callprotocolstack.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_softwaredefinedradioapp
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_callprotocolstack
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'CallProtocolStack definitions' algorithm generated code

// End of 'CallProtocolStack definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_callprotocolstack : cf_function_container(name),
                        mq_HTTPToIP("HTTPToIP"),
                        mq_IPToHTTP("IPToHTTP"),
                        mq_IPToUMTS("IPToUMTS"),
                        mq_UMTSToIP("UMTSToIP"),
                        p_mq_AppToHTTP("p_mq_AppToHTTP"),
                        p_mq_HTTPToApp("p_mq_HTTPToApp"),
                        p_mq_NetToUMTS("p_mq_NetToUMTS"),
                        p_mq_UMTSToNet("p_mq_UMTSToNet") {
  cf_function_container::init();
  // instantiation of models
  HTTPTCP = new cfm_httptcp("HTTPTCP");
  IPCall = new cfm_ipcall("IPCall");
  UMTS = new cfm_umts("UMTS");
  // connections
  HTTPTCP->p_mq_HTTPToIP(mq_HTTPToIP);
  HTTPTCP->p_mq_IPToHTTP(mq_IPToHTTP);
  HTTPTCP->p_mq_IPToUMTS(mq_IPToUMTS);
  HTTPTCP->p_mq_UMTSToIP(mq_UMTSToIP);
HTTPTCP->p_mq_AppToHTTP((p_mq_AppToHTTP);
HTTPTCP->p_mq_HTTPToApp((p_mq_HTTPToApp);
IPCall->p_mq_HTTPToIP(mq_HTTPToIP);
IPCall->p_mq_IPToHTTP(mq_IPToHTTP);
IPCall->p_mq_IPToUMTS(mq_IPToUMTS);
IPCall->p_mq_UMTSToIP(mq_UMTSToIP);
UMTS->p_mq_IPToUMTS(mq_IPToUMTS);
UMTS->p_mq_UMTSToIP(mq_UMTSToIP);
UMTS->p_mq_NetToUMTS((p_mq_NetToUMTS);
UMTS->p_mq_UMTSToNet((p_mq_UMTSToNet);
	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_callprotocolstack::~cfm_callprotocolstack(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CallProtocolStack destructor' algorithm generated code

  // End of 'CallProtocolStack destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete HTTPTCP;
  delete IPCall;
  delete UMTS;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_callprotocolstack::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CallProtocolStack pre elaboration' algorithm generated code

  // End of 'CallProtocolStack pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_callprotocolstack::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CallProtocolStack post elaboration' algorithm generated code

  // End of 'CallProtocolStack post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_callprotocolstack::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CallProtocolStack post simulation' algorithm generated code

  // End of 'CallProtocolStack post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_callprotocolstack::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_HTTPToIP.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_HTTPToIP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_HTTPToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_HTTPToIP.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_HTTPToIP.cfa_concurrency.init((cf_nonzero_count)1);
  mq_IPToHTTP.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_IPToHTTP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_IPToHTTP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_IPToHTTP.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_IPToHTTP.cfa_concurrency.init((cf_nonzero_count)1);
  mq_IPToUMTS.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_IPToUMTS.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_IPToUMTS.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_IPToUMTS.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_IPToUMTS.cfa_concurrency.init((cf_nonzero_count)1);
  mq_UMTSToIP.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_UMTSToIP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_UMTSToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_UMTSToIP.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_UMTSToIP.cfa_concurrency.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_callprotocolstack::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CallProtocolStack initializations' algorithm generated code

  // End of 'CallProtocolStack initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>