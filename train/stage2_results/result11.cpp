
/*
 * \class cfm_callprotocolstack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_callprotocolstack.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_softwaredefinedradioapp
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_callprotocolstack
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_callprotocolstack::cfm_callprotocolstack(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_callprotocolstack_dp_if()
, p_mq_NetToUMTS("p_mq_NetToUMTS")
, p_mq_UMTSToNet("p_mq_UMTSToNet")
, p_mq_HTTPToApp("p_mq_HTTPToApp")
, p_mq_AppToHTTP("p_mq_AppToHTTP")
, mq_IPToHTTP("IPToHTTP"
)
, mq_IPToUMTS("IPToUMTS"
)
, mq_MACToIP("MACToIP"
)
, mq_MEMToIP("MEMToIP"
)
, mq_MEMToUMTS("MEMToUMTS"
)
, mq_NETToIP("NETToIP"
)
, mq_NETToUMTS("NETToUMTS"
)
, mq_QToIP("QToIP"
)
, mq_QToUMTS("QToUMTS"
)
, mq_UMTSToIP("UMTSToIP"
)

{
	cf_function_container::init();
	IPCall = new cfm_ipcall
	("IPCall");
	MEM = new cfm_mem
	("MEM");
	UMTS = new cfm_umts
	("UMTS");
	HTTPTCP = new cfm_httptcp
	("HTTPTCP");

	IPCall->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);
	IPCall->p_mq_IPToHTTP
	(mq_IPToHTTP
			.p_target_socket
	);
	IPCall->p_mq_NETToIP
	(mq_NETToIP
			.p_target_socket
	);
	IPCall->p_mq_NETToUMTS
	(mq_NETToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MACToIP
	(mq_MACToIP
			.p_target_socket
	);
	IPCall->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	IPCall->p_mq_QToIP
	(mq_QToIP
			.p_target_socket
	);
	IPCall->p_mq_QToUMTS
	(mq_QToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToUMTS
	(mq_MEMToUMTS
			.p_target_socket
	);
	IPCall->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);

	MEM->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	MEM->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	MEM->p_mq_NETToMEM
	(mq_NETToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToNET
	(mq_MEMToNET
			.p_target_socket
	);
	MEM->p_mq_QToMEM
	(mq_QToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToQ
	(mq_MEMToQ
			.p_target_socket
	);

	IPCall->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	IPCall->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	IPCall->p_mq_NETToIP
	(mq_NETToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToNET
	(mq_IPToNET
			.p_target_socket
	);
	IPCall->p_mq_MACToIP
	(mq_MACToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToMAC
	(mq_IPToMAC
			.p_target_socket
	);
	IPCall->p_mq_NETToUMTS
	(mq_NETToUMTS
			.p_target_socket
	);
	IPCall->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToUMTS
	(mq_MEMToUMTS
			.p_target_socket
	);
	IPCall->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);

	MEM->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	MEM->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	MEM->p_mq_NETToMEM
	(mq_NETToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToNET
	(mq_MEMToNET
			.p_target_socket
	);
	MEM->p_mq_QToMEM
	(mq_QToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToQ
	(mq_MEMToQ
			.p_target_socket
	);

	IPCall->p_mq_IPToMAC
	(mq_IPToMAC
			.p_target_socket
	);
	IPCall->p_mq_MACToIP
	(mq_MACToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToNET
	(mq_IPToNET
			.p_target_socket
	);
	IPCall->p_mq_NETToIP
	(mq_NETToIP
			.p_target_socket
	);
	IPCall->p_mq_NETToUMTS
	(mq_NETToUMTS
			.p_target_socket
	);
	IPCall->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	IPCall->p_mq_QToIP
	(mq_QToIP
			.p_target_socket
	);
	IPCall->p_mq_QToUMTS
	(mq_QToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToUMTS
	(mq_MEMToUMTS
			.p_target_socket
	);
	IPCall->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);

	MEM->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	MEM->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	MEM->p_mq_NETToMEM
	(mq_NETToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToNET
	(mq_MEMToNET
			.p_target_socket
	);
	MEM->p_mq_QToMEM
	(mq_QToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToQ
	(mq_MEMToQ
			.p_target_socket
	);

	IPCall->p_mq_IPToMAC
	(mq_IPToMAC
			.p_target_socket
	);
	IPCall->p_mq_MACToIP
	(mq_MACToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToNET
	(mq_IPToNET
			.p_target_socket
	);
	IPCall->p_mq_NETToIP
	(mq_NETToIP
			.p_target_socket
	);
	IPCall->p_mq_NETToUMTS
	(mq_NETToUMTS
			.p_target_socket
	);
	IPCall->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	IPCall->p_mq_QToIP
	(mq_QToIP
			.p_target_socket
	);
	IPCall->p_mq_QToUMTS
	(mq_QToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToUMTS
	(mq_MEMToUMTS
			.p_target_socket
	);
	IPCall->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);

	MEM->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	MEM->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	MEM->p_mq_NETToMEM
	(mq_NETToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToNET
	(mq_MEMToNET
			.p_target_socket
	);
	MEM->p_mq_QToMEM
	(mq_QToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToQ
	(mq_MEMToQ
			.p_target_socket
	);

	IPCall->p_mq_IPToMAC
	(mq_IPToMAC
			.p_target_socket
	);
	IPCall->p_mq_MACToIP
	(mq_MACToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToNET
	(mq_IPToNET
			.p_target_socket
	);
	IPCall->p_mq_NETToIP
	(mq_NETToIP
			.p_target_socket
	);
	IPCall->p_mq_NETToUMTS
	(mq_NETToUMTS
			.p_target_socket
	);
	IPCall->p_mq_IPToUMTS
	(mq_IPToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	IPCall->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	IPCall->p_mq_QToIP
	(mq_QToIP
			.p_target_socket
	);
	IPCall->p_mq_QToUMTS
	(mq_QToUMTS
			.p_target_socket
	);
	IPCall->p_mq_MEMToUMTS
	(mq_MEMToUMTS
			.p_target_socket
	);
	IPCall->p_mq_UMTSToIP
	(mq_UMTSToIP
			.p_target_socket
	);

	MEM->p_mq_MEMToIP
	(mq_MEMToIP
			.p_target_socket
	);
	MEM->p_mq_IPToMEM
	(mq_IPToMEM
			.p_target_socket
	);
	MEM->p_mq_NETToMEM
	(mq_NETToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToNET
	(mq_MEMToNET
			.p_target_socket
	);
	MEM->p_mq_QToMEM
	(mq_QToMEM
			.p_target_socket
	);
	MEM->p_mq_MEMToQ
	(mq_MEMToQ
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_callprotocolstack::~cfm_callprotocolstack(void) {

	delete IPCall;	///ddd
	delete MEM;	///ddd
	delete HTTPTCP;	///ddd
	delete UMTS;	///ddd
}

void cfm_callprotocolstack::cb_before_elaboration(void) {

}

void cfm_callprotocolstack::cb_end_of_elaboration(void) {

}

void cfm_callprotocolstack::cb_end_of_simulation(void) {

}

void cfm_callprotocolstack::cb_init_attributes() {

	mq_IPToMAC.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_IPToMAC.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_IPToMAC.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_IPToMAC.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_IPToMAC.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_IPToMAC.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_IPToMAC.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_IPToNET.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_IPToNET.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_IPToNET.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_IPToNET.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_IPToNET.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_IPToNET.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_IPToNET.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_IPToUMTS.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_IPToUMTS.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_IPToUMTS.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_IPToUMTS.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_IPToUMTS.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_IPToUMTS.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_IPToUMTS.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MACToIP.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_MACToIP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_MACToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MACToIP.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MACToIP.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MACToIP.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MACToIP.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MEMToIP.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_MEMToIP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_MEMToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MEMToIP.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MEMToIP.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MEMToIP.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MEMToIP.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MEMToNET.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_MEMToNET.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_MEMToNET.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MEMToNET.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MEMToNET.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MEMToNET.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MEMToNET.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MEMToQ.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_MEMToQ.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_MEMToQ.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MEMToQ.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MEMToQ.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MEMToQ.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MEMToQ.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_QToIP.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_QToIP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_QToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_QToIP.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_QToIP.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_QToIP.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_QToIP.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_QToMAC.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_QToMAC.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_QToMAC.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_QToMAC.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_QToMAC.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_QToMAC.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_QToMAC.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_QToNET.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_QToNET.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_QToNET.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_QToNET.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_QToNET.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_QToNET.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_QToNET.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_QToUMTS.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_QToUMTS.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_QToUMTS.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_QToUMTS.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_QToUMTS.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_QToUMTS.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_QToUMTS.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_callprotocolstack::cb_init_local_vars(void) {


}


