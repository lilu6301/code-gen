//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_raddrdmux
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_raddrdmux.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'RAddrDmux definitions' algorithm generated code

//End of 'RAddrDmux definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_raddrdmux::cfm_raddrdmux(sc_core::sc_module_name name) :
		cf_function_router(name), cfm_raddrdmux_dp_if(), p_mq_ARADDRin(
				"p_mq_ARADDRin"), p_mq_ARADDRchn("p_mq_ARADDRchn") {
	cf_function_router::init();

	add_input_port (&p_mq_ARADDRchn);
	add_output_port (&p_mq_ARADDRin);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RAddrDmux constructor' algorithm generated code

	//End of 'RAddrDmux constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_router::elab_end();
}
//@}

/// \name destructor
//@{
cfm_raddrdmux::~cfm_raddrdmux(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RAddrDmux destructor' algorithm generated code

	//End of 'RAddrDmux destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name pre-elaboration section
//@{
void cfm_raddrdmux::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RAddrDmux pre elaboration' algorithm generated code

	//End of 'RAddrDmux pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_raddrdmux::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RAddrDmux post simulation' algorithm generated code

	//End of 'RAddrDmux post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_raddrdmux::cb_init_attributes() {

// initialize routing function attributes
	cfa_routing_time.init(cf_expr_duration(0, CF_CYCLE));
	cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_raddrdmux::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RAddrDmux initializations' algorithm generated code

	//End of 'RAddrDmux initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name Overload function for RAddrDmux router destination method
//@{
string cfm_raddrdmux::cb_select_destination_name(cf_payload_b* _trans) {
	string source_name = get_source_name();
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RAddrDmux destination' algorithm generated code
	int sourceID;
	sourceID = ((cft_defaraddrchn*) _trans)->get_data().ID;
	std::stringstream ss;
	ss << "ARADDRin[" << sourceID << "]";
	return ss.str();
	//End of 'RAddrDmux destination' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	return "";
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>