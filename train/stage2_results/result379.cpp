
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_opp_usecase
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of OPP_UseCase generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_opp_usecase.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'OPP_UseCase definitions' algorithm generated code

// End of 'OPP_UseCase definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_opp_usecase : cf_application(name),
                  ev_StartEv("StartEv"),
                  ev_UnusedEv("UnusedEv"),
                  mq_M2S("M2S"),
                  mq_S2M("S2M") {
  cf_application::init();
  // instantiation of models
  Master = new cfm_master("Master");
  Slave = new cfm_slave("Slave");
  StartFunc = new cfm_startfunc("StartFunc");
  UnusedFunc = new cfm_unusedfunc("UnusedFunc");
  // connections
  StartFunc->p_ev_StartEv(ev_StartEv);
  UnusedFunc->p_ev_UnusedEv(ev_UnusedEv);
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_opp_usecase::~cfm_opp_usecase(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'OPP_UseCase destructor' algorithm generated code

  // End of 'OPP_UseCase destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete Master;
  delete Slave;
  delete StartFunc;
  delete UnusedFunc;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_opp_usecase::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'OPP_UseCase pre elaboration' algorithm generated code

  // End of 'OPP_UseCase pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_opp_usecase::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'OPP_UseCase post elaboration' algorithm generated code

  // End of 'OPP_UseCase post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_opp_usecase::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'OPP_UseCase post simulation' algorithm generated code

  // End of 'OPP_UseCase post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_opp_usecase::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_M2S.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_M2S.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_M2S.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_M2S.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_M2S.cfa_concurrency.init((cf_nonzero_count)1);
  mq_M2S.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_M2S.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_S2M.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_S2M.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_S2M.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_S2M.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_S2M.cfa_concurrency.init((cf_nonzero_count)1);
  mq_S2M.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_S2M.cfa_receive_threshold.init((cf_nonzero_count)1);
  ev_StartEv.cfa_set_time.init(cf_expr_duration(10, CF_US));
  ev_StartEv.cfa_get_time.init(cf_expr_duration(10, CF_US));
  ev_StartEv.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
  ev_UnusedEv.cfa_set_time.init(cf_expr_duration(10, CF_US));
  ev_UnusedEv.cfa_get_time.init(cf_expr_duration(10, CF_US));
  ev_UnusedEv.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_opp_usecase::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'OPP_UseCase initializations' algorithm generated code

  // End of 'OPP_UseCase initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>