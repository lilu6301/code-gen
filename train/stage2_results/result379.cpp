
/*
 * \class cfm_opp_usecase
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_opp_usecase.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_opp_usecase::cfm_opp_usecase(sc_core::sc_module_name name)
cf_application(name)
, mq_M2S("M2S"
)
, mq_S2M("S2M"
)
, ev_StartEv("StartEv"
)
, ev_UnusedEv("UnusedEv"
)

{
	cf_application::init();
	Master = new cfm_master
	("Master");
	Slave = new cfm_slave
	("Slave");
	StartFunc = new cfm_startfunc
	("StartFunc");
	UnusedFunc = new cfm_unusedfunc
	("UnusedFunc");

	Master->p_mq_M2S
	(mq_M2S
			.p_target_socket
	);
	Master->p_ev_StartEv
	(ev_StartEv
			.p_target_socket
	);

	Slave->p_mq_S2M
	(mq_S2M
			.p_target_socket
	);
	Slave->p_ev_UnusedEv
	(ev_UnusedEv
			.p_target_socket
	);

	StartFunc->p_ev_StartEv
	(ev_StartEv
			.p_target_socket
	);

	UnusedFunc->p_ev_UnusedEv
	(ev_UnusedEv
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_opp_usecase::~cfm_opp_usecase(void) {

	delete Master;	///ddd
	delete Slave;	///ddd
	delete StartFunc;	///ddd
	delete UnusedFunc;	///ddd
}

void cfm_opp_usecase::cb_before_elaboration(void) {

}

void cfm_opp_usecase::cb_end_of_elaboration(void) {

}

void cfm_opp_usecase::cb_end_of_simulation(void) {

}

void cfm_opp_usecase::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_M2S.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_M2S.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_M2S.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M2S.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M2S.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M2S.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M2S.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_S2M.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_S2M.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_S2M.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_S2M.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_S2M.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_S2M.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_S2M.cfa_receive_threshold.init((cf_nonzero_count) 1);
	ev_StartEv.cfa_set_time.init(cf_expr_duration(10, CF_US));
	ev_StartEv.cfa_get_time.init(cf_expr_duration(10, CF_US));
	ev_StartEv.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
	ev_UnusedEv.cfa_set_time.init(cf_expr_duration(10, CF_US));
	ev_UnusedEv.cfa_get_time.init(cf_expr_duration(10, CF_US));
	ev_UnusedEv.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);

	return;
}

void cfm_opp_usecase::cb_init_local_vars(void) {


}


