
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_device
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_device.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_device
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Device definitions' algorithm generated code

//End of 'Device definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_device::cfm_device(sc_core::sc_module_name name) :
		cf_function_container(name), p_mq_RDATAin("p_mq_RDATAin"), p_mq_BRESPin(
				"p_mq_BRESPin"), p_mq_ARADDRchn("p_mq_ARADDRchn"), p_mq_WDATAchn(
				"p_mq_WDATAchn"), p_mq_AWADDRchn("p_mq_AWADDRchn") {
	cf_function_container::init();
	Device = new cfm_device_device("Device");

	// instantiation of ReceiverRData_vec
	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		cfm_receiverrdata* module = new cfm_receiverrdata(
				cf_string("ReceiverRData[%d]", i).c_str());
		CF_ASSERT (module)
		ReceiverRData_vec.push_back(module);
	}
	// instantiation of ReceiveWACK_vec
	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		cfm_receivewack* module = new cfm_receivewack(
				cf_string("ReceiveWACK[%d]", i).c_str());
		CF_ASSERT (module)
		ReceiveWACK_vec.push_back(module);
	}
	// instantiation of Sender_vec
	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		cfm_sender* module = new cfm_sender(cf_string("Sender[%d]", i).c_str());
		CF_ASSERT (module)
		Sender_vec.push_back(module);
	}
	// instantiation of p_mq_DevicePort_vec
	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		p_mq_DevicePort_t* module = new p_mq_DevicePort_t(
				cf_string("p_mq_DevicePort[%d]", i).c_str());
		CF_ASSERT (module)
		p_mq_DevicePort_vec.push_back(module);
	}
	// connections
	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		cfm_receiverrdata* module = ReceiverRData_vec[i];
		if (module != nullptr) {
			module->p_mq_RDATAin(p_mq_RDATAin);
		}
	}

	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		cfm_receivewack* module = ReceiveWACK_vec[i];
		if (module != nullptr) {
			module->p_mq_BRESPin(p_mq_BRESPin);
		}
	}

	for (cf_count i = 0; i < (cf_count)(DP_DEVICE_THREAD_INSTANCES + 1); i++) {
		cfm_sender* module = Sender_vec[i];
		if (module != nullptr) {
			module->p_mq_ARADDRchn(p_mq_ARADDRchn);
			module->p_mq_WDATAchn(p_mq_WDATAchn);
			module->p_mq_AWADDRchn(p_mq_AWADDRchn);
		}
	}

	Device->p_mq_DevicePort((*p_mq_DevicePort_vec[0]));

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device constructor' algorithm generated code

	//End of 'Device constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_device::~cfm_device(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device destructor' algorithm generated code

	//End of 'Device destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	for (vector<cfm_receiverrdata*>::const_iterator vi =
			ReceiverRData_vec.begin(); vi != ReceiverRData_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_receivewack*>::const_iterator vi = ReceiveWACK_vec.begin();
			vi != ReceiveWACK_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_sender*>::const_iterator vi = Sender_vec.begin();
			vi != Sender_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_DevicePort_t*>::const_iterator vi =
			p_mq_DevicePort_vec.begin(); vi != p_mq_DevicePort_vec.end();
			vi++) {
		delete (*vi);
	}
	delete Device;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_device::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device pre elaboration' algorithm generated code

	//End of 'Device pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_device::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device post elaboration' algorithm generated code

	//End of 'Device post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_device::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device post simulation' algorithm generated code

	//End of 'Device post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_device::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_device::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Device initializations' algorithm generated code

	//End of 'Device initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>