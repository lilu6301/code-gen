/*
 * \class cfm_cofluentapifromexternalip
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CoFluentAPIFromExternalIP generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_cofluentapifromexternalip.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_cofluentapifromexternalip::cfm_cofluentapifromexternalip(sc_core::sc_module_name name)
cf_application(name)
, mq_MsgBwQ("MsgBwQ"
)
, mq_MsgFwQ("MsgFwQ"
)

{
	cf_application::init();
	CoF_Initiator = new cfm_cof_initiator
	("CoF_Initiator");
	iUart = new iUart_t
	("iUart");

	CoF_Initiator->p_mq_MsgFwQ
	(mq_MsgFwQ
			.p_target_socket
	);
	CoF_Initiator->p_mq_MsgBwQ
	(mq_MsgBwQ
			.p_target_socket
	);

	iUart->p_mq_request
	(mq_MsgFwQ
			.p_target_socket
	);
	iUart->p_mq_response
	(mq_MsgBwQ
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_cofluentapifromexternalip::~cfm_cofluentapifromexternalip(void) {

	delete CoF_Initiator;	///ddd
	delete iUart;	///ddd
}

void cfm_cofluentapifromexternalip::cb_before_elaboration(void) {

}

void cfm_cofluentapifromexternalip::cb_end_of_elaboration(void) {

}

void cfm_cofluentapifromexternalip::cb_end_of_simulation(void) {

}

void cfm_cofluentapifromexternalip::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_MsgBwQ.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgBwQ.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgBwQ.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgBwQ.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MsgBwQ.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgBwQ.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgBwQ.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MsgFwQ.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgFwQ.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgFwQ.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgFwQ.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MsgFwQ.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgFwQ.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgFwQ.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_cofluentapifromexternalip::cb_init_local_vars(void) {


}


