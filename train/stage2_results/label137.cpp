//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_automatedpayloadtrackers
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_automatedpayloadtrackers.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'AutomatedPayloadTrackers definitions' algorithm generated code

//End of 'AutomatedPayloadTrackers definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_automatedpayloadtrackers::cfm_automatedpayloadtrackers(
		sc_core::sc_module_name name) :
		cf_application(name), mq_M1_1("M1_1"), mq_M1_2("M1_2"), mq_M1_3("M1_3"), mq_M2_1(
				"M2_1"), mq_M2_2("M2_2") {
	cf_application::init();
	C1 = new cfm_c1("C1");
	C2 = new cfm_c2("C2");
	F12 = new cfm_f12("F12");
	F2 = new cfm_f2("F2");
	P1 = new cfm_p1("P1");
	P2 = new cfm_p2("P2");

	// connections
	C1->p_mq_M1_3(mq_M1_3.p_target_socket);

	C2->p_mq_M2_2(mq_M2_2.p_target_socket);

	F12->p_mq_M1_1(mq_M1_1.p_target_socket);
	F12->p_mq_M2_1(mq_M2_1.p_target_socket);
	F12->p_mq_M1_2(mq_M1_2.p_target_socket);
	F12->p_mq_M2_2(mq_M2_2.p_target_socket);

	F2->p_mq_M1_2(mq_M1_2.p_target_socket);
	F2->p_mq_M1_3(mq_M1_3.p_target_socket);

	P1->p_mq_M1_1(mq_M1_1.p_target_socket);

	P2->p_mq_M2_1(mq_M2_1.p_target_socket);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'AutomatedPayloadTrackers constructor' algorithm generated code

	//End of 'AutomatedPayloadTrackers constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_automatedpayloadtrackers::~cfm_automatedpayloadtrackers(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'AutomatedPayloadTrackers destructor' algorithm generated code

	//End of 'AutomatedPayloadTrackers destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete C1;
	delete C2;
	delete F12;
	delete F2;
	delete P1;
	delete P2;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_automatedpayloadtrackers::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'AutomatedPayloadTrackers pre elaboration' algorithm generated code

	//End of 'AutomatedPayloadTrackers pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_automatedpayloadtrackers::cb_end_of_elaboration(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'AutomatedPayloadTrackers post elaboration' algorithm generated code

//End of 'AutomatedPayloadTrackers post elaboration' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_automatedpayloadtrackers::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'AutomatedPayloadTrackers post simulation' algorithm generated code

	//End of 'AutomatedPayloadTrackers post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_automatedpayloadtrackers::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	mq_M1_1.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_1.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M1_1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M1_1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M1_1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M1_1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_2.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M1_2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_3.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_3.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M1_3.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_1.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M2_1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_2.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M2_2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_automatedpayloadtrackers::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'AutomatedPayloadTrackers initializations' algorithm generated code

	//End of 'AutomatedPayloadTrackers initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>