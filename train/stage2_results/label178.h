//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_frontend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_DDRMEMORY_FRONTEND
#define COFS_MODEL_DDRMEMORY_FRONTEND

/// Model Header includes start
#include "cfm_ddrmemory_global.h"
#include "cfm_ddrmemory_global_types.h"
#include "cofluent.h"
#include "dp/cfm_frontend_dp_if.h"
#include "cfm_readdatadriver.h"
#include "cfm_readdriver.h"
#include "cfm_sendwackdriver.h"
#include "cfm_writedriver.h"
#include "dt/cft_defaraddrchn.h"
#include "dt/cft_defawaddrchn.h"
#include "dt/cft_defbrespchn.h"
#include "dt/cft_defdataread.h"
#include "dt/cft_defmemreadrequest.h"
#include "dt/cft_defmemwriterequest.h"
#include "dt/cft_defrdatachn.h"
#include "dt/cft_defwdatachn.h"
#include "dt/cft_defwriteack.h"

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'FrontEnd includes' algorithm generated code

//End of 'FrontEnd includes' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
/// Model Header includes end

///    \defgroup dxgFrontEnd Function FrontEnd
//@{
///        \page dxpFrontEnd
//@{
///    \brief FrontEnd function model start
class cfm_frontend: public cf_core::cf_function_container,
		public cfm_frontend_dp_if {
public:
	/// cfm_frontend type define start

	/// ports typedef
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defaraddrchn> p_mq_ARADDRin_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defawaddrchn> p_mq_AWADDRin_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defbrespchn> p_mq_BRESPchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defdataread> p_mq_DataRead_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defmemreadrequest> p_mq_MemReadRequest_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defmemwriterequest> p_mq_MemWriteRequest_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defrdatachn> p_mq_RDATAchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defwdatachn> p_mq_WDATAin_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defwriteack> p_mq_WriteAck_t;
	/// cfm_frontend type define end

	/// constructor
	cfm_frontend(sc_core::sc_module_name name);

	/// destructor
	virtual ~cfm_frontend(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	/// \name input/output ports
	//@{
	p_mq_ARADDRin_t p_mq_ARADDRin;
	p_mq_AWADDRin_t p_mq_AWADDRin;
	p_mq_BRESPchn_t p_mq_BRESPchn;
	p_mq_DataRead_t p_mq_DataRead;
	p_mq_MemReadRequest_t p_mq_MemReadRequest;
	p_mq_MemWriteRequest_t p_mq_MemWriteRequest;
	p_mq_RDATAchn_t p_mq_RDATAchn;
	p_mq_WDATAin_t p_mq_WDATAin;
	p_mq_WriteAck_t p_mq_WriteAck;
	//@}

public:
	/// \name functions
	//@{
	cfm_readdatadriver* ReadDataDriver;
	cfm_readdriver* ReadDriver;
	cfm_sendwackdriver* SendWAckDriver;
	cfm_writedriver* WriteDriver;
	//@}

protected:
	/// initialize attributes
	void cb_init_attributes(void);
	/// initialize definitions
	void cb_init_local_vars(void);

	/// Model private fields start
	/// Model private fields end

	/// \name user-defined local declarations
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'FrontEnd local declarations' algorithm generated code

	//End of 'FrontEnd local declarations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

};
///    \brief FrontEnd function model end

//@}
//@}
#endif // COFS_MODEL_DDRMEMORY_FRONTEND

//<#!@READ-ONLY-SECTION-END@!#>