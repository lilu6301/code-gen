
/*!
 * \class cfm_memory
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_DDRMEMORY_MEMORY
#define COFS_MODEL_DDRMEMORY_MEMORY

#include <vector>
#include "cfm_ddrmemory_global.h"
#include "cfm_ddrmemory_global_types.h"
#include "cofluent.h"
#include "dp/cfm_memory_dp_if.h"
#include "cfm_bankdmuxer.h"
#include "cfm_memorycommandexecution.h"
#include "dt/cft_defdqs.h"
#include "dt/cft_defddrcommand.h"



class cfm_memory: public cf_core::cf_function_container, public cfm_memory_dp_if {
public:
	typedef cf_core::cf_message_queue<cft_defddrcommand> mq_DDRAction_t;

	typedef cf_core::cf_mq_initiator_socket<cfm_memory, cft_defdqs> p_mq_DQs_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memory, cft_defddrcommand> p_mq_DDRCommand_t;

	cfm_memory(sc_core::sc_module_name name);

	virtual ~cfm_memory(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	std::vector<p_mq_DQs_t*> p_mq_DQs_vec;
	std::vector<p_mq_DDRCommand_t*> p_mq_DDRCommand_vec;

public:
	std::vector<cfm_bankdmuxer*> BankDuxer_vec;
	std::vector<cfm_memorycommandexecution*> MemoryCommandExecution_vec;

protected:
	void cb_init_attributes(void);
	void cb_init_local_vars(void);

public:
	std::vector<mq_DDRAction_t*> mq_DDRAction_vec;




};

#endif // COFS_MODEL_DDRMEMORY_MEMORY

