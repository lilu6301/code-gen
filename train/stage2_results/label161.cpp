//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_rddmux
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_rddmux.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'RDDmux definitions' algorithm generated code

//End of 'RDDmux definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_rddmux::cfm_rddmux(sc_core::sc_module_name name) :
		cf_function_router(name), cfm_rddmux_dp_if(), p_mq_RDATAchn(
				"p_mq_RDATAchn"), p_mq_RDATAin("p_mq_RDATAin") {
	cf_function_router::init();

	add_input_port (&p_mq_RDATAchn);
	add_output_port (&p_mq_RDATAin);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RDDmux constructor' algorithm generated code

	//End of 'RDDmux constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_router::elab_end();
}
//@}

/// \name destructor
//@{
cfm_rddmux::~cfm_rddmux(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RDDmux destructor' algorithm generated code

	//End of 'RDDmux destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name pre-elaboration section
//@{
void cfm_rddmux::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RDDmux pre elaboration' algorithm generated code

	//End of 'RDDmux pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_rddmux::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RDDmux post simulation' algorithm generated code

	//End of 'RDDmux post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_rddmux::cb_init_attributes() {

// initialize routing function attributes
	cfa_routing_time.init(cf_expr_duration(1, CF_CYCLE));
	cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_rddmux::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RDDmux initializations' algorithm generated code

	//End of 'RDDmux initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name Overload function for RDDmux router destination method
//@{
string cfm_rddmux::cb_select_destination_name(cf_payload_b* _trans) {
	string source_name = get_source_name();
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'RDDmux destination' algorithm generated code
	int sourceID;
	sourceID = ((cft_defrdatachn*) _trans)->get_data().ID;

	std::stringstream ss;
	ss << "RDATAin[" << sourceID << "]";
	return ss.str();
	//End of 'RDDmux destination' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	return "";
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>