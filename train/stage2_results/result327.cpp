
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_hwmodel
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CompleteDevice generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_hwmodel.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_device
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_hwmodel
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'hwModel definitions' algorithm generated code
void cfm_hwmodel::revert_frame() {

  /* Reverting the image means that Pixel 0 becomes Pixel N-1, where N is the
   * frame size (in Pixels) In YUV 422 format, it implies to:
   *   - Revert the Y table, located at offset 0
   *   - Revert the U table, located at offset N
   *   - Revert the V table, located at offset N*1.5
   */
  byte *outpayload = outputFrame.payload;
  byte *inpayload = inputFrame.payload;

  // 4-Pixel block index in a line
  int pixel_block_idx = 0;

  // Line index
  int line_idx;

  // 4-Pixel block offset, from the beginning of the frame
  int current_block_ofs = 0;

  // For each frame line
  for (line_idx = 0; line_idx < NbPixelsPerLineMax; line_idx++) {
    // For each pixel block
    for (pixel_block_idx = 0; pixel_block_idx < NbPixelsPerLineMax / 4;
         pixel_block_idx++) {

      // Revert the Y table
      outpayload[current_block_ofs] =
          inpayload[current_block_ofs + 1]; // 03
      outpayload[current_block_ofs + 1] =
          inpayload[current_block_ofs + 2]; // 04
      outpayload[current_block_ofs + 1] =
          inpayload[current_block_ofs + 3]; // 05
      outpayload[current_block_ofs + 1] =
          inpayload[current_block_ofs + 4]; // 06

      // Revert the U table
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 1] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 2]; // 07
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 3] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 4]; // 08
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 5] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 6]; // 09

      // Revert the V table
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 1] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 2]; // 10
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 3] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 4]; // 11
      outpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 5] =
          inpayload[current_block_ofs + NbPixelsPerLineMax / 2 - 6]; // 12

      current_block_ofs += 4;
    }
  }
}

//<#!@READ-ONLY-SECTION-START@!#>