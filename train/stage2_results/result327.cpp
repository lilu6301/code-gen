
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_hwmodel
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CompleteDevice generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_hwmodel.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_device
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_hwmodel
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'hwModel definitions' algorithm generated code
void cfm_hwmodel::revert_frame() {

	/* Revert the image by:
	 *   - Pixel 0 becomes Pixel N-1
	 *   - Line 0 becomes Line N
	 *   - Frame 0 becomes Frame N
	 *   - ProcessingMode becomes 'REVERT'
	 *   - startProcess becomes 'endOfProcess'
	 *   - inputFrame becomes outputFrame
	 *   - outputFrame becomes inputFrame
	 *   - processingMode becomes 'PROCESS'
	 *   - endOfProcess becomes startProcess
	 */
	byte* outpayload = outputFrame.payload;
	byte* inpayload = inputFrame.payload;

	// 'REVERT' ProcessingMode
	outpayload[0] = inpayload[N - 1 - 0];
	outpayload[1] = inpayload[N - 1 - 1];
	outpayload[2] = inpayload[N - 1 - 2];
	outpayload[3] = inpayload[N - 1 - 3];
	outpayload[4] = inpayload[N - 1 - 4];
	outpayload[5] = inpayload[N - 1 - 5];
	outpayload[6] = inpayload[N - 1 - 6];
	outpayload[7] = inpayload[N - 1 - 7];

	// 'PROCESS' ProcessingMode
	inpayload[0] = outpayload[N - 1 - 0];
	inpayload[1] = outpayload[N - 1 - 1];
	inpayload[2] = outpayload[N - 1 - 2];
	inpayload[3] = outpayload[N - 1 - 3];
	inpayload[4] = outpayload[N - 1 - 4];
	inpayload[5] = outpayload[N - 1 - 5];
	inpayload[6] = outpayload[N - 1 - 6];
	inpayload[7] = outpayload[N - 1 - 7];

	cf_trace_report("HW Model - Revert the image");

	// Line 0 becomes Line N
	outpayload[N - 1 - 0] = inpayload[0];
	outpayload[N - 1 - 1] = inpayload[1];
	outpayload[N - 1 - 2] = inpayload[2];
	outpayload[N - 1 - 3] = inpayload[3];
	outpayload[N - 1 - 4] = inpayload[4];
	outpayload[N - 1 - 5] = inpayload[5];
	outpayload[N - 1 - 6] = inpayload[6];
	outpayload[N - 1 - 7] = inpayload[7];

	// Pixel 0 becomes Pixel N-1
	outpayload[N - 1 - 0 - 0] = inpayload[0 - 0];
	outpayload[N - 1 - 0 - 1] = inpayload[0 - 1];
	outpayload[N - 1 - 0 - 2] = inpayload[0 - 2];
	outpayload[N - 1 - 0 - 3] = inpayload[0 - 3];
	outpayload[N - 1 - 0 - 4] = inpayload[0 - 4];
	outpayload[N - 1 - 0 - 5] = inpayload[0 - 5];
	outpayload[N - 1 - 0 - 6] = inpayload[0 - 6];
	outpayload[N - 1 - 0 - 7] = inpayload[0 - 7];
	outpayload[N - 1 - 1 - 0] = inpayload[1 - 0];
	outpayload[N - 1 - 1 - 1] = inpayload[1 - 1];
	outpayload[N - 1 - 1 - 2] = inpayload[1 - 2];
	outpayload[N - 1 - 1 - 3] = inpayload[1 - 3];
	outpayload[N - 1 - 1 - 4] = inpayload[1 - 4];
	outpayload[N - 1 - 1 - 5] = inpayload[1 - 5];
	outpayload[N - 1 - 1 - 6] = inpayload[1 - 6];
	outpayload[N - 1 - 1 - 7] = inpayload[1 - 7];
	outpayload[N - 1 - 2 - 0] = inpayload[2 - 0];
	outpayload[N - 1 - 2 - 1] = inpayload[2 - 1];
	outpayload[N - 1 - 2 - 2] = inpayload[2 - 2];
	outpayload[N - 1 - 2 - 3] = inpayload[2 - 3];
	outpayload[N - 1 - 2 - 4] = inpayload[2 - 4];
	outpayload[N - 1 - 2 - 5] = inpayload[2 - 5];
	outpayload[N - 1 - 2 - 6] = inpayload[2 - 6];
	outpayload[N - 1 - 2 - 7] = inpayload[2 - 7];
	outpayload[N - 1 - 3 - 0] = inpayload[3 - 0];
	outpayload[N - 1 - 3 - 1] = inpayload[3 - 1];
	outpayload[N - 1 - 3 - 2] = inpayload[3 - 2];
	outpayload[N - 1 - 3 - 3] = inpayload[3 - 3];
	outpayload[N - 1 - 3 - 4] = inpayload[3 - 4];
	outpayload[N - 1 - 3 - 5] = inpayload[3 - 5];
	outpayload[N - 1 - 3 - 6] = inpayload[3 - 6];
	outpayload[N - 1 - 3 - 7] = inpayload[3 - 7];
	outpayload[N - 1 - 4 - 0] = inpayload[4 - 0];
	outpayload[N - 1 - 4 - 1] = inpayload[4 - 1];
	outpayload[N - 1 - 4 - 2] = inpayload[4 - 2];
	outpayload[N - 1 - 4 - 3] = inpayload[4 - 3];
	outpayload[N - 1 - 4 - 4] = inpayload[4 - 4];
	outpayload[N - 1 - 4 - 5] = inpayload[4 - 5];
	outpayload[N - 1 - 4 - 6] = inpayload[4 - 6];
	outpayload[N - 1 - 4 - 7] = inpayload[4 - 7];
	outpayload[N - 1 - 5 - 0] = inpayload[5 - 0];
	outpayload[N - 1 - 5 - 1] = inpayload[5 - 1];
	outpayload[N - 1 - 5 - 2] = inpayload[5 - 2];
	outpayload[N - 1 - 5 - 3] = inpayload[5 - 3];
	outpayload[N - 1 - 5 - 4] = inpayload[5 - 4];
	outpayload[N - 1 - 5 - 5] = inpayload[5 - 5];
	outpayload[N - 1 - 5 - 6] = inpayload[5 - 6];
	outpayload[N - 1 - 5 - 7] = inpayload[5 - 7];
	outpayload[N - 1 - 6 - 0] = inpayload[6 - 0];
	outpayload[N - 1 - 6 - 1] = inpayload[6 - 1];
	outpayload[N - 1 - 6 - 2] = inpayload[6 - 2];
	outpayload[N - 1 - 6 - 3] = inpayload[6 - 3];
	outpayload[N - 1 - 6 - 4] = inpayload[6 - 4];
	outpayload[N - 1 - 6 - 5] = inpayload[6 - 5];
	outpayload[N - 1 - 6 - 6] = inpayload[6 - 6];
	outpayload[N - 1 - 6 - 7] = inpayload[6 - 7];
	outpayload[N - 1 - 7 - 0] = inpayload[7 - 0];
	outpayload[N - 1 - 7 - 1] = inpayload[7 - 1];
	outpayload[N - 1 - 7 - 2] = inpayload[7 - 2];
	outpayload[N - 1 - 7 - 3] = inpayload[7 - 3];
	outpayload[N - 1 - 7 - 4] = inpayload[7 - 4];
	outpayload[N - 1 - 7 - 5] = inpayload[7 - 5];
	outpayload[N - 1 - 7 - 6] = inpayload[7 - 6];
	outpayload[N - 1 - 7 - 7] = inpayload[7 - 7];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 6] = inpayload[N - 1 - 0 - 6];
	outpayload[N - 1 - 0 - 7] = inpayload[N - 1 - 0 - 7];
	outpayload[N - 1 - 1 - 6] = inpayload[N - 1 - 1 - 6];
	outpayload[N - 1 - 1 - 7] = inpayload[N - 1 - 1 - 7];
	outpayload[N - 1 - 2 - 6] = inpayload[N - 1 - 2 - 6];
	outpayload[N - 1 - 2 - 7] = inpayload[N - 1 - 2 - 7];
	outpayload[N - 1 - 3 - 6] = inpayload[N - 1 - 3 - 6];
	outpayload[N - 1 - 3 - 7] = inpayload[N - 1 - 3 - 7];
	outpayload[N - 1 - 4 - 6] = inpayload[N - 1 - 4 - 6];
	outpayload[N - 1 - 4 - 7] = inpayload[N - 1 - 4 - 7];
	outpayload[N - 1 - 5 - 6] = inpayload[N - 1 - 5 - 6];
	outpayload[N - 1 - 5 - 7] = inpayload[N - 1 - 5 - 7];
	outpayload[N - 1 - 6 - 1] = inpayload[N - 1 - 6 - 1];
	outpayload[N - 1 - 6 - 2] = inpayload[N - 1 - 6 - 2];
	outpayload[N - 1 - 6 - 3] = inpayload[N - 1 - 6 - 3];
	outpayload[N - 1 - 6 - 4] = inpayload[N - 1 - 6 - 4];
	outpayload[N - 1 - 6 - 5] = inpayload[N - 1 - 6 - 5];
	outpayload[N - 1 - 6 - 6] = inpayload[N - 1 - 6 - 6];
	outpayload[N - 1 - 6 - 7] = inpayload[N - 1 - 6 - 7];
	outpayload[N - 1 - 7 - 1] = inpayload[N - 1 - 7 - 1];
	outpayload[N - 1 - 7 - 2] = inpayload[N - 1 - 7 - 2];
	outpayload[N - 1 - 7 - 3] = inpayload[N - 1 - 7 - 3];
	outpayload[N - 1 - 7 - 4] = inpayload[N - 1 - 7 - 4];
	outpayload[N - 1 - 7 - 5] = inpayload[N - 1 - 7 - 5];
	outpayload[N - 1 - 7 - 6] = inpayload[N - 1 - 7 - 6];
	outpayload[N - 1 - 7 - 7] = inpayload[N - 1 - 7 - 7];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 4] = inpayload[N - 1 - 0 - 4];
	outpayload[N - 1 - 0 - 5] = inpayload[N - 1 - 0 - 5];
	outpayload[N - 1 - 1 - 4] = inpayload[N - 1 - 1 - 4];
	outpayload[N - 1 - 1 - 5] = inpayload[N - 1 - 1 - 5];
	outpayload[N - 1 - 2 - 3] = inpayload[N - 1 - 2 - 3];
	outpayload[N - 1 - 2 - 4] = inpayload[N - 1 - 2 - 4];
	outpayload[N - 1 - 3 - 1] = inpayload[N - 1 - 3 - 1];
	outpayload[N - 1 - 3 - 2] = inpayload[N - 1 - 3 - 2];
	outpayload[N - 1 - 4 - 1] = inpayload[N - 1 - 4 - 1];
	outpayload[N - 1 - 4 - 2] = inpayload[N - 1 - 4 - 2];
	outpayload[N - 1 - 5 - 2] = inpayload[N - 1 - 5 - 2];
	outpayload[N - 1 - 5 - 3] = inpayload[N - 1 - 5 - 3];
	outpayload[N - 1 - 6 - 1] = inpayload[N - 1 - 6 - 1];
	outpayload[N - 1 - 6 - 2] = inpayload[N - 1 - 6 - 2];
	outpayload[N - 1 - 6 - 3] = inpayload[N - 1 - 6 - 3];
	outpayload[N - 1 - 6 - 4] = inpayload[N - 1 - 6 - 4];
	outpayload[N - 1 - 6 - 5] = inpayload[N - 1 - 6 - 5];
	outpayload[N - 1 - 7 - 1] = inpayload[N - 1 - 7 - 1];
	outpayload[N - 1 - 7 - 2] = inpayload[N - 1 - 7 - 2];
	outpayload[N - 1 - 7 - 3] = inpayload[N - 1 - 7 - 3];
	outpayload[N - 1 - 7 - 4] = inpayload[N - 1 - 7 - 4];
	outpayload[N - 1 - 7 - 5] = inpayload[N - 1 - 7 - 5];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 3] = inpayload[N - 1 - 0 - 3];
	outpayload[N - 1 - 0 - 4] = inpayload[N - 1 - 0 - 4];
	outpayload[N - 1 - 1 - 2] = inpayload[N - 1 - 1 - 2];
	outpayload[N - 1 - 1 - 3] = inpayload[N - 1 - 1 - 3];
	outpayload[N - 1 - 2 - 1] = inpayload[N - 1 - 2 - 1];
	outpayload[N - 1 - 2 - 2] = inpayload[N - 1 - 2 - 2];
	outpayload[N - 1 - 3 - 0] = inpayload[N - 1 - 3 - 0];
	outpayload[N - 1 - 3 - 1] = inpayload[N - 1 - 3 - 1];
	outpayload[N - 1 - 4 - 2] = inpayload[N - 1 - 4 - 2];
	outpayload[N - 1 - 4 - 3] = inpayload[N - 1 - 4 - 3];
	outpayload[N - 1 - 5 - 0] = inpayload[N - 1 - 5 - 0];
	outpayload[N - 1 - 5 - 1] = inpayload[N - 1 - 5 - 1];
	outpayload[N - 1 - 6 - 0] = inpayload[N - 1 - 6 - 0];
	outpayload[N - 1 - 6 - 1] = inpayload[N - 1 - 6 - 1];
	outpayload[N - 1 - 7 - 0] = inpayload[N - 1 - 7 - 0];
	outpayload[N - 1 - 7 - 1] = inpayload[N - 1 - 7 - 1];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 1] = inpayload[N - 1 - 0 - 1];
	outpayload[N - 1 - 0 - 2] = inpayload[N - 1 - 0 - 2];
	outpayload[N - 1 - 1 - 1] = inpayload[N - 1 - 1 - 1];
	outpayload[N - 1 - 1 - 4] = inpayload[N - 1 - 1 - 4];
	outpayload[N - 1 - 2 - 0] = inpayload[N - 1 - 2 - 0];
	outpayload[N - 1 - 2 - 1] = inpayload[N - 1 - 2 - 1];
	outpayload[N - 1 - 3 - 2] = inpayload[N - 1 - 3 - 2];
	outpayload[N - 1 - 3 - 3] = inpayload[N - 1 - 3 - 3];
	outpayload[N - 1 - 4 - 0] = inpayload[N - 1 - 4 - 0];
	outpayload[N - 1 - 4 - 1] = inpayload[N - 1 - 4 - 1];
	outpayload[N - 1 - 5 - 2] = inpayload[N - 1 - 5 - 2];
	outpayload[N - 1 - 5 - 3] = inpayload[N - 1 - 5 - 3];
	outpayload[N - 1 - 6 - 2] = inpayload[N - 1 - 6 - 2];
	outpayload[N - 1 - 6 - 3] = inpayload[N - 1 - 6 - 3];
	outpayload[N - 1 - 7 - 2] = inpayload[N - 1 - 7 - 2];
	outpayload[N - 1 - 7 - 3] = inpayload[N - 1 - 7 - 3];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 5] = inpayload[N - 1 - 0 - 5];
	outpayload[N - 1 - 0 - 6] = inpayload[N - 1 - 0 - 6];
	outpayload[N - 1 - 1 - 5] = inpayload[N - 1 - 1 - 5];
	outpayload[N - 1 - 1 - 6] = inpayload[N - 1 - 1 - 6];
	outpayload[N - 1 - 2 - 4] = inpayload[N - 1 - 2 - 4];
	outpayload[N - 1 - 2 - 5] = inpayload[N - 1 - 2 - 5];
	outpayload[N - 1 - 3 - 4] = inpayload[N - 1 - 3 - 4];
	outpayload[N - 1 - 3 - 5] = inpayload[N - 1 - 3 - 5];
	outpayload[N - 1 - 4 - 3] = inpayload[N - 1 - 4 - 3];
	outpayload[N - 1 - 4 - 4] = inpayload[N - 1 - 4 - 4];
	outpayload[N - 1 - 5 - 4] = inpayload[N - 1 - 5 - 4];
	outpayload[N - 1 - 5 - 5] = inpayload[N - 1 - 5 - 5];
	outpayload[N - 1 - 6 - 3] = inpayload[N - 1 - 6 - 3];
	outpayload[N - 1 - 6 - 4] = inpayload[N - 1 - 6 - 4];
	outpayload[N - 1 - 7 - 4] = inpayload[N - 1 - 7 - 4];
	outpayload[N - 1 - 7 - 5] = inpayload[N - 1 - 7 - 5];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 6] = inpayload[N - 1 - 0 - 6];
	outpayload[N - 1 - 0 - 7] = inpayload[N - 1 - 0 - 7];
	outpayload[N - 1 - 1 - 6] = inpayload[N - 1 - 1 - 6];
	outpayload[N - 1 - 1 - 7] = inpayload[N - 1 - 1 - 7];
	outpayload[N - 1 - 2 - 5] = inpayload[N - 1 - 2 - 5];
	outpayload[N - 1 - 2 - 6] = inpayload[N - 1 - 2 - 6];
	outpayload[N - 1 - 3 - 2] = inpayload[N - 1 - 3 - 2];
	outpayload[N - 1 - 3 - 3] = inpayload[N - 1 - 3 - 3];
	outpayload[N - 1 - 4 - 2] = inpayload[N - 1 - 4 - 2];
	outpayload[N - 1 - 4 - 3] = inpayload[N - 1 - 4 - 3];
	outpayload[N - 1 - 5 - 1] = inpayload[N - 1 - 5 - 1];
	outpayload[N - 1 - 5 - 2] = inpayload[N - 1 - 5 - 2];
	outpayload[N - 1 - 6 - 0] = inpayload[N - 1 - 6 - 0];
	outpayload[N - 1 - 6 - 1] = inpayload[N - 1 - 6 - 1];
	outpayload[N - 1 - 7 - 0] = inpayload[N - 1 - 7 - 0];
	outpayload[N - 1 - 7 - 1] = inpayload[N - 1 - 7 - 1];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 4] = inpayload[N - 1 - 0 - 4];
	outpayload[N - 1 - 0 - 5] = inpayload[N - 1 - 0 - 5];
	outpayload[N - 1 - 1 - 3] = inpayload[N - 1 - 1 - 3];
	outpayload[N - 1 - 1 - 4] = inpayload[N - 1 - 1 - 4];
	outpayload[N - 1 - 2 - 3] = inpayload[N - 1 - 2 - 3];
	outpayload[N - 1 - 2 - 4] = inpayload[N - 1 - 2 - 4];
	outpayload[N - 1 - 3 - 1] = inpayload[N - 1 - 3 - 1];
	outpayload[N - 1 - 3 - 2] = inpayload[N - 1 - 3 - 2];
	outpayload[N - 1 - 4 - 1] = inpayload[N - 1 - 4 - 1];
	outpayload[N - 1 - 4 - 2] = inpayload[N - 1 - 4 - 2];
	outpayload[N - 1 - 5 - 0] = inpayload[N - 1 - 5 - 0];
	outpayload[N - 1 - 5 - 1] = inpayload[N - 1 - 5 - 1];
	outpayload[N - 1 - 6 - 2] = inpayload[N - 1 - 6 - 2];
	outpayload[N - 1 - 6 - 3] = inpayload[N - 1 - 6 - 3];
	outpayload[N - 1 - 7 - 2] = inpayload[N - 1 - 7 - 2];
	outpayload[N - 1 - 7 - 3] = inpayload[N - 1 - 7 - 3];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 3] = inpayload[N - 1 - 0 - 3];
	outpayload[N - 1 - 0 - 6] = inpayload[N - 1 - 0 - 6];
	outpayload[N - 1 - 1 - 2] = inpayload[N - 1 - 1 - 2];
	outpayload[N - 1 - 1 - 4] = inpayload[N - 1 - 1 - 4];
	outpayload[N - 1 - 2 - 0] = inpayload[N - 1 - 2 - 0];
	outpayload[N - 1 - 2 - 1] = inpayload[N - 1 - 2 - 1];
	outpayload[N - 1 - 3 - 0] = inpayload[N - 1 - 3 - 0];
	outpayload[N - 1 - 3 - 1] = inpayload[N - 1 - 3 - 1];
	outpayload[N - 1 - 4 - 0] = inpayload[N - 1 - 4 - 0];
	outpayload[N - 1 - 4 - 1] = inpayload[N - 1 - 4 - 1];
	outpayload[N - 1 - 5 - 2] = inpayload[N - 1 - 5 - 2];
	outpayload[N - 1 - 5 - 3] = inpayload[N - 1 - 5 - 3];
	outpayload[N - 1 - 6 - 1] = inpayload[N - 1 - 6 - 1];
	outpayload[N - 1 - 6 - 2] = inpayload[N - 1 - 6 - 2];
	outpayload[N - 1 - 7 - 1] = inpayload[N - 1 - 7 - 1];
	outpayload[N - 1 - 7 - 2] = inpayload[N - 1 - 7 - 2];

	cf_trace_report("HW Model - Revert the image");

	//EndOfProcess becomes startProcess
	endOfProcess = startProcess;
	startProcess = 0;

	//inputFrame becomes outputFrame
	inputFrame.close();
	outputFrame.open(outpayload, std::fstream::in | std::fstream::out | std::fstream::app);

	//processingMode becomes 'PROCESS'
	processingMode.close();
	outpayload[N - 1 - 0 - 2] = inpayload[N - 1 - 0 - 2];
	outpayload[N - 1 - 0 - 3] = inpayload[N - 1 - 0 - 3];
	outpayload[N - 1 - 1 - 0] = inpayload[N - 1 - 1 - 0];
	outpayload[N - 1 - 1 - 1] = inpayload[N - 1 - 1 - 1];
	outpayload[N - 1 - 2 - 2] = inpayload[N - 1 - 2 - 2];
	outpayload[N - 1 - 2 - 3] = inpayload[N - 1 - 2 - 3];
	outpayload[N - 