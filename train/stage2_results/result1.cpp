
/*
 * \class cfm_softwaredefinedradioapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_softwaredefinedradioapp.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_softwaredefinedradioapp::cfm_softwaredefinedradioapp(sc_core::sc_module_name name)
cf_application(name)
, cfm_softwaredefinedradioapp_dp_if()
, mq_NetToDVB("NetToDVB"
)
, mq_NetToUMTS("NetToUMTS"
)
, mq_UMTSToNet("UMTSToNet"
)
, mq_Video("Video"
)

{
	cf_application::init();
	MobilePhone = new cfm_mobilephone
	("MobilePhone");
	Networks = new cfm_networks
	("Networks");
	User = new cfm_user
	("User");

	MobilePhone->p_mq_UMTSToNet
	(mq_UMTSToNet
			.p_target_socket
	);
	MobilePhone->p_mq_NetToUMTS
	(mq_NetToUMTS
			.p_target_socket
	);
	MobilePhone->p_mq_Request
	(mq_Request
			.p_target_socket
	);
	MobilePhone->p_mq_Response
	(mq_Response
			.p_target_socket
	);
	MobilePhone->p_mq_Video
	(mq_Video
			.p_target_socket
	);

	Networks->p_mq_Request
	(mq_Request
			.p_target_socket
	);
	Networks->p_mq_Response
	(mq_Response
			.p_target_socket
	);
	Networks->p_mq_NetToDVB
	(mq_NetToDVB
			.p_target_socket
	);
	Networks->p_mq_DVBToNet
	(mq_DVBToNet
			.p_target_socket
	);
	Networks->p_mq_NetToUMTS
	(mq_NetToUMTS
			.p_target_socket
	);
	Networks->p_mq_UMTSToNet
	(mq_UMTSToNet
			.p_target_socket
	);

	User->p_mq_Request
	(mq_Request
			.p_target_socket
	);
	User->p_mq_Response
	(mq_Response
			.p_target_socket
	);
	User->p_mq_NetToDVB
	(mq_NetToDVB
			.p_target_socket
	);
	User->p_mq_DVBToNet
	(mq_DVBToNet
			.p_target_socket
	);
	User->p_mq_NetToUMTS
	(mq_NetToUMTS
			.p_target_socket
	);
	User->p_mq_UMTSToNet
	(mq_UMTSToNet
			.p_target_socket
	);
	User->p_mq_Video
	(mq_Video
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_softwaredefinedradioapp::~cfm_softwaredefinedradioapp(void) {

	delete MobilePhone;	///ddd
	delete Networks;	///ddd
	delete User;	///ddd
}

void cfm_softwaredefinedradioapp::cb_before_elaboration(void) {

}

void cfm_softwaredefinedradioapp::cb_end_of_elaboration(void) {

}

void cfm_softwaredefinedradioapp::cb_end_of_simulation(void) {

}

void cfm_softwaredefinedradioapp::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_NetToDVB.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_NetToDVB.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_NetToDVB.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_NetToDVB.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_NetToDVB.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_NetToDVB.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_NetToDVB.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_NetToUMTS.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_NetToUMTS.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_NetToUMTS.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_UMTSToNet.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_UMTSToNet.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_UMTSToNet.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_Video.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_Video.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_Video.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_Video.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_Video.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Video.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_Video.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_softwaredefinedradioapp::cb_init_local_vars(void) {


}


