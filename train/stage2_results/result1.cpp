
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_softwaredefinedradioapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_softwaredefinedradioapp.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'SoftwareDefinedRadioApp definitions' algorithm generated code

//End of 'SoftwareDefinedRadioApp definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_softwaredefinedradioapp::cfm_softwaredefinedradioapp(
		sc_core::sc_module_name name) :
		cf_application(name), cfm_softwaredefinedradioapp_dp_if(), mq_NetToDVB(
				"NetToDVB"), mq_NetToUMTS("NetToUMTS"), mq_Response(
				"Response"), mq_Request("Request"), mq_UMTSToNet("UMTSToNet"), mq_Video(
				"Video") {
	cf_application::init();
	MobilePhone = new cfm_mobilephone("MobilePhone");
	Networks = new cfm_networks("Networks");
	User = new cfm_user("User");

	// connections
	MobilePhone->p_mq_Request(mq_Request.p_target_socket);
	MobilePhone->p_mq_UMTSToNet(mq_UMTSToNet.p_target_socket);
	MobilePhone->p_mq_NetToUMTS(mq_NetToUMTS.p_target_socket);
	MobilePhone->p_mq_Video(mq_Video.p_target_socket);
	MobilePhone->p_mq_Response(mq_Response.p_target_socket);
	MobilePhone->p_mq_NetToDVB(mq_NetToDVB.p_target_socket);

	Networks->p_mq_UMTSToNet(mq_UMTSToNet.p_target_socket);
	Networks->p_mq_NetToUMTS(mq_NetToUMTS.p_target_socket);
	Networks->p_mq_NetToDVB(mq_NetToDVB.p_target_socket);

	User->p_mq_Request(mq_Request.p_target_socket);
	User->p_mq_Response(mq_Response.p_target_socket);
	User->p_mq_Video(mq_Video.p_target_socket);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'SoftwareDefinedRadioApp constructor' algorithm generated code

	//End of 'SoftwareDefinedRadioApp constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_softwaredefinedradioapp::~cfm_softwaredefinedradioapp(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'SoftwareDefinedRadioApp destructor' algorithm generated code

	//End of 'SoftwareDefinedRadioApp destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete MobilePhone;
	delete Networks;
	delete User;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_softwaredefinedradioapp::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'SoftwareDefinedRadioApp pre elaboration' algorithm generated code

	//End of 'SoftwareDefinedRadioApp pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_softwaredefinedradioapp::cb_end_of_elaboration(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'SoftwareDefinedRadioApp post elaboration' algorithm generated code

//End of 'SoftwareDefinedRadioApp post elaboration' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_softwaredefinedradioapp::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'SoftwareDefinedRadioApp post simulation' algorithm generated code

	//End of 'SoftwareDefinedRadioApp post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_softwaredefinedradioapp::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	mq_NetToDVB.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_NetToDVB.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_NetToDVB.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_NetToDVB.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_NetToDVB.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_NetToDVB.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_NetToDVB.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_NetToUMTS.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_NetToUMTS.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_NetToUMTS.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_NetToUMTS.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_Response.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_Response.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_Response.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_Response.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_Response.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Response.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_Response.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_Request.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_Request.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_Request.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_Request.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_Request.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Request.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_Request.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_UMTSToNet.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_UMTSToNet.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_UMTSToNet.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_UMTSToNet.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_Video.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_Video.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_Video.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_Video.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_Video.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Video.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_Video.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_softwaredefinedradioapp::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'SoftwareDefinedRadioApp initializations' algorithm generated code

	//End of 'SoftwareDefinedRadioApp initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>