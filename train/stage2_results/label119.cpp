//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_cosimverilatorchiselapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CoSimVerilatorChiselApp generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_cosimverilatorchiselapp.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'CoSimVerilatorChiselApp definitions' algorithm generated code

//End of 'CoSimVerilatorChiselApp definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_cosimverilatorchiselapp::cfm_cosimverilatorchiselapp(
		sc_core::sc_module_name name) :
		cf_application(name), mq_data1("data1"), mq_data2("data2"), mq_sum(
				"sum"), data1_initiator("data1_initiator"), data2_initiator(
				"data2_initiator"), sum_target("sum_target") {
	cf_application::init();
	Consumer = new cfm_consumer("Consumer");
	Producer1 = new cfm_producer1("Producer1");
	Producer2 = new cfm_producer2("Producer2");

	// connections
	Consumer->p_mq_sum(mq_sum.p_target_socket);

	Producer1->p_mq_data1(mq_data1.p_target_socket);

	Producer2->p_mq_data2(mq_data2.p_target_socket);

	data1_initiator.p_mq_data1(mq_data1.p_target_socket);
	data2_initiator.p_mq_data2(mq_data2.p_target_socket);
	sum_target.p_mq_sum(mq_sum.p_target_socket);
	DPIInit(this, data1DPI, data2DPI, sumDPI);
	data1_initiator.axi_bridge.clk(clk);
	data2_initiator.axi_bridge.clk(clk);
	sum_target.axi_bridge.clk(clk);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CoSimVerilatorChiselApp constructor' algorithm generated code

	//End of 'CoSimVerilatorChiselApp constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_cosimverilatorchiselapp::~cfm_cosimverilatorchiselapp(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CoSimVerilatorChiselApp destructor' algorithm generated code

	//End of 'CoSimVerilatorChiselApp destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete Consumer;
	delete Producer1;
	delete Producer2;
}
//@}

void cfm_cosimverilatorchiselapp::data1DPI(ContextHandle self, bool resetn,
/* Write address channel.  */
bool* sig_awvalid, bool sig_awready, sc_bv<ADDR_WIDTH_DATA1>* sig_awaddr,
		sc_bv<3>* sig_awprot,
		/* Write data channel.  */
		bool* sig_wvalid, bool sig_wready, sc_bv<DATA_WIDTH_DATA1>* sig_wdata,
		sc_bv<DATA_WIDTH_DATA1 / 8>* sig_wstrb,
		/* Write response channel.  */
		bool sig_bvalid, bool* sig_bready, sc_bv<2> sig_bresp,
		/* Read address channel.  */
		bool* sig_arvalid, bool sig_arready,
		sc_bv<ADDR_WIDTH_DATA1>* sig_araddr, sc_bv<3>* sig_arprot,
		/* Read data channel.  */
		bool sig_rvalid, bool* sig_rready, sc_bv<DATA_WIDTH_DATA1> sig_rdata,
		sc_bv<2> sig_rresp) {
	static_cast<cfm_cosimverilatorchiselapp*>(self)->data1_initiator.axiSignals(
			resetn,
			// Write address channel.  
			sig_awvalid, sig_awready, sig_awaddr, sig_awprot,
			// Write data channel.  
			sig_wvalid, sig_wready, sig_wdata, sig_wstrb,
			// Write response channel.  
			sig_bvalid, sig_bready, sig_bresp,
			// Read address channel.  
			sig_arvalid, sig_arready, sig_araddr, sig_arprot,
			// Read data channel.  
			sig_rvalid, sig_rready, sig_rdata, sig_rresp);
}
void cfm_cosimverilatorchiselapp::data2DPI(ContextHandle self, bool resetn,
/* Write address channel.  */
bool* sig_awvalid, bool sig_awready, sc_bv<ADDR_WIDTH_DATA2>* sig_awaddr,
		sc_bv<3>* sig_awprot,
		/* Write data channel.  */
		bool* sig_wvalid, bool sig_wready, sc_bv<DATA_WIDTH_DATA2>* sig_wdata,
		sc_bv<DATA_WIDTH_DATA2 / 8>* sig_wstrb,
		/* Write response channel.  */
		bool sig_bvalid, bool* sig_bready, sc_bv<2> sig_bresp,
		/* Read address channel.  */
		bool* sig_arvalid, bool sig_arready,
		sc_bv<ADDR_WIDTH_DATA2>* sig_araddr, sc_bv<3>* sig_arprot,
		/* Read data channel.  */
		bool sig_rvalid, bool* sig_rready, sc_bv<DATA_WIDTH_DATA2> sig_rdata,
		sc_bv<2> sig_rresp) {
	static_cast<cfm_cosimverilatorchiselapp*>(self)->data2_initiator.axiSignals(
			resetn,
			// Write address channel.  
			sig_awvalid, sig_awready, sig_awaddr, sig_awprot,
			// Write data channel.  
			sig_wvalid, sig_wready, sig_wdata, sig_wstrb,
			// Write response channel.  
			sig_bvalid, sig_bready, sig_bresp,
			// Read address channel.  
			sig_arvalid, sig_arready, sig_araddr, sig_arprot,
			// Read data channel.  
			sig_rvalid, sig_rready, sig_rdata, sig_rresp);
}
void cfm_cosimverilatorchiselapp::sumDPI(ContextHandle self, bool resetn,
/* Write address channel.  */
bool sig_awvalid, bool* sig_awready, sc_bv<ADDR_WIDTH_SUM> sig_awaddr,
		sc_bv<3> sig_awprot,
		/* Write data channel.  */
		bool sig_wvalid, bool* sig_wready, sc_bv<DATA_WIDTH_SUM> sig_wdata,
		sc_bv<DATA_WIDTH_SUM / 8> sig_wstrb,
		/* Write response channel.  */
		bool* sig_bvalid, bool sig_bready, sc_bv<2>* sig_bresp,
		/* Read address channel.  */
		bool sig_arvalid, bool* sig_arready, sc_bv<ADDR_WIDTH_SUM> sig_araddr,
		sc_bv<3> sig_arprot,
		/* Read data channel.  */
		bool* sig_rvalid, bool sig_rready, sc_bv<DATA_WIDTH_SUM>* sig_rdata,
		sc_bv<2>* sig_rresp) {
	static_cast<cfm_cosimverilatorchiselapp*>(self)->sum_target.axiSignals(
			resetn,
			// Write address channel.  
			sig_awvalid, sig_awready, sig_awaddr, sig_awprot,
			// Write data channel.  
			sig_wvalid, sig_wready, sig_wdata, sig_wstrb,
			// Write response channel.  
			sig_bvalid, sig_bready, sig_bresp,
			// Read address channel.  
			sig_arvalid, sig_arready, sig_araddr, sig_arprot,
			// Read data channel.  
			sig_rvalid, sig_rready, sig_rdata, sig_rresp);
}

/// \name pre-elaboration section
//@{
void cfm_cosimverilatorchiselapp::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CoSimVerilatorChiselApp pre elaboration' algorithm generated code

	//End of 'CoSimVerilatorChiselApp pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_cosimverilatorchiselapp::cb_end_of_elaboration(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'CoSimVerilatorChiselApp post elaboration' algorithm generated code

//End of 'CoSimVerilatorChiselApp post elaboration' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_cosimverilatorchiselapp::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CoSimVerilatorChiselApp post simulation' algorithm generated code

	//End of 'CoSimVerilatorChiselApp post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_cosimverilatorchiselapp::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	mq_data1.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_data1.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_data1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_data1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_data1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_data1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_data1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_data2.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_data2.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_data2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_data2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_data2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_data2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_data2.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_sum.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_sum.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_sum.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_sum.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_sum.set_one_side_concurrency();
	mq_sum.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_sum.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_sum.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_cosimverilatorchiselapp::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CoSimVerilatorChiselApp initializations' algorithm generated code

	//End of 'CoSimVerilatorChiselApp initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>