
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_customizeddispatcherapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CustomizedDispatcherApp generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_customizeddispatcherapp.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'CustomizedDispatcherApp definitions' algorithm generated code

//End of 'CustomizedDispatcherApp definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_customizeddispatcherapp::cfm_customizeddispatcherapp(
		sc_core::sc_module_name name) :
		cf_application(name) {
	cf_application::init();

	// instantiation of Consumer_vec
	for (cf_count i = 0; i < (cf_count) 2; i++) {
		cfm_consumer* module = new cfm_consumer(
				cf_string("Consumer[%d]", i).c_str());
		CF_ASSERT (module)
		Consumer_vec.push_back(module);
	}
	// instantiation of Producer_vec
	for (cf_count i = 0; i < (cf_count) 2; i++) {
		cfm_producer* module = new cfm_producer(
				cf_string("Producer[%d]", i).c_str());
		CF_ASSERT (module)
		Producer_vec.push_back(module);
	}
	// instantiation of mq_MsgQ_vec
	for (cf_count i = 0; i < (cf_count) 2; i++) {
		mq_MsgQ_t* module = new mq_MsgQ_t(cf_string("MsgQ[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MsgQ_vec.push_back(module);
	}
	// connections
	for (cf_count i = 0; i < (cf_count) 2; i++) {
		cfm_consumer* module = Consumer_vec[i];
		if (module != nullptr) {
			for (cf_count j = 0; j < (cf_count) 2; j++) {
				module->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count) 2; i++) {
		cfm_producer* module = Producer_vec[i];
		if (module != nullptr) {
			for (cf_count j = 0; j < (cf_count) 2; j++) {
				module->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);
			}
		}
	}

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CustomizedDispatcherApp constructor' algorithm generated code

	//End of 'CustomizedDispatcherApp constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_customizeddispatcherapp::~cfm_customizeddispatcherapp(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CustomizedDispatcherApp destructor' algorithm generated code

	//End of 'CustomizedDispatcherApp destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	for (vector<cfm_consumer*>::const_iterator vi = Consumer_vec.begin();
			vi != Consumer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_producer*>::const_iterator vi = Producer_vec.begin();
			vi != Producer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQ_t*>::const_iterator vi = mq_MsgQ_vec.begin();
			vi != mq_MsgQ_vec.end(); vi++) {
		delete (*vi);
	}
}
//@}

/// \name pre-elaboration section
//@{
void cfm_customizeddispatcherapp::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CustomizedDispatcherApp pre elaboration' algorithm generated code

	//End of 'CustomizedDispatcherApp pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_customizeddispatcherapp::cb_end_of_elaboration(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'CustomizedDispatcherApp post elaboration' algorithm generated code

//End of 'CustomizedDispatcherApp post elaboration' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_customizeddispatcherapp::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CustomizedDispatcherApp post simulation' algorithm generated code

	//End of 'CustomizedDispatcherApp post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_customizeddispatcherapp::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	for (cf_count i = 0; i < (cf_count) 2; i++) {
		(*mq_MsgQ_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQ_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQ_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQ_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_MsgQ_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQ_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQ_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_customizeddispatcherapp::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'CustomizedDispatcherApp initializations' algorithm generated code

	//End of 'CustomizedDispatcherApp initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>