
/*
 * \class cfm_transactiontrackermsgqapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of TransactionTrackerMsgQApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_transactiontrackermsgqapp.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_transactiontrackermsgqapp::cfm_transactiontrackermsgqapp(sc_core::sc_module_name name)
cf_application(name)
, mq_MsgQIn("MsgQIn"
)
, mq_MsgQOut1("MsgQOut1"
)
, mq_MsgQOut2("MsgQOut2"
)

{
	cf_application::init();
	Consumer1 = new cfm_consumer1
	("Consumer1");
	Consumer2 = new cfm_consumer2
	("Consumer2");
	MessageRouting = new cfm_messagerouting
	("MessageRouting");
	Producer = new cfm_producer
	("Producer");

	Consumer1->p_mq_MsgQOut1
	(mq_MsgQOut1
			.p_target_socket
	);

	Consumer2->p_mq_MsgQOut2
	(mq_MsgQOut2
			.p_target_socket
	);

	MessageRouting->p_mq_MsgQIn
	(mq_MsgQIn
			.p_target_socket
	);
	MessageRouting->p_mq_MsgQOut2
	(mq_MsgQOut2
			.p_target_socket
	);
	MessageRouting->p_mq_MsgQOut1
	(mq_MsgQOut1
			.p_target_socket
	);

	Producer->p_mq_MsgQIn
	(mq_MsgQIn
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_transactiontrackermsgqapp::~cfm_transactiontrackermsgqapp(void) {

	delete Consumer1;	///ddd
	delete Consumer2;	///ddd
	delete MessageRouting;	///ddd
	delete Producer;	///ddd
}

void cfm_transactiontrackermsgqapp::cb_before_elaboration(void) {

}

void cfm_transactiontrackermsgqapp::cb_end_of_elaboration(void) {

}

void cfm_transactiontrackermsgqapp::cb_end_of_simulation(void) {

}

void cfm_transactiontrackermsgqapp::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_MsgQIn.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_MsgQIn.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_MsgQIn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQIn.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MsgQIn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQIn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQIn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MsgQOut1.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_MsgQOut1.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_MsgQOut1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQOut1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MsgQOut1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQOut1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQOut1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_MsgQOut2.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_MsgQOut2.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_MsgQOut2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQOut2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MsgQOut2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQOut2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQOut2.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_transactiontrackermsgqapp::cb_init_local_vars(void) {


}


