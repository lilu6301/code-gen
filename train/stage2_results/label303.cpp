//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_tlm2at
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of TLM2AT generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_tlm2at.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'TLM2AT definitions' algorithm generated code

// End of 'TLM2AT definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_tlm2at ::cfm_tlm2at()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_application(name), ev_Sync("Sync"), ev_Sync2("Sync2"),
      ev_Sync3("Sync3"),
      initiatorreader_tlm2_at_initiator("initiatorreader_tlm2_at_initiator"),
      initiatorwriter_tlm2_at_initiator("initiatorwriter_tlm2_at_initiator"),
      mq_InitiatorReader("InitiatorReader"),
      mq_InitiatorWriter("InitiatorWriter"),
      mq_ReaderResponse("ReaderResponse"), mq_ReferenceQueue("ReferenceQueue"),
      mq_ReferenceQueue2("ReferenceQueue2"),
      mq_ReferenceQueue3("ReferenceQueue3"), mq_TargetRequest("TargetRequest"),
      mq_TargetResponse("TargetResponse"), mq_TargetWrapper("TargetWrapper"),
      targetrequest_tlm2_at_target("targetrequest_tlm2_at_target"),
      targetwrapper_tlm2_at_target("targetwrapper_tlm2_at_target") {
  cf_application::init();
  // instantiation of models
  Reader = new cfm_reader("Reader");
  TLM2Platfom = new cfm_tlm2platfom("TLM2Platfom");
  Target = new cfm_target("Target");
  Target_2 = new cfm_target_2("Target_2");
  Writer = new cfm_writer("Writer");
  // connections
  // model connect to relation
  Reader->p_mq_InitiatorReader(mq_InitiatorReader.p_target_socket);
  Reader->p_mq_ReaderResponse(mq_ReaderResponse.p_target_socket);
  Reader->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);
  Reader->p_ev_Sync(ev_Sync.p_target_socket);
  // model connect to relation
  Target->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);
  Target->p_ev_Sync2(ev_Sync2.p_target_socket);
  Target->p_mq_TargetWrapper(mq_TargetWrapper.p_target_socket);
  // model connect to relation
  Target_2->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);
  Target_2->p_ev_Sync3(ev_Sync3.p_target_socket);
  Target_2->p_mq_TargetRequest(mq_TargetRequest.p_target_socket);
  Target_2->p_mq_TargetResponse(mq_TargetResponse.p_target_socket);
  // model connect to relation
  Writer->p_mq_InitiatorWriter(mq_InitiatorWriter.p_target_socket);
  Writer->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);
  Writer->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);
  Writer->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);
  Writer->p_ev_Sync(ev_Sync.p_target_socket);
  Writer->p_ev_Sync2(ev_Sync2.p_target_socket);
  Writer->p_ev_Sync3(ev_Sync3.p_target_socket);
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_tlm2at::~cfm_tlm2at(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'TLM2AT destructor' algorithm generated code

  // End of 'TLM2AT destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete Reader;
  delete TLM2Platfom;
  delete Target;
  delete Target_2;
  delete Writer;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_tlm2at::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'TLM2AT pre elaboration' algorithm generated code

  // End of 'TLM2AT pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_tlm2at::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'TLM2AT post elaboration' algorithm generated code

  // End of 'TLM2AT post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_tlm2at::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'TLM2AT post simulation' algorithm generated code

  // End of 'TLM2AT post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_tlm2at::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_InitiatorReader.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_InitiatorReader.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_InitiatorReader.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_InitiatorWriter.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_InitiatorWriter.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_InitiatorWriter.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_ReaderResponse.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_ReaderResponse.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_ReaderResponse.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_ReferenceQueue.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_ReferenceQueue.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_ReferenceQueue.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_ReferenceQueue.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_ReferenceQueue.cfa_concurrency.init((cf_nonzero_count)1);
  mq_ReferenceQueue.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_ReferenceQueue.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_ReferenceQueue2.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_ReferenceQueue2.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_ReferenceQueue2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_ReferenceQueue2.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_ReferenceQueue2.cfa_concurrency.init((cf_nonzero_count)1);
  mq_ReferenceQueue2.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_ReferenceQueue2.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_ReferenceQueue3.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_ReferenceQueue3.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_ReferenceQueue3.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_ReferenceQueue3.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_ReferenceQueue3.cfa_concurrency.init((cf_nonzero_count)1);
  mq_ReferenceQueue3.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_ReferenceQueue3.cfa_receive_threshold.init((cf_nonzero_count)1);
  ev_Sync.cfa_set_time.init(cf_expr_duration(1, CF_NS));
  ev_Sync.cfa_get_time.init(cf_expr_duration(1, CF_NS));
  ev_Sync.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
  ev_Sync2.cfa_set_time.init(cf_expr_duration(1, CF_NS));
  ev_Sync2.cfa_get_time.init(cf_expr_duration(1, CF_NS));
  ev_Sync2.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
  ev_Sync3.cfa_set_time.init(cf_expr_duration(1, CF_NS));
  ev_Sync3.cfa_get_time.init(cf_expr_duration(1, CF_NS));
  ev_Sync3.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
  mq_TargetRequest.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_TargetRequest.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
  mq_TargetRequest.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_TargetResponse.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_TargetResponse.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_TargetResponse.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_TargetWrapper.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_TargetWrapper.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_TargetWrapper.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_tlm2at::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'TLM2AT initializations' algorithm generated code

  // End of 'TLM2AT initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>