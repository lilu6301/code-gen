
/*
 * \class cfm_clockgenerator
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of MyApplication generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_clockgenerator.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_myapplication
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_clockgenerator
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_clockgenerator::cfm_clockgenerator(sc_core::sc_module_name name)
cf_function(name)
, cfm_clockgenerator_dp_if()
, p_ev_BurstClock("p_ev_BurstClock")

{
	cf_function::init();



	cf_function::elab_end();
}

cfm_clockgenerator::~cfm_clockgenerator(void) {

}

void cfm_clockgenerator::cb_before_elaboration(void) {

}

void cfm_clockgenerator::cb_end_of_elaboration(void) {

}

void cfm_clockgenerator::cb_end_of_simulation(void) {

}

void cfm_clockgenerator::cb_init_attributes() {

	cfa_clock_period.init(cf_expr_duration(1, CF_US));
	cfa_clock_offset.init(cf_expr_duration(1, CF_US));
	cfa_execution_time.init(cf_expr_duration(10, CF_NS));
	cfa_do_not_start.init(false);
	cfa_affinity.init( { (int) (0) });
	cfa_priority.init((cf_count) 1);

	cfa_policy.init(CF_SCHEDULER_POLICY_FF);
	cfa_time_slice.init(cf_expr_duration(10, CF_MS));
	cfa_static_code_size.init(cf_data_size(0, CF_KBYTE));
	cfa_static_data_size.init(cf_data_size(0, CF_KBYTE));
	cfa_static_power.init(cf_power(0, CF_UW));
	cfa_dynamic_power.init(cf_power(0, CF_UW));
	cfa_cost.init(cf_cost(0, CF_USD));
	cfa_dynamic_load.init(cf_resource_load(100, CF_PERCENT));

	return;
}

void cfm_clockgenerator::cb_init_local_vars(void) {


}


