//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_backend
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_backend.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_memorycontroller
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_backend
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'BackEnd definitions' algorithm generated code

// End of 'BackEnd definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_backend ::cfm_backend()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), cfm_backend_dp_if(),
      ev_RequestCounter("RequestCounter"),
      mq_RequestInformation("RequestInformation"),
      mq_Requests2Memory("Requests2Memory"), p_mq_DDRCommand("p_mq_DDRCommand"),
      p_mq_DQs("p_mq_DQs"), p_mq_DataRead("p_mq_DataRead"),
      p_mq_MemReadRequest("p_mq_MemReadRequest"),
      p_mq_MemWriteRequest("p_mq_MemWriteRequest"),
      p_mq_WriteAck_0("p_mq_WriteAck_0"), p_mq_WriteAck_1("p_mq_WriteAck_1"),
      sv_ListRequestsPtr("ListRequestsPtr") {
  cf_function_container::init();
  // instantiation of models
  Arbitration = new cfm_arbitration("Arbitration");
  CollectRequests = new cfm_collectrequests("CollectRequests");
  DDRCommandGeneration = new cfm_ddrcommandgeneration("DDRCommandGeneration");
  ResponseForward = new cfm_responseforward("ResponseForward");
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
    sv_MemoryStatus_t *module =
        new sv_MemoryStatus_t(cf_string("MemoryStatus[%d]", i).c_str());
    CF_ASSERT(module)
    sv_MemoryStatus_vec.push_back(module);
  }
  // connections
  // model connect to relation
  Arbitration->p_sv_ListRequestsPtr(sv_ListRequestsPtr.p_target_socket);
  Arbitration->p_ev_RequestCounter(ev_RequestCounter.p_target_socket);
  Arbitration->p_mq_RequestInformation(mq_RequestInformation.p_target_socket);
  Arbitration->p_mq_Requests2Memory(mq_Requests2Memory.p_target_socket);
  // model connect to port
  Arbitration->p_mq_WriteAck(p_mq_WriteAck);
  // model connect to relation
  CollectRequests->p_sv_ListRequestsPtr(sv_ListRequestsPtr.p_target_socket);
  CollectRequests->p_ev_RequestCounter(ev_RequestCounter.p_target_socket);
  // model connect to port
  CollectRequests->p_mq_MemReadRequest(p_mq_MemReadRequest);
  CollectRequests->p_mq_MemWriteRequest(p_mq_MemWriteRequest);
  // model connect to relation
  for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
    DDRCommandGeneration->p_sv_MemoryStatus(
        sv_MemoryStatus_vec[i]->p_target_socket);
  }
  DDRCommandGeneration->p_mq_Requests2Memory(
      mq_Requests2Memory.p_target_socket);
  // model connect to port
  DDRCommandGeneration->p_mq_DDRCommand(p_mq_DDRCommand);
  // model connect to relation
  ResponseForward->p_mq_RequestInformation(
      mq_RequestInformation.p_target_socket);
  // model connect to port
  ResponseForward->p_mq_DQs(p_mq_DQs);
  ResponseForward->p_mq_DataRead(p_mq_DataRead);
  ResponseForward->p_mq_WriteAck(p_mq_WriteAck);
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_backend::~cfm_backend(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'BackEnd destructor' algorithm generated code

  // End of 'BackEnd destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete Arbitration;
  delete CollectRequests;
  delete DDRCommandGeneration;
  delete ResponseForward;
  // deconstructor for vector relation
  for (vector<sv_MemoryStatus_t *>::const_iterator vi =
           sv_MemoryStatus_vec.begin();
       vi != sv_MemoryStatus_vec.end(); vi++) {
    delete (*vi);
  }
}
//@}

/// \name pre-elaboration section
//@{
void cfm_backend::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'BackEnd pre elaboration' algorithm generated code

  // End of 'BackEnd pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_backend::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'BackEnd post elaboration' algorithm generated code

  // End of 'BackEnd post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_backend::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'BackEnd post simulation' algorithm generated code

  // End of 'BackEnd post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_backend::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  sv_ListRequestsPtr.cfa_write_time.init(cf_expr_duration(0, CF_CYCLE));
  sv_ListRequestsPtr.cfa_read_time.init(cf_expr_duration(0, CF_CYCLE));
  sv_ListRequestsPtr.cfa_semaphore.init(false);
  sv_ListRequestsPtr.cfa_concurrency.init((cf_nonzero_count)1);
  for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
    (*sv_MemoryStatus_vec[i])
        .cfa_write_time.init(cf_expr_duration(0, CF_CYCLE));
    (*sv_MemoryStatus_vec[i]).cfa_read_time.init(cf_expr_duration(0, CF_CYCLE));
    (*sv_MemoryStatus_vec[i]).cfa_semaphore.init(false);
    (*sv_MemoryStatus_vec[i]).cfa_concurrency.init((cf_nonzero_count)1);
  }
  ev_RequestCounter.cfa_set_time.init(cf_expr_duration(0, CF_CYCLE));
  ev_RequestCounter.cfa_get_time.init(cf_expr_duration(0, CF_CYCLE));
  ev_RequestCounter.cfa_event_policy.init(CF_EV_POLICY_COUNTER);
  mq_RequestInformation.cfa_send_time.init(cf_expr_duration(0, CF_CYCLE));
  mq_RequestInformation.cfa_receive_time.init(cf_expr_duration(0, CF_CYCLE));
  mq_RequestInformation.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
  mq_RequestInformation.cfa_concurrency.init((cf_nonzero_count)1);
  mq_Requests2Memory.cfa_send_time.init(cf_expr_duration(1, CF_CYCLE));
  mq_Requests2Memory.cfa_receive_time.init(cf_expr_duration(1, CF_CYCLE));
  mq_Requests2Memory.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_Requests2Memory.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_Requests2Memory.cfa_concurrency.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_backend::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'BackEnd initializations' algorithm generated code

  // End of 'BackEnd initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>