//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_applicationmodelrefinement
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ApplicationModelRefinement generated by C++
 * Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_applicationmodelrefinement.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'ApplicationModelRefinement definitions' algorithm generated code

// End of 'ApplicationModelRefinement definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_applicationmodelrefinement ::cfm_applicationmodelrefinement()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_application(name), cfm_applicationmodelrefinement_dp_if(),
      mq_Ack("Ack"), mq_Msg("Msg") {
  cf_application::init();
  // instantiation of models
  Producer = new cfm_producer("Producer");
  Receiver = new cfm_receiver("Receiver");
  // connections
  // model connect to relation
  Producer->p_mq_Ack(mq_Ack.p_target_socket);
  Producer->p_mq_Msg(mq_Msg.p_target_socket);
  // model connect to relation
  Receiver->p_mq_Ack(mq_Ack.p_target_socket);
  Receiver->p_mq_Msg(mq_Msg.p_target_socket);
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_applicationmodelrefinement::~cfm_applicationmodelrefinement(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ApplicationModelRefinement destructor' algorithm generated code

  // End of 'ApplicationModelRefinement destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete Producer;
  delete Receiver;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_applicationmodelrefinement::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ApplicationModelRefinement pre elaboration' algorithm generated
  // code

  // End of 'ApplicationModelRefinement pre elaboration' algorithm generated
  // code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_applicationmodelrefinement::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ApplicationModelRefinement post elaboration' algorithm generated
  // code

  // End of 'ApplicationModelRefinement post elaboration' algorithm generated
  // code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_applicationmodelrefinement::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ApplicationModelRefinement post simulation' algorithm generated
  // code
  if (TotalNbMsg != 0) {
    cf_trace_report("Total number of messages : %i", TotalNbMsg);
    cf_trace_report("Average data size : %f bytes",
                    (float)TotalDataSize.to_scalar(CF_BYTE) /
                        (float)TotalNbMsg);
    cf_trace_report("AverageLatency = %f ns",
                    (float)AverageLatency.to_scalar(CF_NS) / (float)TotalNbMsg);
    AverageThroughput = cf_dt::cf_throughput(TotalDataSize, AverageLatency);
    cf_trace_report("AverageThroughput = %f MBps",
                    (float)AverageThroughput.to_scalar(CF_MBYPS) /
                        (float)TotalNbMsg);
  }

  cf_trace_gui_f_param("AverageLatency",
                       (float)AverageLatency.to_scalar(CF_NS) /
                           (float)TotalNbMsg);
  cf_trace_gui_f_param("AverageThroughput",
                       (float)AverageThroughput.to_scalar(CF_MBYPS) /
                           (float)TotalNbMsg);
  // End of 'ApplicationModelRefinement post simulation' algorithm generated
  // code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_applicationmodelrefinement::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_Ack.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_Ack.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_Ack.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_Ack.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_Ack.cfa_concurrency.init((cf_nonzero_count)1);
  mq_Ack.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_Ack.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_Msg.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_Msg.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_Msg.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_Msg.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_Msg.cfa_concurrency.init((cf_nonzero_count)1);
  mq_Msg.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_Msg.cfa_receive_threshold.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_applicationmodelrefinement::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ApplicationModelRefinement initializations' algorithm generated
  // code

  // End of 'ApplicationModelRefinement initializations' algorithm generated
  // code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>