
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_ddrmemory
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_ddrmemory.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'DDRMemory definitions' algorithm generated code

// End of 'DDRMemory definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_ddrmemory ::cfm_ddrmemory()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_application(name), mq_ARADDRchn("ARADDRchn"), mq_AWADDRchn("AWADDRchn"),
      mq_BRESPchn("BRESPchn"), mq_RDATAchn("RDATAchn"), mq_WDATAchn("WDATAchn") {
  cf_application::init();
  // instantiation of models
  ClientSide = new cfm_clientside("ClientSide");
  Target = new cfm_target("Target");
  // connections
  // model connect to relation
  ClientSide->p_mq_ARADDRchn(mq_ARADDRchn.p_target_socket);
  ClientSide->p_mq_AWADDRchn(mq_AWADDRchn.p_target_socket);
  ClientSide->p_mq_BRESPchn(mq_BRESPchn.p_target_socket);
  ClientSide->p_mq_RDATAchn(mq_RDATAchn.p_target_socket);
  ClientSide->p_mq_WDATAchn(mq_WDATAchn.p_target_socket);
  // model connect to relation
  Target->p_mq_ARADDRchn(mq_ARADDRchn.p_target_socket);
  Target->p_mq_AWADDRchn(mq_AWADDRchn.p_target_socket);
  Target->p_mq_BRESPchn(mq_BRESPchn.p_target_socket);
  Target->p_mq_RDATAchn(mq_RDATAchn.p_target_socket);
  Target->p_mq_WDATAchn(mq_WDATAchn.p_target_socket);
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_ddrmemory::~cfm_ddrmemory(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'DDRMemory destructor' algorithm generated code

  // End of 'DDRMemory destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete ClientSide;
  delete Target;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_ddrmemory::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'DDRMemory pre elaboration' algorithm generated code

  // End of 'DDRMemory pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_ddrmemory::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'DDRMemory post elaboration' algorithm generated code

  // End of 'DDRMemory post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_ddrmemory::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'DDRMemory post simulation' algorithm generated code

  // End of 'DDRMemory post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_ddrmemory::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_ARADDRchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_ARADDRchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
  mq_ARADDRchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_ARADDRchn.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_ARADDRchn.cfa_concurrency.init((cf_nonzero_count)1);
  mq_ARADDRchn.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_ARADDRchn.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_AWADDRchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_AWADDRchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
  mq_AWADDRchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_AWADDRchn.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_AWADDRchn.cfa_concurrency.init((cf_nonzero_count)1);
  mq_AWADDRchn.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_AWADDRchn.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_BRESPchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_BRESPchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
  mq_BRESPchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_BRESPchn.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_BRESPchn.cfa_concurrency.init((cf_nonzero_count)1);
  mq_BRESPchn.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_BRESPchn.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_RDATAchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_RDATAchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
  mq_RDATAchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_RDATAchn.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_RDATAchn.cfa_concurrency.init((cf_nonzero_count)1);
  mq_RDATAchn.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_RDATAchn.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_WDATAchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
  mq_WDATAchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
  mq_WDATAchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_WDATAchn.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_WDATAchn.cfa_concurrency.init((cf_nonzero_count)1);
  mq_WDATAchn.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_WDATAchn.cfa_receive_threshold.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_ddrmemory::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'DDRMemory initializations' algorithm generated code

  // End of 'DDRMemory initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>