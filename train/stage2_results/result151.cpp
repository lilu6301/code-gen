
/*
 * \class cfm_ddrmemory
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_ddrmemory.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_ddrmemory::cfm_ddrmemory(sc_core::sc_module_name name)
cf_application(name)
, mq_ARADDRchn("ARADDRchn"
)
, mq_BRESPchn("BRESPchn"
)
, mq_CDATAchn("CDATAchn"
)
, mq_DSKchn("DSKchn"
)
, mq_NWDATAchn("NWDATAchn"
)
, mq_RDATAchn("RDATAchn"
)
, mq_WDATAchn("WDATAchn"
)

{
	cf_application::init();
	ClientSide = new cfm_clientside
	("ClientSide");
	Target = new cfm_target
	("Target");

	ClientSide->p_mq_ARADDRchn
	(mq_ARADDRchn
			.p_target_socket
	);
	ClientSide->p_mq_BRESPchn
	(mq_BRESPchn
			.p_target_socket
	);
	ClientSide->p_mq_CDATAchn
	(mq_CDATAchn
			.p_target_socket
	);
	ClientSide->p_mq_DSKchn
	(mq_DSKchn
			.p_target_socket
	);
	ClientSide->p_mq_NWDATAchn
	(mq_NWDATAchn
			.p_target_socket
	);
	ClientSide->p_mq_RDATAchn
	(mq_RDATAchn
			.p_target_socket
	);
	ClientSide->p_mq_WDATAchn
	(mq_WDATAchn
			.p_target_socket
	);

	Target->p_mq_ARADDRchn
	(mq_ARADDRchn
			.p_target_socket
	);
	Target->p_mq_BRESPchn
	(mq_BRESPchn
			.p_target_socket
	);
	Target->p_mq_CDATAchn
	(mq_CDATAchn
			.p_target_socket
	);
	Target->p_mq_DSKchn
	(mq_DSKchn
			.p_target_socket
	);
	Target->p_mq_NWDATAchn
	(mq_NWDATAchn
			.p_target_socket
	);
	Target->p_mq_RDATAchn
	(mq_RDATAchn
			.p_target_socket
	);
	Target->p_mq_WDATAchn
	(mq_WDATAchn
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_ddrmemory::~cfm_ddrmemory(void) {

	delete ClientSide;	///ddd
	delete Target;	///ddd
}

void cfm_ddrmemory::cb_before_elaboration(void) {

}

void cfm_ddrmemory::cb_end_of_elaboration(void) {

}

void cfm_ddrmemory::cb_end_of_simulation(void) {

}

void cfm_ddrmemory::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_ARADDRchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_ARADDRchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_ARADDRchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_ARADDRchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_ARADDRchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_ARADDRchn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_BRESPchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_BRESPchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_BRESPchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_BRESPchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_BRESPchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_BRESPchn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_CDATAchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_CDATAchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_CDATAchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_CDATAchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_CDATAchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_CDATAchn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_DSKchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_DSKchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_DSKchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_DSKchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_DSKchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_DSKchn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_NWDATAchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_NWDATAchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_NWDATAchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_NWDATAchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_NWDATAchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_NWDATAchn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_RDATAchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_RDATAchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_RDATAchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_RDATAchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_RDATAchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_RDATAchn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_WDATAchn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_WDATAchn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_WDATAchn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_WDATAchn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_WDATAchn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_WDATAchn.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_ddrmemory::cb_init_local_vars(void) {


}


