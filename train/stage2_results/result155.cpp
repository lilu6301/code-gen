
/*
 * \class cfm_target
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_target.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_target
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_target::cfm_target(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_target_dp_if()

{
	cf_function_container::init();

	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		cfm_memory* module=new cfm_memory(cf_string("Memory[%d]", i).c_str());
		CF_ASSERT( module )
		Memory_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		cfm_memorycontroller* module=new cfm_memorycontroller(cf_string("MemoryController[%d]", i).c_str());
		CF_ASSERT( module )
		MemoryController_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		p_mq_RDATAchn_t* module=new p_mq_RDATAchn_t(cf_string("p_mq_RDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_RDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		p_mq_ARADDRchn_t* module=new p_mq_ARADDRchn_t(cf_string("p_mq_ARADDRchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_ARADDRchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		p_mq_BRESPchn_t* module=new p_mq_BRESPchn_t(cf_string("p_mq_BRESPchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_BRESPchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		p_mq_WDATAchn_t* module=new p_mq_WDATAchn_t(cf_string("p_mq_WDATAchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_WDATAchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		p_mq_AWADDRchn_t* module=new p_mq_AWADDRchn_t(cf_string("p_mq_AWADDRchn[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_AWADDRchn_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		mq_DDRCommand_t* module=new mq_DDRCommand_t(cf_string("DDRCommand[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DDRCommand_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++)
	{
		mq_DQs_t* module=new mq_DQs_t(cf_string("DQs[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DQs_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		cfm_memory* module
		=Memory_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(M_Nbr + 1); j++) {
				module->p_mq_DQs
				(mq_DQs_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(M_Nbr + 1); j++) {
				module->p_mq_DDRCommand
				(mq_DDRCommand_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_RDATAchn
			((*p_mq_RDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_ARADDRchn
			((*p_mq_ARADDRchn_vec[
							i
							]
					)
			);
			module->p_mq_BRESPchn
			((*p_mq_BRESPchn_vec[
							i
							]
					)
			);
			module->p_mq_WDATAchn
			((*p_mq_WDATAchn_vec[
							i
							]
					)
			);
			module->p_mq_AWADDRchn
			((*p_mq_AWADDRchn_vec[
							i
							]
					)
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		cfm_memorycontroller* module
		=MemoryController_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(M_Nbr + 1); j++) {
				module->p_mq_DQs
				(mq_DQs_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(M_Nbr + 1); j++) {
				module->p_mq_DDRCommand
				(mq_DDRCommand_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_ARADDRchn
			((*p_mq_ARADDRchn_vec[
							i
							]
					)
			);
			module->p_mq_BRESPchn
			((*p_mq_BRESPchn_vec[
							i
							]
					)
			);
		}
	}



	cf_function_container::elab_end();
}

cfm_target::~cfm_target(void) {

	for (vector<cfm_memory*>::const_iterator vi = Memory_vec.begin(); vi != Memory_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_memorycontroller*>::const_iterator vi = MemoryController_vec.begin(); vi != MemoryController_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_RDATAchn_t*>::const_iterator vi = p_mq_RDATAchn_vec.begin(); vi != p_mq_RDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_ARADDRchn_t*>::const_iterator vi = p_mq_ARADDRchn_vec.begin(); vi != p_mq_ARADDRchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_BRESPchn_t*>::const_iterator vi = p_mq_BRESPchn_vec.begin(); vi != p_mq_BRESPchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_WDATAchn_t*>::const_iterator vi = p_mq_WDATAchn_vec.begin(); vi != p_mq_WDATAchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_AWADDRchn_t*>::const_iterator vi = p_mq_AWADDRchn_vec.begin(); vi != p_mq_AWADDRchn_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DDRCommand_t*>::const_iterator vi = mq_DDRCommand_vec.begin(); vi != mq_DDRCommand_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DQs_t*>::const_iterator vi = mq_DQs_vec.begin(); vi != mq_DQs_vec.end(); vi++) {
		delete (*vi);
	}
}

void cfm_target::cb_before_elaboration(void) {

}

void cfm_target::cb_end_of_elaboration(void) {

}

void cfm_target::cb_end_of_simulation(void) {

}

void cfm_target::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		(*mq_DDRCommand_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DDRCommand_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DDRCommand_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DDRCommand_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DDRCommand_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DDRCommand_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nbr + 1); i++) {
		(*mq_DQs_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DQs_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DQs_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DQs_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_target::cb_init_local_vars(void) {


}


