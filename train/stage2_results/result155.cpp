
/*
 * \class cfm_target
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of memss_ref generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_target.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_memsub
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_target
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_target::cfm_target(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_target_dp_if()
, p_mq_RDATAchn("p_mq_RDATAchn")
, p_mq_ARADDRchn("p_mq_ARADDRchn")
, p_mq_BRESPchn("p_mq_BRESPchn")
, p_mq_WDATAchn("p_mq_WDATAchn")
, p_mq_AWADDRchn("p_mq_AWADDRchn")

{
	cf_function_container::init();
	MemoryController = new cfm_memorycontroller
	("MemoryController");

	for (cf_count i = 0; i < (cf_count)(M_Nb + 1); i++)
	{
		cfm_memory* module=new cfm_memory(cf_string("Memory[%d]", i).c_str());
		CF_ASSERT( module )
		Memory_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nb + 1); i++)
	{
		mq_DDRCommand_t* module=new mq_DDRCommand_t(cf_string("DDRCommand[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DDRCommand_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nb + 1); i++)
	{
		mq_DQs_t* module=new mq_DQs_t(cf_string("DQs[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DQs_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nb + 1); i++) {
		cfm_memory* module
		=Memory_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(M_Nb + 1); j++) {
				module->p_mq_DQs
				(mq_DQs_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(M_Nb + 1); j++) {
				module->p_mq_DDRCommand
				(mq_DDRCommand_vec[j]
						->p_target_socket
				);
			}
		}
	}

	MemoryController->p_mq_RDATAchn
	(p_mq_RDATAchn
	);
	MemoryController->p_mq_ARADDRchn
	(p_mq_ARADDRchn
	);
	MemoryController->p_mq_BRESPchn
	(p_mq_BRESPchn
	);
	MemoryController->p_mq_WDATAchn
	(p_mq_WDATAchn
	);
	MemoryController->p_mq_AWADDRchn
	(p_mq_AWADDRchn
	);



	cf_function_container::elab_end();
}

cfm_target::~cfm_target(void) {

	for (vector<cfm_memory*>::const_iterator vi = Memory_vec.begin(); vi != Memory_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DDRCommand_t*>::const_iterator vi = mq_DDRCommand_vec.begin(); vi != mq_DDRCommand_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DQs_t*>::const_iterator vi = mq_DQs_vec.begin(); vi != mq_DQs_vec.end(); vi++) {
		delete (*vi);
	}
	delete MemoryController;	///ddd
}

void cfm_target::cb_before_elaboration(void) {

}

void cfm_target::cb_end_of_elaboration(void) {

}

void cfm_target::cb_end_of_simulation(void) {

}

void cfm_target::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(M_Nb + 1); i++) {
		(*mq_DDRCommand_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DDRCommand_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DDRCommand_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DDRCommand_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DDRCommand_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DDRCommand_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(M_Nb + 1); i++) {
		(*mq_DQs_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DQs_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DQs_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DQs_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DQs_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_target::cb_init_local_vars(void) {


}


