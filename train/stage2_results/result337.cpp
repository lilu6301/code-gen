
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_bt_system
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_bt_system.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_bluetooth_ips
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_bt_system
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'BT_System definitions' algorithm generated code

//End of 'BT_System definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_bt_system::cfm_bt_system(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_bt_system_dp_if(), p_mq_BaseBand_Out(
				"p_mq_BaseBand_Out"), p_mq_BaseBand_In("p_mq_BaseBand_In"), p_ev_startEv(
				"p_ev_startEv"), mq_Data("Data"), mq_DataIn("DataIn"), mq_ReadWrite(
				"ReadWrite"), ev_WrOK("WrOK") {
	cf_function_container::init();
	FileSystem = new cfm_filesystem("FileSystem");
	BT_Stack = new cfm_bt_stack("BT_Stack");

	// connections
	FileSystem->p_mq_DataIn(mq_DataIn.p_target_socket);
	FileSystem->p_mq_ReadWrite(mq_ReadWrite.p_target_socket);
	FileSystem->p_ev_WrOK(ev_WrOK.p_target_socket);
	FileSystem->p_mq_DataOut(mq_DataOut.p_target_socket);

	BT_Stack->p_mq_DataIn(mq_DataIn.p_target_socket);
	BT_Stack->p_mq_ReadWrite(mq_ReadWrite.p_target_socket);
	BT_Stack->p_ev_WrOK(ev_WrOK.p_target_socket);
	BT_Stack->p_mq_BaseBand_In(p_mq_BaseBand_In);
	BT_Stack->p_mq_BaseBand_Out(p_mq_BaseBand_Out);
	BT_Stack->p_ev_startEv(p_ev_startEv);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BT_System constructor' algorithm generated code

	//End of 'BT_System constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_bt_system::~cfm_bt_system(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BT_System destructor' algorithm generated code

	//End of 'BT_System destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete FileSystem;
	delete BT_Stack;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_bt_system::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BT_System pre elaboration' algorithm generated code

	//End of 'BT_System pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_bt_system::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BT_System post elaboration' algorithm generated code

	//End of 'BT_System post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_bt_system::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BT_System post simulation' algorithm generated code

	//End of 'BT_System post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_bt_system::cb_init_attributes() {

// initialize function attributes
// initialize relations attributes
	mq_Data.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	mq_Data.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	mq_Data.cfa_semaphore.init(false);
	mq_Data.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_DataIn.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	mq_DataIn.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	mq_DataIn.cfa_semaphore.init(false);
	mq_DataIn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_ReadWrite.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	mq_ReadWrite.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	mq_ReadWrite.cfa_semaphore.init(false);
	mq_ReadWrite.cfa_concurrency.init((cf_nonzero_count) 1);
	ev_WrOK.cfa_set_time.init(cf_expr_duration(1, CF_NS));
	ev_WrOK.cfa_get_time.init(cf_expr_duration(1, CF_NS));
	ev_WrOK.cfa_event_policy.init(CF_EV_POLICY_COUNTER);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_bt_system::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'BT_System initializations' algorithm generated code

	//End of 'BT_System initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>