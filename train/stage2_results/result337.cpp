
/*
 * \class cfm_bt_system
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of base_die_ref generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_bt_system.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_base_die
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_bt_system
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_bt_system::cfm_bt_system(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_bt_system_dp_if()
, p_mq_BaseBand_Out("p_mq_BaseBand_Out")
, p_mq_BaseBand_In("p_mq_BaseBand_In")
, p_ev_startEv("p_ev_startEv")
, mq_DataIn("DataIn"
)
, mq_DataOut("DataOut"
)
, sv_Data("Data"
)
, ev_WrOK("WrOK"
)
, mq_ReadWrite("ReadWrite"
)

{
	cf_function_container::init();
	FileSystem = new cfm_file_system
	("FileSystem");
	BT_Stack = new cfm_bt_stack
	("BT_Stack");

	FileSystem->p_mq_DataIn
	(mq_DataIn
			.p_target_socket
	);
	FileSystem->p_mq_DataOut
	(mq_DataOut
			.p_target_socket
	);
	FileSystem->p_sv_Data
	(sv_Data
			.p_target_socket
	);
	FileSystem->p_ev_WrOK
	(ev_WrOK
			.p_target_socket
	);
	FileSystem->p_mq_ReadWrite
	(mq_ReadWrite
			.p_target_socket
	);

	BT_Stack->p_mq_BaseBand_In
	(p_mq_BaseBand_In
	);
	BT_Stack->p_mq_BaseBand_Out
	(p_mq_BaseBand_Out
	);
	BT_Stack->p_ev_startEv
	(p_ev_startEv
	);
	BT_Stack->p_mq_DataIn
	(mq_DataIn
			.p_target_socket
	);
	BT_Stack->p_mq_DataOut
	(mq_DataOut
			.p_target_socket
	);
	BT_Stack->p_sv_Data
	(sv_Data
			.p_target_socket
	);
	BT_Stack->p_ev_WrOK
	(ev_WrOK
			.p_target_socket
	);
	BT_Stack->p_mq_ReadWrite
	(mq_ReadWrite
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_bt_system::~cfm_bt_system(void) {

	delete FileSystem;	///ddd
	delete BT_Stack;	///ddd
}

void cfm_bt_system::cb_before_elaboration(void) {

}

void cfm_bt_system::cb_end_of_elaboration(void) {

}

void cfm_bt_system::cb_end_of_simulation(void) {

}

void cfm_bt_system::cb_init_attributes() {

	mq_DataIn.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_DataIn.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_DataIn.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_DataIn.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_DataIn.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_DataIn.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_DataOut.cfa_send_time.init(cf_expr_duration(0, CF_NS));
	mq_DataOut.cfa_receive_time.init(cf_expr_duration(0, CF_NS));
	mq_DataOut.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_DataOut.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_DataOut.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_DataOut.cfa_receive_threshold.init((cf_nonzero_count) 1);
	sv_Data.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	sv_Data.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	sv_Data.cfa_semaphore.init(false);
	sv_Data.cfa_concurrency.init((cf_nonzero_count) 1);
	ev_WrOK.cfa_set_time.init(cf_expr_duration(1, CF_NS));
	ev_WrOK.cfa_get_time.init(cf_expr_duration(1, CF_NS));
	ev_WrOK.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
	mq_ReadWrite.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_ReadWrite.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_ReadWrite.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
	mq_ReadWrite.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_ReadWrite.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_ReadWrite.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_bt_system::cb_init_local_vars(void) {


}


