
/*!
 * \class cfm_testbench
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CompleteDevice generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_COMPLETEDEVICE_TESTBENCH
#define COFS_MODEL_COMPLETEDEVICE_TESTBENCH

#include "cfm_completedevice_global.h"
#include "cfm_completedevice_global_types.h"
#include "cofluent.h"
#include "dp/cfm_testbench_dp_if.h"
#include "dt/cft_defframe.h"

#include "mci/cfm_dpv.h"


class cfm_testbench: public cf_core::cf_function, public cfm_testbench_dp_if {
public:

	typedef cf_core::cf_mci_port<cfm_dpv> dpv_t;
	typedef cf_core::cf_ev_initiator_socket<cfm_testbench> p_ev_newFrame_t;
	typedef cf_core::cf_sv_initiator_socket<cfm_testbench, cft_defframe> p_sv_inputStream_t;
	typedef cf_core::cf_sv_initiator_socket<cfm_testbench, cft_defframe> p_sv_outputStream_t;

	cfm_testbench(sc_core::sc_module_name name);

	virtual ~cfm_testbench(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	dpv_t dpv;
	p_ev_newFrame_t p_ev_newFrame;
	p_sv_inputStream_t p_sv_inputStream;
	p_sv_outputStream_t p_sv_outputStream;

protected:
	void cb_init_attributes(void);
	void cb_init_local_vars(void);


	/* Register address definition */
#define PROCESSED_FRAME_COUNT_REGISTER_ADDR 0x200
#define PROCESSING_MODE_REGISTER_ADDR 0x100

	DefFrame inputFrame, outputFrame;
	std::string movieInputFile;
	int ProducerNbPicture;
	int ConsumerNbPicture;
	FILE* movieInputFile_f;
	int VideoFrameNumber;
	int new_mode;
	int numread;

};

#endif // COFS_MODEL_COMPLETEDEVICE_TESTBENCH

