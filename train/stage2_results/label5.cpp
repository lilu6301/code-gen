//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_networks
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++
 * Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_networks.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_softwaredefinedradioapp
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_networks
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'Networks definitions' algorithm generated code

// End of 'Networks definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_networks : cf_function_container(name),
               cfm_networks_dp_if(),
               ev_BurstClock("BurstClock"),
               mq_VideoNet("VideoNet"),
               p_mq_NetToDVB("p_mq_NetToDVB"),
               p_mq_NetToUMTS("p_mq_NetToUMTS"),
               p_mq_UMTSToNet("p_mq_UMTSToNet"),
               sv_VideoFiles("VideoFiles") {
  cf_function_container::init();
  // instantiation of models
  BroadcastNetwork = new cfm_broadcastnetwork("BroadcastNetwork");
  ClockGenerator = new cfm_clockgenerator("ClockGenerator");
  InteractiveNetwork = new cfm_interactivenetwork("InteractiveNetwork");
  // connections
  BroadcastNetwork->p_ev_BurstClock(ev_BurstClock);
  BroadcastNetwork->p_sv_VideoFiles(sv_VideoFiles);
  BroadcastNetwork->p_mq_VideoNet(mq_VideoNet);
BroadcastNetwork->p_mq_NetToDVB((p_mq_NetToDVB);
ClockGenerator->p_ev_BurstClock(ev_BurstClock);
InteractiveNetwork->p_sv_VideoFiles(sv_VideoFiles);
InteractiveNetwork->p_mq_VideoNet(mq_VideoNet);
InteractiveNetwork->p_mq_NetToUMTS((p_mq_NetToUMTS);
InteractiveNetwork->p_mq_UMTSToNet((p_mq_UMTSToNet);
	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_networks::~cfm_networks(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Networks destructor' algorithm generated code

  // End of 'Networks destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete BroadcastNetwork;
  delete ClockGenerator;
  delete InteractiveNetwork;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_networks::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Networks pre elaboration' algorithm generated code

  // End of 'Networks pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_networks::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Networks post elaboration' algorithm generated code

  // End of 'Networks post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_networks::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Networks post simulation' algorithm generated code

  // End of 'Networks post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_networks::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  ev_BurstClock.cfa_set_time.init(cf_expr_duration(0, CF_MS));
  ev_BurstClock.cfa_get_time.init(cf_expr_duration(0, CF_MS));
  ev_BurstClock.cfa_event_policy.init(CF_EV_POLICY_FUGITIVE);
  sv_VideoFiles.cfa_write_time.init(cf_expr_duration(10, CF_MS));
  sv_VideoFiles.cfa_read_time.init(cf_expr_duration(10, CF_MS));
  sv_VideoFiles.cfa_semaphore.init(false);
  sv_VideoFiles.cfa_concurrency.init((cf_nonzero_count)1);
  mq_VideoNet.cfa_send_time.init(cf_expr_duration(10, CF_MS));
  mq_VideoNet.cfa_receive_time.init(cf_expr_duration(10, CF_MS));
  mq_VideoNet.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_VideoNet.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_VideoNet.cfa_concurrency.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_networks::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Networks initializations' algorithm generated code
  sv_VideoFiles.init_value(initSem);
  // End of 'Networks initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>