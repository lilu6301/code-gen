/*
 * \class cfm_networks
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_networks.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_softwaredefinedradioapp
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_networks
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_networks::cfm_networks(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_networks_dp_if()
, p_mq_NetToDVB("p_mq_NetToDVB")
, p_mq_NetToUMTS("p_mq_NetToUMTS")
, p_mq_UMTSToNet("p_mq_UMTSToNet")
, ev_BurstClock("BurstClock"
)
, sv_VideoFiles("VideoFiles"
)
, mq_VideoNet("VideoNet"
)

{
	cf_function_container::init();
	BroadcastNetwork = new cfm_broadcastnetwork
	("BroadcastNetwork");
	ClockGenerator = new cfm_clockgenerator
	("ClockGenerator");
	InteractiveNetwork = new cfm_interactivenetwork
	("InteractiveNetwork");

	BroadcastNetwork->p_mq_NetToDVB
	(p_mq_NetToDVB
	);
	BroadcastNetwork->p_ev_BurstClock
	(ev_BurstClock
			.p_target_socket
	);
	BroadcastNetwork->p_sv_VideoFiles
	(sv_VideoFiles
			.p_target_socket
	);
	BroadcastNetwork->p_mq_VideoNet
	(mq_VideoNet
			.p_target_socket
	);

	ClockGenerator->p_ev_BurstClock
	(ev_BurstClock
			.p_target_socket
	);

	InteractiveNetwork->p_sv_VideoFiles
	(sv_VideoFiles
			.p_target_socket
	);
	InteractiveNetwork->p_mq_VideoNet
	(mq_VideoNet
			.p_target_socket
	);
	InteractiveNetwork->p_mq_NetToUMTS
	(p_mq_NetToUMTS
	);
	InteractiveNetwork->p_mq_UMTSToNet
	(p_mq_UMTSToNet
	);



	cf_function_container::elab_end();
}

cfm_networks::~cfm_networks(void) {

	delete BroadcastNetwork;	///ddd
	delete ClockGenerator;	///ddd
	delete InteractiveNetwork;	///ddd
}

void cfm_networks::cb_before_elaboration(void) {

}

void cfm_networks::cb_end_of_elaboration(void) {

}

void cfm_networks::cb_end_of_simulation(void) {

}

void cfm_networks::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	ev_BurstClock.cfa_set_time.init(cf_expr_duration(0, CF_MS));
	ev_BurstClock.cfa_get_time.init(cf_expr_duration(0, CF_MS));
	ev_BurstClock.cfa_event_policy.init(CF_EV_POLICY_FUGITIVE);
	sv_VideoFiles.cfa_write_time.init(cf_expr_duration(10, CF_MS));
	sv_VideoFiles.cfa_read_time.init(cf_expr_duration(10, CF_MS));
	sv_VideoFiles.cfa_semaphore.init(false);
	sv_VideoFiles.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_VideoNet.cfa_send_time.init(cf_expr_duration(10, CF_MS));
	mq_VideoNet.cfa_receive_time.init(cf_expr_duration(10, CF_MS));
	mq_VideoNet.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_VideoNet.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_VideoNet.cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}

void cfm_networks::cb_init_local_vars(void) {

	sv_VideoFiles.init_value(initSem);
}


