
/*
 * \class cfm_memory
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_memory.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ddrmemory
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_memory
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_memory::cfm_memory(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_memory_dp_if()
, p_mq_DQs("p_mq_DQs")
, p_mq_DDRCommand("p_mq_DDRCommand")

{
	cf_function_container::init();
	BankDuxer = new cfm_bankdmuxer
	("BankDuxer");

	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++)
	{
		cfm_memorycommandexecution* module=new cfm_memorycommandexecution(cf_string("MemoryCommandExecution[%d]", i).c_str());
		CF_ASSERT( module )
		MemoryCommandExecution_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++)
	{
		mq_DDRAction_t* module=new mq_DDRAction_t(cf_string("DDRAction[%d]", i).c_str());
		CF_ASSERT( module )
		mq_DDRAction_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		cfm_memorycommandexecution* module
		=MemoryCommandExecution_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(NbBanksperMemory + 1); j++) {
				module->p_mq_DDRAction
				(mq_DDRAction_vec[j]
						->p_target_socket
				);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		BankDuxer->p_mq_DDRAction
		(mq_DDRAction_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		BankDuxer->p_mq_DDRCommand
		(p_mq_DDRCommand
		);
	}



	cf_function_container::elab_end();
}

cfm_memory::~cfm_memory(void) {

	for (vector<cfm_memorycommandexecution*>::const_iterator vi = MemoryCommandExecution_vec.begin(); vi != MemoryCommandExecution_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_DDRAction_t*>::const_iterator vi = mq_DDRAction_vec.begin(); vi != mq_DDRAction_vec.end(); vi++) {
		delete (*vi);
	}
	delete BankDuxer;	///ddd
}

void cfm_memory::cb_before_elaboration(void) {

}

void cfm_memory::cb_end_of_elaboration(void) {

}

void cfm_memory::cb_end_of_simulation(void) {

}

void cfm_memory::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(NbBanksperMemory + 1); i++) {
		(*mq_DDRAction_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DDRAction_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_DDRAction_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_INFINITE);
		(*mq_DDRAction_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_DDRAction_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_DDRAction_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_memory::cb_init_local_vars(void) {


}


