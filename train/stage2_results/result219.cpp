
/*
 * \class cfm_rack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_rack.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_serverroom
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_rack
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_rack::cfm_rack(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_rack_dp_if()
, p_mq_MsgQToRack("p_mq_MsgQToRack")
, p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch")

{
	cf_function_container::init();
	ToRSwitch = new cfm_torswitch
	("ToRSwitch");

	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		cfm_server* module=new cfm_server(cf_string("Server[%d]", i).c_str());
		CF_ASSERT( module )
		Server_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		mq_MsgQServerToToRSwitch_t* module=new mq_MsgQServerToToRSwitch_t(cf_string("MsgQServerToToRSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQServerToToRSwitch_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		mq_MsgQToServer_t* module=new mq_MsgQToServer_t(cf_string("MsgQToServer[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQToServer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		cfm_server* module
		=Server_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
				module->p_mq_MsgQServerToToRSwitch
				(mq_MsgQServerToToRSwitch_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
				module->p_mq_MsgQToServer
				(mq_MsgQToServer_vec[j]
						->p_target_socket
				);
			}
		}
	}

	ToRSwitch->p_mq_MsgQToRack
	(p_mq_MsgQToRack
	);
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)ToRSwitch
				->p_mq_MsgQServerToToRSwitch_vec.size(); j++)
		{
			cfm_torswitch
			::p_mq_MsgQServerToToRSwitch_t* port= ToRSwitch
			->p_mq_MsgQServerToToRSwitch_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MsgQServerToToRSwitch_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)ToRSwitch
				->p_mq_MsgQToServer_vec.size(); j++)
		{
			cfm_torswitch
			::p_mq_MsgQToServer_t* port= ToRSwitch
			->p_mq_MsgQToServer_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MsgQToServer_vec[i]
						->p_target_socket
				);
			}
		}
	}
	ToRSwitch->p_mq_MsgQToAggSwitch
	(p_mq_MsgQToAggSwitch
	);



	cf_function_container::elab_end();
}

cfm_rack::~cfm_rack(void) {

	for (vector<cfm_server*>::const_iterator vi = Server_vec.begin(); vi != Server_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQServerToToRSwitch_t*>::const_iterator vi = mq_MsgQServerToToRSwitch_vec.begin(); vi != mq_MsgQServerToToRSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQToServer_t*>::const_iterator vi = mq_MsgQToServer_vec.begin(); vi != mq_MsgQToServer_vec.end(); vi++) {
		delete (*vi);
	}
	delete ToRSwitch;	///ddd
}

void cfm_rack::cb_before_elaboration(void) {

}

void cfm_rack::cb_end_of_elaboration(void) {

}

void cfm_rack::cb_end_of_simulation(void) {

}

void cfm_rack::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpServerToToRSwitchBufferSize);
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQServerToToRSwitch_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		(*mq_MsgQToServer_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQToServer_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQToServer_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQToServer_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpServerToToRSwitchBufferSize);
		(*mq_MsgQToServer_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQToServer_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQToServer_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_rack::cb_init_local_vars(void) {


}


