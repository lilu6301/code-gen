@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_rack
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_rack.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Rack definitions' algorithm generated code

//End of 'Rack definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_rack ::cfm_rack() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),p_mq_MsgQServerToToRSwitch("p_mq_MsgQServerToToRSwitch"),p_mq_MsgQToServer("p_mq_MsgQToServer"){
cf_function_container::init();
//instantiation of models
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		cfm_server* module = new cfm_server(
				cf_string("Server[%d]", i).c_str());
		CF_ASSERT (module)
		Server_vec.push_back(module);
	}
ToRSwitch = new cfm_torswitch("ToRSwitch");
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		MessageQueue<cft_DefPacket> mq_MsgQServerToToRSwitch_t;
		CF_ASSERT (mq_MsgQServerToToRSwitch_t)
		mq_MsgQServerToToRSwitch_vec.push_back(mq_MsgQServerToToRSwitch_t);
	}
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		MessageQueue<cft_DefPacket> mq_MsgQToServer_t;
		CF_ASSERT (mq_MsgQToServer_t)
		mq_MsgQToServer_vec.push_back(mq_MsgQToServer_t);
	}
//connections
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		cfm_server* module = Server_vec[i];
		if (module!= nullptr) {
//model connect to relation
for (cf_count j = 0; j < (cf_count)( dpServerPerRackNb + 1); j++) {
				module->p_mq_MsgQServerToToRSwitch(mq_MsgQServerToToRSwitch_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( dpServerPerRackNb + 1); j++) {
				module->p_mq_MsgQToServer(mq_MsgQToServer_vec[j]->p_target_socket);
			}
}
}
//model connect to relation
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		ToRSwitch->p_mq_MsgQServerToToRSwitch(mq_MsgQServerToToRSwitch_vec[i]->p_target_socket);
	}
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		ToRSwitch->p_mq_MsgQToServer(mq_MsgQToServer_vec[i]->p_target_socket);
	}
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_rack::~cfm_rack(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Rack destructor' algorithm generated code

//End of 'Rack destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
for (vector<cfm_server*>::const_iterator vi = Server_vec.begin();
			vi!= Server_vec.end(); vi++) {
		delete (*vi);
	}
delete ToRSwitch;
//deconstructor for vector relation
for (vector<mq_MsgQServerToToRSwitch_t*>::const_iterator vi = mq_MsgQServerToToRSwitch_vec.begin();
			vi!= mq_MsgQServerToToRSwitch_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MsgQToServer_t*>::const_iterator vi = mq_MsgQToServer_vec.begin();
			vi!= mq_MsgQToServer_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_rack::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_rack::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>