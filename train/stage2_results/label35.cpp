//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_ipcall
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_ipcall.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_callprotocolstack
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_ipcall
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'IPCall definitions' algorithm generated code

//End of 'IPCall definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_ipcall::cfm_ipcall(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_ipcall_dp_if(), p_mq_UMTSToIP(
				"p_mq_UMTSToIP"), p_mq_IPToUMTS("p_mq_IPToUMTS"), p_mq_IPToHTTP(
				"p_mq_IPToHTTP"), p_mq_HTTPToIP("p_mq_HTTPToIP") {
	cf_function_container::init();
	IPCall_Receive = new cfm_ipcall_receive("IPCall_Receive");
	IPCall_Send = new cfm_ipcall_send("IPCall_Send");

	// connections
	IPCall_Receive->p_mq_UMTSToIP(p_mq_UMTSToIP);
	IPCall_Receive->p_mq_IPToHTTP(p_mq_IPToHTTP);

	IPCall_Send->p_mq_IPToUMTS(p_mq_IPToUMTS);
	IPCall_Send->p_mq_HTTPToIP(p_mq_HTTPToIP);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'IPCall constructor' algorithm generated code

	//End of 'IPCall constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_ipcall::~cfm_ipcall(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'IPCall destructor' algorithm generated code

	//End of 'IPCall destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete IPCall_Receive;
	delete IPCall_Send;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_ipcall::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'IPCall pre elaboration' algorithm generated code

	//End of 'IPCall pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_ipcall::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'IPCall post elaboration' algorithm generated code

	//End of 'IPCall post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_ipcall::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'IPCall post simulation' algorithm generated code

	//End of 'IPCall post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_ipcall::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_ipcall::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'IPCall initializations' algorithm generated code

	//End of 'IPCall initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>