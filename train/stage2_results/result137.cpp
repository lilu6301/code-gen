
/*
 * \class cfm_automatedpayloadtrackers
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_automatedpayloadtrackers.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_automatedpayloadtrackers::cfm_automatedpayloadtrackers(sc_core::sc_module_name name)
cf_application(name)
, mq_M1_1("M1_1"
)
, mq_M1_2("M1_2"
)
, mq_M1_3("M1_3"
)
, mq_M2_1("M2_1"
)
, mq_M2_2("M2_2"
)

{
	cf_application::init();
	C1 = new cfm_c1
	("C1");
	C2 = new cfm_c2
	("C2");
	F12 = new cfm_f12
	("F12");
	F2 = new cfm_f2
	("F2");
	P1 = new cfm_p1
	("P1");
	P2 = new cfm_p2
	("P2");

	C1->p_mq_M1_1
	(mq_M1_1
			.p_target_socket
	);

	C2->p_mq_M1_2
	(mq_M1_2
			.p_target_socket
	);

	F12->p_mq_M1_3
	(mq_M1_3
			.p_target_socket
	);
	F12->p_mq_M2_2
	(mq_M2_2
			.p_target_socket
	);
	F12->p_mq_M2_1
	(mq_M2_1
			.p_target_socket
	);
	F12->p_mq_M1_2
	(mq_M1_2
			.p_target_socket
	);
	F12->p_mq_M1_1
	(mq_M1_1
			.p_target_socket
	);
	F12->p_mq_M1_3
	(mq_M1_3
			.p_target_socket
	);

	F2->p_mq_M1_1
	(mq_M1_1
			.p_target_socket
	);

	P1->p_mq_M1_1
	(mq_M1_1
			.p_target_socket
	);

	P2->p_mq_M1_2
	(mq_M1_2
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_automatedpayloadtrackers::~cfm_automatedpayloadtrackers(void) {

	delete C1;	///ddd
	delete C2;	///ddd
	delete F12;	///ddd
	delete F2;	///ddd
	delete P1;	///ddd
	delete P2;	///ddd
}

void cfm_automatedpayloadtrackers::cb_before_elaboration(void) {

}

void cfm_automatedpayloadtrackers::cb_end_of_elaboration(void) {

}

void cfm_automatedpayloadtrackers::cb_end_of_simulation(void) {

}

void cfm_automatedpayloadtrackers::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_M1_1.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_1.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M1_1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M1_1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M1_1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M1_1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_2.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M1_2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M1_2.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_3.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M1_3.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M1_3.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M1_3.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_1.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M2_1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M2_1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_send_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_2.cfa_receive_time.init(cf_expr_duration(10, CF_NS));
	mq_M2_2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_M2_2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_M2_2.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_automatedpayloadtrackers::cb_init_local_vars(void) {


}


