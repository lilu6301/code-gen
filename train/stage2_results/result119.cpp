
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_cofsimverilatorchiselapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CoSimVerilatorChiselApp generated by C++
 * Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_cofsimverilatorchiselapp.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'CoSimVerilatorChiselApp definitions' algorithm generated code

// End of 'CoSimVerilatorChiselApp definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_cofsimverilatorchiselapp : cf_application(name),
                               mq_data1("data1"),
                               mq_data2("data2"),
                               mq_sum("sum") {
  cf_application::init();
  // instantiation of models
  Consumer = new cfm_consumer("Consumer");
  Producer1 = new cfm_producer1("Producer1");
  Producer2 = new cfm_producer2("Producer2");
  adder = new cfm_adder("adder");
  // connections
  Consumer->p_mq_sum(mq_sum);
  Producer1->p_mq_data1(mq_data1);
  Producer2->p_mq_data2(mq_data2);
  adder->p_mq_data1(mq_data1);
  adder->p_mq_data2(mq_data2);
  adder->p_mq_sum(mq_sum);
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_cofsimverilatorchiselapp::~cfm_cofsimverilatorchiselapp(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CoSimVerilatorChiselApp destructor' algorithm generated code

  // End of 'CoSimVerilatorChiselApp destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete Consumer;
  delete Producer1;
  delete Producer2;
  delete adder;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_cofsimverilatorchiselapp::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CoSimVerilatorChiselApp pre elaboration' algorithm generated code

  // End of 'CoSimVerilatorChiselApp pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_cofsimverilatorchiselapp::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CoSimVerilatorChiselApp post elaboration' algorithm generated code

  // End of 'CoSimVerilatorChiselApp post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_cofsimverilatorchiselapp::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CoSimVerilatorChiselApp post simulation' algorithm generated code

  // End of 'CoSimVerilatorChiselApp post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_cofsimverilatorchiselapp::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_data1.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_data1.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_data1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_data1.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_data1.cfa_concurrency.init((cf_nonzero_count)1);
  mq_data1.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_data1.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_data2.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_data2.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_data2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_data2.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_data2.cfa_concurrency.init((cf_nonzero_count)1);
  mq_data2.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_data2.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_sum.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_sum.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_sum.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_sum.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_sum.cfa_concurrency.init((cf_nonzero_count)1);
  mq_sum.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_sum.cfa_receive_threshold.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_cofsimverilatorchiselapp::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CoSimVerilatorChiselApp initializations' algorithm generated code

  // End of 'CoSimVerilatorChiselApp initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>