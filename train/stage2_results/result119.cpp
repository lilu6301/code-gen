
/*
 * \class cfm_cosimverilatorchiselapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CoSimVerilatorChiselApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_cosimverilatorchiselapp.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_cosimverilatorchiselapp::cfm_cosimverilatorchiselapp(sc_core::sc_module_name name)
cf_application(name)
, mq_data1("data1"
)
, mq_data2("data2"
)
, mq_sum("sum"
)

{
	cf_application::init();
	Consumer = new cfm_consumer
	("Consumer");
	adder = new cfm_adder
	("adder");
	Producer1 = new cfm_producer1
	("Producer1");
	Producer2 = new cfm_producer2
	("Producer2");

	Consumer->p_mq_data1
	(mq_data1
			.p_target_socket
	);
	Consumer->p_mq_data2
	(mq_data2
			.p_target_socket
	);
	Consumer->p_mq_sum
	(mq_sum
			.p_target_socket
	);

	adder->p_mq_data1
	(mq_data1
			.p_target_socket
	);
	adder->p_mq_data2
	(mq_data2
			.p_target_socket
	);
	adder->p_mq_sum
	(mq_sum
			.p_target_socket
	);

	Producer1->p_mq_data1
	(mq_data1
			.p_target_socket
	);

	Producer2->p_mq_data2
	(mq_data2
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_cosimverilatorchiselapp::~cfm_cosimverilatorchiselapp(void) {

	delete Consumer;	///ddd
	delete adder;	///ddd
	delete Producer1;	///ddd
	delete Producer2;	///ddd
}

void cfm_cosimverilatorchiselapp::cb_before_elaboration(void) {

}

void cfm_cosimverilatorchiselapp::cb_end_of_elaboration(void) {

}

void cfm_cosimverilatorchiselapp::cb_end_of_simulation(void) {

}

void cfm_cosimverilatorchiselapp::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_data1.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_data1.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_data1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_data1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_data1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_data1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_data1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_data2.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_data2.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_data2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_data2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_data2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_data2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_data2.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_sum.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_sum.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_sum.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_sum.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_sum.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_sum.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_sum.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_cosimverilatorchiselapp::cb_init_local_vars(void) {


}


