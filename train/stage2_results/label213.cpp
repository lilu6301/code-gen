//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_serverroom
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_serverroom.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_datacenter
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_serverroom
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'ServerRoom definitions' algorithm generated code

// End of 'ServerRoom definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_serverroom : cf_function_container(name),
                 cfm_serverroom_dp_if(),
                 p_mq_MsgQToDataCenterSwitch("p_mq_MsgQToDataCenterSwitch"),
                 p_mq_MsgQToServerRoom("p_mq_MsgQToServerRoom") {
  cf_function_container::init();
  // instantiation of models
  AGGSwitch = new cfm_aggswitch("AGGSwitch");
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    cfm_rack *module = new cfm_rack(cf_string("Rack[%d]", i).c_str());
    CF_ASSERT(module)
    Rack_vec.push_back(module);
  }
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    mq_MsgQToAggSwitch_t *module =
        new mq_MsgQToAggSwitch_t(cf_string("MsgQToAggSwitch[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQToAggSwitch_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    mq_MsgQToRack_t *module =
        new mq_MsgQToRack_t(cf_string("MsgQToRack[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQToRack_vec.push_back(module);
  }
  // connections
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    AGGSwitch->p_mq_MsgQToAggSwitch(mq_MsgQToAggSwitch_vec[i]->p_target_socket);
  }
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    AGGSwitch->p_mq_MsgQToRack(mq_MsgQToRack_vec[i]->p_target_socket);
  }
AGGSwitch->p_mq_MsgQToDataCenterSwitch((p_mq_MsgQToDataCenterSwitch);
AGGSwitch->p_mq_MsgQToServerRoom((p_mq_MsgQToServerRoom);
	for (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {
    cfm_rack *module = Rack_vec[i];
    if (module != nullptr) {
      for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
        module->p_mq_MsgQToAggSwitch(
            mq_MsgQToAggSwitch_vec[j]->p_target_socket);
      }
      for (cf_count j = 0; j < (cf_count)(dpRackNb + 1); j++) {
        module->p_mq_MsgQToRack(mq_MsgQToRack_vec[j]->p_target_socket);
      }
    }
}
	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_serverroom::~cfm_serverroom(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ServerRoom destructor' algorithm generated code

  // End of 'ServerRoom destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete AGGSwitch;
  for (vector<cfm_rack *>::const_iterator vi = Rack_vec.begin();
       vi != Rack_vec.end(); vi++) {
    delete (*vi);
  }
  // deconstructor for vector relation
  for (vector<mq_MsgQToAggSwitch_t *>::const_iterator vi =
           mq_MsgQToAggSwitch_vec.begin();
       vi != mq_MsgQToAggSwitch_vec.end(); vi++) {
    delete (*vi);
  }
  for (vector<mq_MsgQToRack_t *>::const_iterator vi = mq_MsgQToRack_vec.begin();
       vi != mq_MsgQToRack_vec.end(); vi++) {
    delete (*vi);
  }
}
//@}

/// \name pre-elaboration section
//@{
void cfm_serverroom::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ServerRoom pre elaboration' algorithm generated code

  // End of 'ServerRoom pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_serverroom::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ServerRoom post elaboration' algorithm generated code

  // End of 'ServerRoom post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_serverroom::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ServerRoom post simulation' algorithm generated code

  // End of 'ServerRoom post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_serverroom::cb_init_attributes() {

  // initialize function attributes
  // initialize relations attributes
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    (*mq_MsgQToAggSwitch_vec[i])
        .cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
    (*mq_MsgQToAggSwitch_vec[i]).cfa_queue_capacity.init((cf_nonzero_count)1);
    (*mq_MsgQToAggSwitch_vec[i]).cfa_concurrency.init((cf_nonzero_count)1);
    (*mq_MsgQToAggSwitch_vec[i]).cfa_send_threshold.init((cf_nonzero_count)1);
    (*mq_MsgQToAggSwitch_vec[i])
        .cfa_receive_threshold.init((cf_nonzero_count)1);
  }
  for (cf_count i = 0; i < (cf_count)(dpRackNb + 1); i++) {
    (*mq_MsgQToRack_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
    (*mq_MsgQToRack_vec[i]).cfa_queue_capacity.init((cf_nonzero_count)1);
    (*mq_MsgQToRack_vec[i]).cfa_concurrency.init((cf_nonzero_count)1);
    (*mq_MsgQToRack_vec[i]).cfa_send_threshold.init((cf_nonzero_count)1);
    (*mq_MsgQToRack_vec[i]).cfa_receive_threshold.init((cf_nonzero_count)1);
  }

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_serverroom::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ServerRoom initializations' algorithm generated code

  // End of 'ServerRoom initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name Overload function for mq_MsgQToAggSwitch message queue send time
//@{
cf_duration
cfm_serverroom::mq_MsgQToAggSwitch_cb_send_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToAggSwitch_trans, _trans);
  //#COFS_MESSAGE_QUEUE_SEND_TIME_BEGIN
  return cf_expr_duration(dpRackToSwitchTime / 2, CF_NS);
  //#COFS_MESSAGE_QUEUE_SEND_TIME_END
}
//@}
/// \name Overload function for mq_MsgQToAggSwitch message queue receive time
//@{
cf_duration
cfm_serverroom::mq_MsgQToAggSwitch_cb_receive_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToAggSwitch_trans, _trans);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_BEGIN
  return cf_expr_duration(dpRackToSwitchTime / 2, CF_NS);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_END
}
//@}
/// \name Overload function for mq_MsgQToRack message queue send time
//@{
cf_duration cfm_serverroom::mq_MsgQToRack_cb_send_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToRack_trans, _trans);
  //#COFS_MESSAGE_QUEUE_SEND_TIME_BEGIN
  return cf_expr_duration(dpSwitchToRackTime / 2, CF_NS);
  //#COFS_MESSAGE_QUEUE_SEND_TIME_END
}
//@}
/// \name Overload function for mq_MsgQToRack message queue receive time
//@{
cf_duration
cfm_serverroom::mq_MsgQToRack_cb_receive_time(cf_payload_b *_trans) {
  CF_COMM_DEF_TRANS_REF(cft_defpacket, MsgQToRack_trans, _trans);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_BEGIN
  return cf_expr_duration(dpSwitchToRackTime / 2, CF_NS);
  //#COFS_MESSAGE_QUEUE_RECEIVE_TIME_END
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>