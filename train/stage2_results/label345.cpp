//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_filesystem
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of Bluetooth_IPs generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_filesystem.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_bt_system
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_filesystem
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'FileSystem definitions' algorithm generated code

// End of 'FileSystem definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_filesystem : cf_function(name),
                 cfm_filesystem_dp_if(),
                 p_ev_WrOK("p_ev_WrOK"),
                 p_mq_DataIn("p_mq_DataIn"),
                 p_mq_DataOut("p_mq_DataOut"),
                 p_mq_ReadWrite("p_mq_ReadWrite"),
                 p_sv_Data("p_sv_Data") {
  cf_function::init();
  // connections
  cf_function::elab_end();
}
//@}

/// \name destructor
//@{
cfm_filesystem::~cfm_filesystem(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem destructor' algorithm generated code

  // End of 'FileSystem destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name pre-elaboration section
//@{
void cfm_filesystem::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem pre elaboration' algorithm generated code

  // End of 'FileSystem pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_filesystem::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem post elaboration' algorithm generated code

  // End of 'FileSystem post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_filesystem::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem post simulation' algorithm generated code

  // End of 'FileSystem post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_filesystem::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  cfa_scope.init(CF_FCT_SYSTEM);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_filesystem::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'FileSystem initializations' algorithm generated code
  // stop flag is activated when file has been read entirely
  stop = false;
  // read/write flag
  wr = 0;
  // file size
  f_size = File_Size * 1000;
  // first read flag
  first_read = true;
  // End of 'FileSystem initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>