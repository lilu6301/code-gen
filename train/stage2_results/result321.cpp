
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_completedevice
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CompleteDevice generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_completedevice.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'CompleteDevice definitions' algorithm generated code

// End of 'CompleteDevice definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_completedevice ::cfm_completedevice()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_application(name), cfm_compledevice_dp_if(), ev_newFrame("newFrame"),
      sv_inputStream("inputStream"), sv_outputStream("outputStream") {
  cf_application::init();
  // instantiation of models
  device = new cfm_device("device");
  testBench = new cfm_testbench("testBench");
  // connections
  // model connect to relation
  device->p_mq_dpv(mq_dpv.p_target_socket);
  device->p_sv_newFrame(sv_newFrame.p_target_socket);
  // model connect to relation
  testBench->p_mq_dpv(mq_dpv.p_target_socket);
  testBench->p_sv_inputStream(sv_inputStream.p_target_socket);
  testBench->p_ev_newFrame(ev_newFrame.p_target_socket);
  testBench->p_sv_outputStream(sv_outputStream.p_target_socket);
  cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_completedevice::~cfm_completedevice(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CompleteDevice destructor' algorithm generated code

  // End of 'CompleteDevice destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete device;
  delete testBench;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_completedevice::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CompleteDevice pre elaboration' algorithm generated code

  // End of 'CompleteDevice pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_completedevice::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CompleteDevice post elaboration' algorithm generated code

  // End of 'CompleteDevice post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_completedevice::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CompleteDevice post simulation' algorithm generated code

  // End of 'CompleteDevice post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_completedevice::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  sv_inputStream.cfa_write_time.init(cf_expr_duration(1, CF_NS));
  sv_inputStream.cfa_read_time.init(cf_expr_duration(1, CF_NS));
  sv_inputStream.cfa_semaphore.init(false);
  sv_inputStream.cfa_concurrency.init((cf_nonzero_count)1);
  ev_newFrame.cfa_set_time.init(cf_expr_duration(1, CF_NS));
  ev_newFrame.cfa_get_time.init(cf_expr_duration(1, CF_NS));
  ev_newFrame.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
  sv_outputStream.cfa_write_time.init(cf_expr_duration(1, CF_NS));
  sv_outputStream.cfa_read_time.init(cf_expr_duration(1, CF_NS));
  sv_outputStream.cfa_semaphore.init(false);
  sv_outputStream.cfa_concurrency.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_completedevice::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'CompleteDevice initializations' algorithm generated code

  // End of 'CompleteDevice initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>