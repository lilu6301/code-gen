
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_hwmodel
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of HwDeviceModel generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_hwmodel.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_hwdevicemodel
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_hwmodel
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'hwModel definitions' algorithm generated code
void cfm_hwmodel::revert_frame() {

	/* Revert the image by:
	 *   - Pixel 0 becomes Pixel N-1
	 *   - Line 0 becomes Line N
	 *   - Frame 0 becomes Frame N
	 *   - ProcessingMode becomes 'REVERT'
	 *   - startProcess becomes 'endOfProcess'
	 *   - inputFrame becomes outputFrame
	 *   - outputFrame becomes inputFrame
	 *   - processingMode becomes 'PROCESS'
	 *   - endOfProcess becomes startProcess
	 */
	byte* outpayload = outputFrame.payload;
	byte* inpayload = inputFrame.payload;

	// 'REVERT' ProcessingMode
	outpayload[0] = inpayload[N - 1 - 0];
	outpayload[1] = inpayload[N - 1 - 1];
	outpayload[2] = inpayload[N - 1 - 2];
	outpayload[3] = inpayload[N - 1 - 3];
	outpayload[4] = inpayload[N - 1 - 4];
	outpayload[5] = inpayload[N - 1 - 5];
	outpayload[6] = inpayload[N - 1 - 6];
	outpayload[7] = inpayload[N - 1 - 7];

	// 'PROCESS' ProcessingMode
	inpayload[0] = outpayload[N - 1 - 0];
	inpayload[1] = outpayload[N - 1 - 1];
	inpayload[2] = outpayload[N - 1 - 2];
	inpayload[3] = outpayload[N - 1 - 3];
	inpayload[4] = outpayload[N - 1 - 4];
	inpayload[5] = outpayload[N - 1 - 5];
	inpayload[6] = outpayload[N - 1 - 6];
	inpayload[7] = outpayload[N - 1 - 7];

	inputFrame.set_user_data_length(outputFrame.get_user_data_length());
	outputFrame.set_user_data_length(inputFrame.get_user_data_length());

	cf_trace_report("Frame Size : %d", inputFrame.get_user_data_length());

	//cf_trace_report("ProcessingMode : %d", processingMode.get_value());

	//End of 'hwModel definitions' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_trace_report("End of Processing");

}
//End of 'hwModel definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_hwmodel::cfm_hwmodel(sc_core::sc_module_name name) :
		cf_function(name), cfm_hwmodel_dp_if(), p_ev_startProcess(
				"p_ev_startProcess"), p_mq_inputFrame("p_mq_inputFrame"), p_mq_outputFrame(
				"p_mq_outputFrame"), p_sv_processingMode("p_sv_processingMode") {
	cf_function::init();

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'hwModel constructor' algorithm generated code

	//End of 'hwModel constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function::elab_end();
}
//@}

/// \name destructor
//@{
cfm_hwmodel::~cfm_hwmodel(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'hwModel destructor' algorithm generated code

	//End of 'hwModel destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name pre-elaboration section
//@{
void cfm_hwmodel::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'hwModel pre elaboration' algorithm generated code

	//End of 'hwModel pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_hwmodel::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'hwModel post elaboration' algorithm generated code

	//End of 'hwModel post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_hwmodel::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'hwModel post simulation' algorithm generated code

	//End of 'hwModel post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_hwmodel::cb_init_attributes() {

// initialize function attributes
	cfa_scope.init(CF_FCT_SYSTEM);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_hwmodel::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'hwModel initializations' algorithm generated code

	//End of 'hwModel initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>