
/*
 * \class cfm_datacenter
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_datacenter.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_datacenter::cfm_datacenter(sc_core::sc_module_name name)
cf_application(name)
, cfm_datacenter_dp_if()

{
	cf_application::init();
	DataCenterSwitch = new cfm_datacenterswitch
	("DataCenterSwitch");

	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		cfm_serverroom* module=new cfm_serverroom(cf_string("ServerRoom[%d]", i).c_str());
		CF_ASSERT( module )
		ServerRoom_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		mq_MsgQToDataCenterSwitch_t* module=new mq_MsgQToDataCenterSwitch_t(cf_string("MsgQToDataCenterSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQToDataCenterSwitch_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		mq_MsgQToServerRoom_t* module=new mq_MsgQToServerRoom_t(cf_string("MsgQToServerRoom[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQToServerRoom_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)DataCenterSwitch
				->p_mq_MsgQToDataCenterSwitch_vec.size(); j++)
		{
			cfm_datacenterswitch
			::p_mq_MsgQToDataCenterSwitch_t* port= DataCenterSwitch
			->p_mq_MsgQToDataCenterSwitch_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MsgQToDataCenterSwitch_vec[i]
						->p_target_socket
				);
			}
		}
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		for (cf_count j = 0; j < (cf_count)DataCenterSwitch
				->p_mq_MsgQToServerRoom_vec.size(); j++)
		{
			cfm_datacenterswitch
			::p_mq_MsgQToServerRoom_t* port= DataCenterSwitch
			->p_mq_MsgQToServerRoom_vec[j]
			;
			if(port != nullptr) {
				port->bind(mq_MsgQToServerRoom_vec[i]
						->p_target_socket
				);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		cfm_serverroom* module
		=ServerRoom_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQToDataCenterSwitch
				(mq_MsgQToDataCenterSwitch_vec[j]
						->p_target_socket
				);
			}
			for (cf_count j = 0; j < (cf_count)(dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQToServerRoom
				(mq_MsgQToServerRoom_vec[j]
						->p_target_socket
				);
			}
		}
	}



	cf_application::elab_end();
}

cfm_datacenter::~cfm_datacenter(void) {

	for (vector<cfm_serverroom*>::const_iterator vi = ServerRoom_vec.begin(); vi != ServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQToDataCenterSwitch_t*>::const_iterator vi = mq_MsgQToDataCenterSwitch_vec.begin(); vi != mq_MsgQToDataCenterSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQToServerRoom_t*>::const_iterator vi = mq_MsgQToServerRoom_vec.begin(); vi != mq_MsgQToServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
	delete DataCenterSwitch;	///ddd
}

void cfm_datacenter::cb_before_elaboration(void) {

}

void cfm_datacenter::cb_end_of_elaboration(void) {

}

void cfm_datacenter::cb_end_of_simulation(void) {

}

void cfm_datacenter::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQToDataCenterSwitch_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		(*mq_MsgQToServerRoom_vec[i]).cfa_send_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQToServerRoom_vec[i]).cfa_receive_time.init(cf_expr_duration(0, CF_NS));
		(*mq_MsgQToServerRoom_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQToServerRoom_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) 1);
		(*mq_MsgQToServerRoom_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQToServerRoom_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQToServerRoom_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_datacenter::cb_init_local_vars(void) {


}


