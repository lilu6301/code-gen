//<#!@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_datacenter
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_datacenter.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'datacenter definitions' algorithm generated code

//End of 'datacenter definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_datacenter ::cfm_datacenter() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_application(),mq_MsgQToDataCenterSwitch("MsgQToDataCenterSwitch"),mq_MsgQToServerRoom("MsgQToServerRoom"){
cf_application::init();
//instantiation of models
DataCenterSwitch = new cfm_datacenterswitch("DataCenterSwitch");
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		cfm_serverroom* module = new cfm_serverroom(
				cf_string("ServerRoom[%d]", i).c_str());
		CF_ASSERT (module)
		ServerRoom_vec.push_back(module);
	}
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		mq_MsgQToDataCenterSwitch_t* module = new mq_MsgQToDataCenterSwitch_t(
				cf_string("MsgQToDataCenterSwitch[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MsgQToDataCenterSwitch_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		mq_MsgQToServerRoom_t* module = new mq_MsgQToServerRoom_t(
				cf_string("MsgQToServerRoom[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MsgQToServerRoom_vec.push_back(module);
	}
//connections
//model connect to relation
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		DataCenterSwitch->p_mq_MsgQToDataCenterSwitch(mq_MsgQToDataCenterSwitch_vec[i]->p_target_socket);
	}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		DataCenterSwitch->p_mq_MsgQToServerRoom(mq_MsgQToServerRoom_vec[i]->p_target_socket);
	}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		cfm_serverroom* module = ServerRoom_vec[i];
		if (module != nullptr) {
//model connect to relation
for (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQToDataCenterSwitch(mq_MsgQToDataCenterSwitch_vec[j]->p_target_socket);
			}
for (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQToServerRoom(mq_MsgQToServerRoom_vec[j]->p_target_socket);
			}
}
}
cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_datacenter::~cfm_datacenter(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'datacenter destructor' algorithm generated code

//End of 'datacenter destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
delete DataCenterSwitch;
for (vector<cfm_serverroom*>::const_iterator vi = ServerRoom_vec.begin();
			vi != ServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
//deconstructor for vector relation
for (vector<mq_MsgQToDataCenterSwitch_t*>::const_iterator vi = mq_MsgQToDataCenterSwitch_vec.begin();
			vi != mq_MsgQToDataCenterSwitch_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MsgQToServerRoom_t*>::const_iterator vi = mq_MsgQToServerRoom_vec.begin();
			vi != mq_MsgQToServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_datacenter::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_datacenter::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>