//<#!@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_datacenterswitch
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_datacenterswitch.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'DataCenterSwitch definitions' algorithm generated code

//End of 'DataCenterSwitch definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_datacenterswitch ::cfm_datacenterswitch() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),mq_MsgQRouting_in("MsgQRouting_in"),mq_MsgQRouting_out("MsgQRouting_out"),p_mq_MsgQToDataCenterSwitch("p_mq_MsgQToDataCenterSwitch"),p_mq_MsgQToServerRoom("p_mq_MsgQToServerRoom"){
cf_function_container::init();
//instantiation of models
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		cfm_inbound* module = new cfm_inbound(
				cf_string("Inbound[%d]", i).c_str());
		CF_ASSERT (module)
		Inbound_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		cfm_outbound* module = new cfm_outbound(
				cf_string("Outbound[%d]", i).c_str());
		CF_ASSERT (module)
		Outbound_vec.push_back(module);
	}
RoutingFunction = new cfm_routingfunction("RoutingFunction");
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		mq_MsgQRouting_in_t* module = new mq_MsgQRouting_in_t(
				cf_string("MsgQRouting_in[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MsgQRouting_in_vec.push_back(module);
	}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		mq_MsgQRouting_out_t* module = new mq_MsgQRouting_out_t(
				cf_string("MsgQRouting_out[%d]", i).c_str());
		CF_ASSERT (module)
		mq_MsgQRouting_out_vec.push_back(module);
	}
//connections
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		cfm_inbound* module = Inbound_vec[i];
		if (module != nullptr) {
//model connect to relation
for (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQRouting_in(mq_MsgQRouting_in_vec[j]->p_target_socket);
			}
//model connect to port
module->p_mq_MsgQToDataCenterSwitch(p_mq_MsgQToDataCenterSwitch);
}
}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		cfm_outbound* module = Outbound_vec[i];
		if (module != nullptr) {
//model connect to relation
for (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQRouting_out(mq_MsgQRouting_out_vec[j]->p_target_socket);
			}
//model connect to port
module->p_mq_MsgQToServerRoom(p_mq_MsgQToServerRoom);
}
}
//model connect to relation
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		RoutingFunction->p_mq_MsgQRouting_in(mq_MsgQRouting_in_vec[i]->p_target_socket);
	}
for (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {
		RoutingFunction->p_mq_MsgQRouting_out(mq_MsgQRouting_out_vec[i]->p_target_socket);
	}
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_datacenterswitch::~cfm_datacenterswitch(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'DataCenterSwitch destructor' algorithm generated code

//End of 'DataCenterSwitch destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
for (vector<cfm_inbound*>::const_iterator vi = Inbound_vec.begin();
			vi != Inbound_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<cfm_outbound*>::const_iterator vi = Outbound_vec.begin();
			vi != Outbound_vec.end(); vi++) {
		delete (*vi);
	}
delete RoutingFunction;
//deconstructor for vector relation
for (vector<mq_MsgQRouting_in_t*>::const_iterator vi = mq_MsgQRouting_in_vec.begin();
			vi != mq_MsgQRouting_in_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MsgQRouting_out_t*>::const_iterator vi = mq_MsgQRouting_out_vec.begin();
			vi != mq_MsgQRouting_out_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_datacenterswitch::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_datacenterswitch::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>