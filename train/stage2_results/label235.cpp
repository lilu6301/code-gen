/*
 * \class cfm_torswitch
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_torswitch.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_rack
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_torswitch
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_torswitch::cfm_torswitch(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_torswitch_dp_if()
, p_mq_MsgQToRack("p_mq_MsgQToRack")
, p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch")
, mq_MsgQInboundAGGSwitch("MsgQInboundAGGSwitch"
)
, mq_MsgQOutboundAGGSwitch("MsgQOutboundAGGSwitch"
)

{
	cf_function_container::init();
	InboundAGGSwitch = new cfm_inboundaggswitch
	("InboundAGGSwitch");
	OutboundAGGSwitch = new cfm_outboundaggswitch
	("OutboundAGGSwitch");
	RoutingFunction = new cfm_torswitch_routingfunction
	("RoutingFunction");

	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		cfm_inboundserver* module=new cfm_inboundserver(cf_string("InboundServer[%d]", i).c_str());
		CF_ASSERT( module )
		InboundServer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		cfm_outboundserver* module=new cfm_outboundserver(cf_string("OutboundServer[%d]", i).c_str());
		CF_ASSERT( module )
		OutboundServer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		mq_MsgQInboundServer_t* module=new mq_MsgQInboundServer_t(cf_string("MsgQInboundServer[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQInboundServer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++)
	{
		mq_MsgQOutboundServer_t* module=new mq_MsgQOutboundServer_t(cf_string("MsgQOutboundServer[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQOutboundServer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb+1); i++)
	{
		p_mq_MsgQServerToToRSwitch_t* module=new p_mq_MsgQServerToToRSwitch_t(cf_string("p_mq_MsgQServerToToRSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQServerToToRSwitch_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb+1); i++)
	{
		p_mq_MsgQToServer_t* module=new p_mq_MsgQToServer_t(cf_string("p_mq_MsgQToServer[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToServer_vec.push_back(module);
	}
	InboundAGGSwitch->p_mq_MsgQToRack
	(p_mq_MsgQToRack
	);
	InboundAGGSwitch->p_mq_MsgQInboundAGGSwitch
	(mq_MsgQInboundAGGSwitch
			.p_target_socket
	);

	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		cfm_inboundserver* module
		=InboundServer_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
				module->p_mq_MsgQInboundServer
				(mq_MsgQInboundServer_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MsgQServerToToRSwitch
			((*p_mq_MsgQServerToToRSwitch_vec[
							i
							]
					)
			);
		}
	}

	OutboundAGGSwitch->p_mq_MsgQOutboundAGGSwitch
	(mq_MsgQOutboundAGGSwitch
			.p_target_socket
	);
	OutboundAGGSwitch->p_mq_MsgQToAggSwitch
	(p_mq_MsgQToAggSwitch
	);

	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		cfm_outboundserver* module
		=OutboundServer_vec[i];
		if(module
				!= nullptr) {
			module->p_mq_MsgQToServer
			((*p_mq_MsgQToServer_vec[
							i
							]
					)
			);
			for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
				module->p_mq_MsgQOutboundServer
				(mq_MsgQOutboundServer_vec[j]
						->p_target_socket
				);
			}
		}
	}

	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQInboundServer
		(mq_MsgQInboundServer_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQOutboundServer
		(mq_MsgQOutboundServer_vec[i]
				->p_target_socket
		);
	}
	RoutingFunction->p_mq_MsgQInboundAGGSwitch
	(mq_MsgQInboundAGGSwitch
			.p_target_socket
	);
	RoutingFunction->p_mq_MsgQOutboundAGGSwitch
	(mq_MsgQOutboundAGGSwitch
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_torswitch::~cfm_torswitch(void) {

	for (vector<cfm_inboundserver*>::const_iterator vi = InboundServer_vec.begin(); vi != InboundServer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_outboundserver*>::const_iterator vi = OutboundServer_vec.begin(); vi != OutboundServer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQInboundServer_t*>::const_iterator vi = mq_MsgQInboundServer_vec.begin(); vi != mq_MsgQInboundServer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQOutboundServer_t*>::const_iterator vi = mq_MsgQOutboundServer_vec.begin(); vi != mq_MsgQOutboundServer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQServerToToRSwitch_t*>::const_iterator vi = p_mq_MsgQServerToToRSwitch_vec.begin(); vi != p_mq_MsgQServerToToRSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToServer_t*>::const_iterator vi = p_mq_MsgQToServer_vec.begin(); vi != p_mq_MsgQToServer_vec.end(); vi++) {
		delete (*vi);
	}
	delete InboundAGGSwitch;	///ddd
	delete OutboundAGGSwitch;	///ddd
	delete RoutingFunction;	///ddd
}

void cfm_torswitch::cb_before_elaboration(void) {

}

void cfm_torswitch::cb_end_of_elaboration(void) {

}

void cfm_torswitch::cb_end_of_simulation(void) {

}

void cfm_torswitch::cb_init_attributes() {

	mq_MsgQInboundAGGSwitch.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQInboundAGGSwitch.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQInboundAGGSwitch.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQInboundAGGSwitch.cfa_queue_capacity.init((cf_nonzero_count) dpToRSwitchPortBufferSize);
	mq_MsgQInboundAGGSwitch.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQInboundAGGSwitch.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQInboundAGGSwitch.cfa_receive_threshold.init((cf_nonzero_count) 1);
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		(*mq_MsgQInboundServer_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQInboundServer_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQInboundServer_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQInboundServer_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpToRSwitchPortBufferSize);
		(*mq_MsgQInboundServer_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQInboundServer_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQInboundServer_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	mq_MsgQOutboundAGGSwitch.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQOutboundAGGSwitch.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQOutboundAGGSwitch.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQOutboundAGGSwitch.cfa_queue_capacity.init((cf_nonzero_count) dpToRSwitchPortBufferSize);
	mq_MsgQOutboundAGGSwitch.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQOutboundAGGSwitch.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQOutboundAGGSwitch.cfa_receive_threshold.init((cf_nonzero_count) 1);
	for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
		(*mq_MsgQOutboundServer_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQOutboundServer_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQOutboundServer_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQOutboundServer_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpToRSwitchPortBufferSize);
		(*mq_MsgQOutboundServer_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQOutboundServer_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQOutboundServer_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_torswitch::cb_init_local_vars(void) {


}


