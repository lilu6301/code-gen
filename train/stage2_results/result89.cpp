
/*
 * \class cfm_protocolmapdatatypeapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ProtocolMapDataTypeApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_protocolmapdatatypeapp.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_protocolmapdatatypeapp::cfm_protocolmapdatatypeapp(sc_core::sc_module_name name)
cf_application(name)
, mq_protocol_data("protocol_data"
)
, mq_user_data_in("user_data_in"
)
, mq_user_data_out("user_data_out"
)

{
	cf_application::init();
	Consumer = new cfm_consumer
	("Consumer");
	Producer = new cfm_producer
	("Producer");
	ProtocolReceive = new cfm_protocolreceive
	("ProtocolReceive");
	ProtocolSend = new cfm_protocolsend
	("ProtocolSend");

	Consumer->p_mq_user_data_out
	(mq_user_data_out
			.p_target_socket
	);

	Producer->p_mq_user_data_in
	(mq_user_data_in
			.p_target_socket
	);

	ProtocolReceive->p_mq_user_data_out
	(mq_user_data_out
			.p_target_socket
	);
	ProtocolReceive->p_mq_protocol_data
	(mq_protocol_data
			.p_target_socket
	);

	ProtocolSend->p_mq_user_data_in
	(mq_user_data_in
			.p_target_socket
	);
	ProtocolSend->p_mq_protocol_data
	(mq_protocol_data
			.p_target_socket
	);



	cf_application::elab_end();
}

cfm_protocolmapdatatypeapp::~cfm_protocolmapdatatypeapp(void) {

	delete Consumer;	///ddd
	delete Producer;	///ddd
	delete ProtocolReceive;	///ddd
	delete ProtocolSend;	///ddd
}

void cfm_protocolmapdatatypeapp::cb_before_elaboration(void) {

}

void cfm_protocolmapdatatypeapp::cb_end_of_elaboration(void) {

}

void cfm_protocolmapdatatypeapp::cb_end_of_simulation(void) {

}

void cfm_protocolmapdatatypeapp::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_protocol_data.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_protocol_data.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_protocol_data.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_protocol_data.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_protocol_data.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_user_data_in.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_user_data_in.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_user_data_in.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_user_data_in.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_user_data_in.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_user_data_out.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_user_data_out.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_user_data_out.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_user_data_out.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_user_data_out.cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}

void cfm_protocolmapdatatypeapp::cb_init_local_vars(void) {


}


