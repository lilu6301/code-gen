
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_networks
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_networks.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_softwaredefinedradioapp
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_networks
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Networks definitions' algorithm generated code

//End of 'Networks definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_networks::cfm_networks(sc_core::sc_module_name name) :
		cf_function_container(name), cfm_networks_dp_if(), p_mq_NetToDVB(
				"p_mq_NetToDVB"), p_mq_NetToUMTS("p_mq_NetToUMTS"), p_mq_UMTSToNet(
				"p_mq_UMTSToNet"), mq_BurstClock("BurstClock"), mq_VideoFiles(
				"VideoFiles"), mq_VideoNet("VideoNet") {
	cf_function_container::init();
	ClockGenerator = new cfm_clockgenerator("ClockGenerator");
	InteractiveNetwork = new cfm_interactivenetwork("InteractiveNetwork");
	BroadcastNetwork = new cfm_broadcastnetwork("BroadcastNetwork");

	// connections
	ClockGenerator->p_ev_out(mq_BurstClock.p_target_socket);

	InteractiveNetwork->p_mq_VideoNet(mq_VideoNet.p_target_socket);
	InteractiveNetwork->p_mq_VideoFiles(mq_VideoFiles.p_target_socket);
	InteractiveNetwork->p_mq_UMTSToNet(p_mq_UMTSToNet);

	BroadcastNetwork->p_mq_VideoNet(mq_VideoNet.p_target_socket);
	BroadcastNetwork->p_mq_VideoFiles(mq_VideoFiles.p_target_socket);
	BroadcastNetwork->p_mq_NetToDVB(p_mq_NetToDVB);
	BroadcastNetwork->p_ev_BurstClock(mq_BurstClock.p_target_socket);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Networks constructor' algorithm generated code

	//End of 'Networks constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_networks::~cfm_networks(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Networks destructor' algorithm generated code

	//End of 'Networks destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete ClockGenerator;
	delete InteractiveNetwork;
	delete BroadcastNetwork;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_networks::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Networks pre elaboration' algorithm generated code

	//End of 'Networks pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_networks::cb_end_of_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Networks post elaboration' algorithm generated code

	//End of 'Networks post elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_networks::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Networks post simulation' algorithm generated code

	//End of 'Networks post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_networks::cb_init_attributes() {

// initialize function attributes
// initialize relations attributes
	mq_BurstClock.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_BurstClock.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_BurstClock.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_BurstClock.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_BurstClock.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_BurstClock.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_BurstClock.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_VideoFiles.cfa_write_time.init(cf_expr_duration(10, CF_US));
	mq_VideoFiles.cfa_read_time.init(cf_expr_duration(10, CF_US));
	mq_VideoFiles.cfa_semaphore.init(false);
	mq_VideoFiles.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_VideoNet.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_VideoNet.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_VideoNet.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_VideoNet.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_VideoNet.cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_networks::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Networks initializations' algorithm generated code

	//End of 'Networks initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>