
/*
 * \class cfm_hwtestbench
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of MyApplication generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_hwtestbench.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_device
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_hwtestbench
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

void cfm_hwtestbench::revert_frame() {

	/* Reverting the image means that Pixel 0 becomes Pixel N-1, where N is the frame size (in Pixels)
	 * In YUV 422 format, it implies to:
	 *   - Revert the Y table, located at offset 0
	 *   - Revert the U table, located at offset N
	 *   - Revert the V table, located at offset N*1.5
	 */
	byte* outpayload = outputFrame.payload;
	byte* inpayload = inputFrame.payload;

	int offsetU = (int) (NbPixelsPerLineMax * NbLinesMax);
	int offsetV = (int) (NbPixelsPerLineMax * NbLinesMax * 1.5);

	int pixel_block_idx = 0;

	int line_idx;

	int current_block_ofs = 0;

	for (line_idx = 0; line_idx < NbLinesMax; line_idx++) {
		for (pixel_block_idx = 0; pixel_block_idx < NbPixelsPerLineMax / 4; pixel_block_idx++) {

			outpayload[offsetU - 1 - current_block_ofs] = inpayload[offsetU + current_block_ofs + 0];
			outpayload[offsetU - 1 - current_block_ofs - 1] = inpayload[offsetU + current_block_ofs + 1];
			outpayload[offsetU - 1 - current_block_ofs - 2] = inpayload[offsetU + current_block_ofs + 2];
			outpayload[offsetU - 1 - current_block_ofs - 3] = inpayload[offsetU + current_block_ofs + 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1 - current_block_ofs * 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU + current_block_ofs * 2 + 0];
			outpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1 - current_block_ofs * 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU + current_block_ofs * 2 + 1];
			outpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1 - current_block_ofs * 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU + current_block_ofs * 2 + 2];
			outpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1 - current_block_ofs * 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU + current_block_ofs * 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 0]
					= outpayload[offsetU + current_block_ofs / 2 + 0];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 1] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 1]
					= outpayload[offsetU + current_block_ofs / 2 + 1];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 2] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 2]
					= outpayload[offsetU + current_block_ofs / 2 + 2];
			outpayload[offsetV - 1 - current_block_ofs / 2 - 3] = inpayload[offsetV + offsetU + current_block_ofs / 2 + 3]
					= outpayload[offsetU + current_block_ofs / 2 + 3];

			outpayload[offsetU - 1 - current_block_ofs * 2 - 0] = inpayload[offsetU + current_block_ofs * 2 + 0]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 0];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 1] = inpayload[offsetU + current_block_ofs * 2 + 1]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 1];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 2] = inpayload[offsetU + current_block_ofs * 2 + 2]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 2];
			outpayload[offsetU - 1 - current_block_ofs * 2 - 3] = inpayload[offsetU + current_block_ofs * 2 + 3]
					= outpayload[offsetU - 1 - current_block_ofs * 2 - 3];

			outpayload[offsetV - 1 - current_block_ofs / 2 - 0] = inpayload[offsetU - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 - 1 - 2 -