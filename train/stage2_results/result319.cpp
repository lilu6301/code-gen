
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_hwtestbench
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of HwDeviceModel generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_hwtestbench.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_hwdevicemodel
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_hwtestbench
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'hwTestBench definitions' algorithm generated code
void cfm_hwtestbench::revert_frame() {

  /* Reverting the image means that Pixel 0 becomes Pixel N-1, where N is the
   * frame size (in Pixels) In YUV 422 format, it implies to:
   *   - Revert the Y table, located at offset 0
   *   - Revert the U table, located at offset N
   *   - Revert the V table, located at offset N*1.5
   */
  byte *outpayload = outputStream.payload;
  byte *inpayload = inputStream.payload;

  // 'U' table Offset
  int offsetU = (int)(NbPixelsPerLineMax * NbLinesMax);
  // 'V' table offset
  int offsetV = (int)(NbPixelsPerLineMax * NbLinesMax * 1.5);

  // 4-Pixel block index in a line
  int pixel_block_idx = 0;

  // Line index
  int line_idx;

  // 4-Pixel block offset, from the beginning of the frame
  int current_block_ofs = 0;

  // For each frame line
  for (line_idx = 0; line_idx < NbLinesMax; line_idx++) {
    // For each pixel block
    for (pixel_block_idx = 0; pixel_block_idx < NbPixelsPerLineMax / 4;
         pixel_block_idx++) {

      // Revert the Y table
      outpayload[offsetU - 1 - current_block_ofs] =
          inpayload[offsetV + current_block_ofs + 1];

      // Revert the U table
      outpayload[offsetV - 1 - current_block_ofs / 2 - 0] =
          inpayload[offsetU + current_block_ofs / 2 + 1 - 0];

      // Revert the V table
      outpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1 -
                 current_block_ofs / 2 - 0] =
          inpayload[offsetV + current_block_ofs / 2 + 1 - 0];
    }
  }
}
// End of 'hwTestBench definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_hwtestbench : cf_function(name),
                  cfm_hwtestbench_dp_if(),
                  p_ev_startProcess("p_ev_startProcess"),
                  p_mq_inputFrame("p_mq_inputFrame"),
                  p_mq_outputFrame("p_mq_outputFrame"),
                  p_sv_inputStream("p_sv_inputStream"),
                  p_sv_outputStream("p_sv_outputStream"),
                  p_sv_processingMode("p_sv_processingMode") {
  cf_function::init();
  // connections
  cf_function::elab_end();
}
//@}

/// \name destructor
//@{
cfm_hwtestbench::~cfm_hwtestbench(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'hwTestBench destructor' algorithm generated code

  // End of 'hwTestBench destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name pre-elaboration section
//@{
void cfm_hwtestbench::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'hwTestBench pre elaboration' algorithm generated code

  // End of 'hwTestBench pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_hwtestbench::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'hwTestBench post elaboration' algorithm generated code

  // End of 'hwTestBench post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_hwtestbench::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'hwTestBench post simulation' algorithm generated code

  // End of 'hwTestBench post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_hwtestbench::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  cfa_scope.init(CF_FCT_SYSTEM);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_hwtestbench::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'hwTestBench initializations' algorithm generated code
  NbPixelsPerLineMax = NbPixelsPerLineMaxMax;
  NbLinesMax = NbLinesMaxMax;
  // End of 'hwTestBench initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>