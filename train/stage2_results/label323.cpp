//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_device
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CompleteDevice generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_device.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_completedevice
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_device
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'device definitions' algorithm generated code

// End of 'device definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_device ::cfm_device()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), dpv("dpv"), ev_startProcess("startProcess"),
      mq_inputFrame("inputFrame"), mq_outputFrame("outputFrame"),
      p_ev_newFrame("p_ev_newFrame"), sv_processingMode("processingMode") {
  cf_function_container::init();
  // instantiation of models
  hwModel = new cfm_hwmodel("hwModel");
  mqToCommand = new cfm_mqtocommand("mqToCommand");
  swInterface = new cfm_swinterface("swInterface");
  // connections
  // model connect to relation
  hwModel->p_mq_inputFrame(mq_inputFrame.p_target_socket);
  hwModel->p_mq_outputFrame(mq_outputFrame.p_target_socket);
  hwModel->p_sv_processingMode(sv_processingMode.p_target_socket);
  hwModel->p_ev_startProcess(ev_startProcess.p_target_socket);
  // model connect to relation
  mqToCommand->p_mq_outputFrame(mq_outputFrame.p_target_socket);
  mqToCommand->p_mq_storeFrame(mq_storeFrame.p_target_socket);
  // model connect to relation
  swInterface->p_mq_inputFrame(mq_inputFrame.p_target_socket);
  swInterface->p_sv_processingMode(sv_processingMode.p_target_socket);
  swInterface->p_ev_startProcess(ev_startProcess.p_target_socket);
  swInterface->p_mq_storeFrame(mq_storeFrame.p_target_socket);
  // model connect to port
  swInterface->p_mq_dpv(p_mq_dpv);
  swInterface->p_mq_newFrame(p_mq_newFrame);
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_device::~cfm_device(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'device destructor' algorithm generated code

  // End of 'device destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete hwModel;
  delete mqToCommand;
  delete swInterface;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_device::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'device pre elaboration' algorithm generated code

  // End of 'device pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_device::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'device post elaboration' algorithm generated code

  // End of 'device post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_device::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'device post simulation' algorithm generated code

  // End of 'device post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_device::cb_init_attributes() {

  // initialize function attributes
  // initialize relations attributes
  mq_inputFrame.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_inputFrame.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_inputFrame.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_inputFrame.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_inputFrame.cfa_concurrency.init((cf_nonzero_count)1);
  mq_inputFrame.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_inputFrame.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_outputFrame.cfa_send_time.init(cf_expr_duration(1, CF_NS));
  mq_outputFrame.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
  mq_outputFrame.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_outputFrame.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_outputFrame.cfa_concurrency.init((cf_nonzero_count)1);
  mq_outputFrame.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_outputFrame.cfa_receive_threshold.init((cf_nonzero_count)1);
  sv_processingMode.cfa_write_time.init(cf_expr_duration(1, CF_NS));
  sv_processingMode.cfa_read_time.init(cf_expr_duration(1, CF_NS));
  sv_processingMode.cfa_semaphore.init(false);
  sv_processingMode.cfa_concurrency.init((cf_nonzero_count)1);
  ev_startProcess.cfa_set_time.init(cf_expr_duration(1, CF_NS));
  ev_startProcess.cfa_get_time.init(cf_expr_duration(1, CF_NS));
  ev_startProcess.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_device::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'device initializations' algorithm generated code

  // End of 'device initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>