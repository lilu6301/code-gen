READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_baseband_layer
 * rief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_MEMORYCONTROLLER
#define COFS_MODEL_MEMORYCONTROLLER


#include "cfm_memorycontroller_global.h"
#include "cfm_memorycontroller_global_types.h"
#include <vector>
#include "cofluent.h"
#include "cfm_backend.h"
#include "cfm_frontend.h"
#include "cfm_raddrdmux.h"
#include "cfm_waddrdmux.h"
#include "cfm_wdatadmux.h"
#include "dt/cft_defaraddrchn_in.h"
#include "dt/cft_defawaddrchn_in.h"
#include "dt/cft_defbrespchn_in.h"
#include "dt/cft_defdqs_in.h"
#include "dt/cft_defmemreadrequest_in.h"
#include "dt/cft_defmemwriterequest_in.h"
#include "dt/cft_defwriteack_in.h"
#include "dt/cft_defwdatachn_in.h"

class cfm_memorycontroller : public cf_core::cf_function {
public:

typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defaraddrchn> p_mq_ARADDRchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defawaddrchn> p_mq_AWADDRchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defbrespchn> p_mq_BRESPchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defdqs> p_mq_DQs_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defmemreadrequest> p_mq_MemReadRequest_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defmemwriterequest> p_mq_MemWriteRequest_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defwriteack> p_mq_WriteAck_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defwdatachn> p_mq_WDATAchn_t;

/// constructor
cfm_memorycontroller(sc_core::sc_module_name name);

/// destructor
virtual ~cfm_memorycontroller(void);

p_mq_ARADDRchn_t p_mq_ARADDRchn;
p_mq_AWADDRchn_t p_mq_AWADDRchn;
p_mq_BRESPchn_t p_mq_BRESPchn;
p_mq_DQs_t p_mq_DQs;
p_mq_MemReadRequest_t p_mq_MemReadRequest;
p_mq_MemWriteRequest_t p_mq_MemWriteRequest;
p_mq_WriteAck_t p_mq_WriteAck;
p_mq_WDATAchn_t p_mq_WDATAchn;

cfm_backend *BackEnd;
std::vector<cfm_frontend *> MemoryController_vec;
cfm_raddrdmux *RAddrDmux;
cfm_waddrdmux *WAddrDmux;
cfm_wdatadmux *WdataDmux;

protected:
void cb_init_attributes(void);
void cb_init_local_vars(void);

public:
std::vector<mq_ARADDRin_t *> mq_ARADDRin_vec;
std::vector<mq_AWADDRin_t *> mq_AWADDRin_vec;
mq_BRESPchn_t mq_BRESPchn;
mq_DQs_t mq_DQs;
mq_MemReadRequest_t mq_MemReadRequest;
mq_MemWriteRequest_t mq_MemWriteRequest;
std::vector<mq_WriteAck_t *> mq_WriteAck_vec;
std::vector<mq_WDATAin_t *> mq_WDATAin_vec;
};
#endif
//<#!@READ-ONLY-SECTION-END@!#>