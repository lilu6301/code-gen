
/*!
 * \class cfm_memorycontroller
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of memss_ref generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_MEMSS_REF_MEMORYCONTROLLER
#define COFS_MODEL_MEMSS_REF_MEMORYCONTROLLER

#include <vector>
#include "cfm_memss_ref_global.h"
#include "cfm_memss_ref_global_types.h"
#include "cofluent.h"
#include "dp/cfm_memorycontroller_dp_if.h"
#include "cfm_backend.h"
#include "cfm_frontend.h"
#include "cfm_raddrdmux.h"
#include "cfm_waddrdmux.h"
#include "cfm_wdatadmux.h"
#include "dt/cft_defdqs.h"
#include "dt/cft_defrdatachn.h"
#include "dt/cft_defaraddrchn.h"
#include "dt/cft_defbrespchn.h"
#include "dt/cft_defwdatachn.h"
#include "dt/cft_defawaddrchn.h"
#include "dt/cft_defdrcmd.h"
#include "dt/cft_defmemwriterequest.h"
#include "dt/cft_defmemreadrequest.h"
#include "dt/cft_defwriteack.h"
#include "dt/cft_datadread.h"



class cfm_memorycontroller: public cf_core::cf_function_container, public cfm_memorycontroller_dp_if {
public:
	typedef cf_core::cf_message_queue<cft_defrdatachn> mq_ARADDRin_t;
	typedef cf_core::cf_message_queue<cft_defmemreadrequest> mq_MemReadRequest_t;
	typedef cf_core::cf_message_queue<cft_defmemwriterequest> mq_MemWriteRequest_t;
	typedef cf_core::cf_message_queue<cft_defdataread> mq_DataRead_t;
	typedef cf_core::cf_message_queue<cft_defwriteack> mq_WriteAck_t;

	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defdqs> p_mq_DQs_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defrdatachn> p_mq_RDATAchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defaraddrchn> p_mq_ARADDRchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defbrespchn> p_mq_BRESPchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defwdatachn> p_mq_WDATAchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defawaddrchn> p_mq_AWADDRchn_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defdrcmd> p_mq_DDRCommand_t;

	cfm_memorycontroller(sc_core::sc_module_name name);

	virtual ~cfm_memorycontroller(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	std::vector<p_mq_DQs_t*> p_mq_DQs_vec;
	std::vector<p_mq_RDATAchn_t*> p_mq_RDATAchn_vec;
	std::vector<p_mq_ARADDRchn_t*> p_mq_ARADDRchn_vec;
	std::vector<p_mq_BRESPchn_t*> p_mq_BRESPchn_vec;
	std::vector<p_mq_WDATAchn_t*> p_mq_WDATAchn_vec;
	std::vector<p_mq_AWADDRchn_t*> p_mq_AWADDRchn_vec;
	p_mq_DDRCommand_t p_mq_DDRCommand;

public:
	std::vector<cfm_backend*> BackEnd_vec;
	std::vector<cfm_frontend*> FrontEnd_vec;
	cfm_raddrdmux* RAddrDmux;
	cfm_waddrdmux* WAddrDmux;
	std::vector<cfm_wdatadmux*> WdataDmux_vec;

protected:
	void cb_init_attributes(void);
	void cb_init_local_vars(void);

public:
	std::vector<mq_ARADDRin_t*> mq_ARADDRin_vec;
	mq_MemReadRequest_t mq_MemReadRequest;
	mq_MemWriteRequest_t mq_MemWriteRequest;
	std::vector<mq_DataRead_t*> mq_DataRead_vec;
	std::vector<mq_WriteAck_t*> mq_WriteAck_vec;




};

#endif // COFS_MODEL_MEMSS_REF_MEMORYCONTROLLER

