
//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_baseband_layer
 * rief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_MEMORYCONTROLLER
#define COFS_MODEL_MEMORYCONTROLLER


#include "cfm_memorycontroller_global.h"
#include "cfm_memorycontroller_global_types.h"
#include <vector>
#include "cofluent.h"
#include "cfm_backend.h"
#include "cfm_framerender.h"
#include "cfm_raddrdmux.h"
#include "cfm_waddrdmux.h"
#include "cfm_wdatadmux.h"
#include "dt/cft_defaraddrchn_in.h"
#include "dt/cft_defdataread_in.h"
#include "dt/cft_defmemreadrequest_in.h"
#include "dt/cft_defmemwriterequest_in.h"
#include "dt/cft_defwdatachn_in.h"
#include "dt/cft_defwriteack_in.h"

class cfm_memorycontroller : public cf_core::cf_function {
public:
typedef cf_core::cf_message_queue<cft_DefARADDRchn> mq_ARADDRin_t;
typedef cf_core::cf_message_queue<cft_DefAWADDRchn> mq_AWADDRin_t;
typedef cf_core::cf_message_queue<cft_DefDataRead> mq_DataRead_t;
typedef cf_core::cf_message_queue<cft_DefMemReadRequest> mq_MemReadRequest_t;
typedef cf_core::cf_message_queue<cft_DefMemWriteRequest> mq_MemWriteRequest_t;
typedef cf_core::cf_message_queue<cft_DefWDataChn> mq_WDATAin_t;
typedef cf_core::cf_message_queue<cft_DefWriteAck> mq_WriteAck_t;

typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defaraddrchn> p_mq_ARADDRchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defawaddrchn> p_mq_AWADDRchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defbrespchn> p_mq_BRESPchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defddcommand> p_mq_DDRCommand_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defdqs> p_mq_DQs_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defrdatachn> p_mq_RDATAchn_t;
typedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defwdatchn> p_mq_WDATAchn_t;

/// constructor
cfm_memorycontroller(sc_core::sc_module_name name);

/// destructor
virtual ~cfm_memorycontroller(void);

p_mq_ARADDRchn_t p_mq_ARADDRchn;
p_mq_AWADDRchn_t p_mq_AWADDRchn;
p_mq_BRESPchn_t p_mq_BRESPchn;
p_mq_DDRCommand_t p_mq_DDRCommand;
p_mq_DQs_t p_mq_DQs;
p_mq_RDATAchn_t p_mq_RDATAchn;
p_mq_WDATAchn_t p_mq_WDATAchn;

cfm_backend *BackEnd;
std::vector<cfm_framerender *> MemoryController_vec;
cfm_raddrdmux *RAddrDmux;
cfm_waddrdmux *WAddrDmux;
cfm_wdatadmux *WdataDmux;

protected:
void cb_init_attributes(void);
void cb_init_local_vars(void);

public:
std::vector<mq_ARADDRin_t *> mq_ARADDRin_vec;
std::vector<mq_AWADDRin_t *> mq_AWADDRin_vec;
std::vector<mq_DataRead_t *> mq_DataRead_vec;
mq_MemReadRequest_t mq_MemReadRequest;
mq_MemWriteRequest_t mq_MemWriteRequest;
std::vector<mq_WDATAin_t *> mq_WDATAin_vec;
std::vector<mq_WriteAck_t *> mq_WriteAck_vec;
};
#endif
//<#!@READ-ONLY-SECTION-END@!#>