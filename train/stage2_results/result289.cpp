
/*
 * \class cfm_customizedschedulerapp
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of CustomizedSchedulerApp generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_customizedschedulerapp.h"
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_customizedschedulerapp::cfm_customizedschedulerapp(sc_core::sc_module_name name)
cf_application(name)
, mq_MsgQ("MsgQ"
)

{
	cf_application::init();

	for (cf_count i = 0; i < (cf_count)2; i++)
	{
		cfm_consumer* module=new cfm_consumer(cf_string("Consumer[%d]", i).c_str());
		CF_ASSERT( module )
		Consumer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)2; i++)
	{
		cfm_producer* module=new cfm_producer(cf_string("Producer[%d]", i).c_str());
		CF_ASSERT( module )
		Producer_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)2; i++) {
		cfm_consumer* module
		=Consumer_vec[i];
		if(module
				!= nullptr) {
			module->p_mq_MsgQ
			(mq_MsgQ
					.p_target_socket
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)2; i++) {
		cfm_producer* module
		=Producer_vec[i];
		if(module
				!= nullptr) {
			module->p_mq_MsgQ
			(mq_MsgQ
					.p_target_socket
			);
		}
	}



	cf_application::elab_end();
}

cfm_customizedschedulerapp::~cfm_customizedschedulerapp(void) {

	for (vector<cfm_consumer*>::const_iterator vi = Consumer_vec.begin(); vi != Consumer_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_producer*>::const_iterator vi = Producer_vec.begin(); vi != Producer_vec.end(); vi++) {
		delete (*vi);
	}
}

void cfm_customizedschedulerapp::cb_before_elaboration(void) {

}

void cfm_customizedschedulerapp::cb_end_of_elaboration(void) {

}

void cfm_customizedschedulerapp::cb_end_of_simulation(void) {

}

void cfm_customizedschedulerapp::cb_init_attributes() {

	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
	mq_MsgQ.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQ.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_MsgQ.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_MsgQ.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_MsgQ.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_MsgQ.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_MsgQ.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_customizedschedulerapp::cb_init_local_vars(void) {


}


