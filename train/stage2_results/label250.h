//<#!@READ-ONLY-SECTION-START@!#>
/*!
 * \class cfm_producer
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2
 */
#ifndef COFS_MODEL_APPLICATIONMODEL_PRODUCER
#define COFS_MODEL_APPLICATIONMODEL_PRODUCER

/// Model Header includes start
#include "cfm_applicationmodel_global.h"
#include "cfm_applicationmodel_global_types.h"
#include "cofluent.h"
#include "dp/cfm_producer_dp_if.h"
#include "cfm_generator.h"
#include "cfm_sender.h"
//set of dataType, sort alphabetically
#include "dt/cft_defack.h"
#include "dt/cft_defdatavar.h"
#include "dt/cft_defmsg.h"
#include "dt/cft_deftestprod.h"

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'Producer includes' algorithm generated code

//End of 'Producer includes' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
/// Model Header includes end

///    \defgroup dxgProducer Function Producer
//@{
///        \page dxpProducer
//@{
///    \brief Producer function model start
class cfm_producer: public cf_core::cf_function_container,
		public cfm_producer_dp_if {
public:
	/// cfm_producer type define start
	/// relations typedef
//set of relation, sort alphabetically. format: cf_type<dataType> relation_name
	typedef cf_core::cf_event ev_Req_t;
	typedef cf_core::cf_shared_variable<cft_defdatavar> sv_DataVar_t;
	typedef cf_core::cf_shared_variable<cft_deftestprod> sv_TestProd_t;

	/// ports typedef
//set of port, sort alphabetically, format: cf_type<dataType> port_name
	typedef cf_core::cf_mq_initiator_socket<cfm_producer, cft_defack> p_mq_Ack_t;
	typedef cf_core::cf_mq_initiator_socket<cfm_producer, cft_defmsg> p_mq_Msg_t;
	/// cfm_producer type define end

	/// constructor
	cfm_producer(sc_core::sc_module_name name);

	/// destructor
	virtual ~cfm_producer(void);
	virtual void cb_before_elaboration(void);
	virtual void cb_end_of_elaboration(void);
	virtual void cb_end_of_simulation(void);

public:
	/// \name input/output ports
	//@{
//set of port, sort alphabetically. format: port_type port_name
	p_mq_Ack_t p_mq_Ack;
	p_mq_Msg_t p_mq_Msg;
	//@}

public:
	/// \name functions
	//@{
//set of model, sort alphabetically. format: model_type* model_name
	cfm_generator* Generator;
	cfm_sender* Sender;
	//@}

protected:
	/// initialize attributes
	void cb_init_attributes(void);
	/// initialize definitions
	void cb_init_local_vars(void);

public:
	/// \name relations
	//@{
//set of relation, sort alphabetically. format: relation_type relation_name
	ev_Req_t ev_Req;
	sv_DataVar_t sv_DataVar;
	sv_TestProd_t sv_TestProd;
	//@}

	/// Model private fields start
	/// Model private fields end

	/// \name user-defined local declarations
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Producer local declarations' algorithm generated code

	//End of 'Producer local declarations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

};
///    \brief Producer function model end

//@}
//@}
#endif // COFS_MODEL_APPLICATIONMODEL_PRODUCER

//<#!@READ-ONLY-SECTION-END@!#>