
/*
 * \class cfm_rfcomm_layer
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ccf_ref generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_rfcomm_layer.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_ccf
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_rfcomm_layer
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_rfcomm_layer::cfm_rfcomm_layer(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_rfcomm_layer_dp_if()
, p_mq_OBEX_In("p_mq_OBEX_In")
, p_mq_OBEX_Out("p_mq_OBEX_Out")
, p_mq_RFCOMM_Out("p_mq_RFCOMM_Out")
, p_mq_RFCOMM_In("p_mq_RFCOMM_In")
, mq_RFC_Cdts("RFC_Cdts"
)
, mq_RFC_Data("RFC_Data"
)
, mq_RFC_Out1("RFC_Out1"
)
, mq_RFC_Out2("RFC_Out2"
)

{
	cf_function_container::init();
	RFC_Out = new cfm_rfc_out
	("RFC_Out");
	CreditsOrData = new cfm_creditsordata
	("CreditsOrData");
	RFCOMM_Receive = new cfm_rfcomm_receive
	("RFCOMM_Receive");
	RFCOMM_Send = new cfm_rfcomm_send
	("RFCOMM_Send");

	RFC_Out->p_mq_RFC_Out1
	(mq_RFC_Out1
			.p_target_socket
	);
	RFC_Out->p_mq_RFC_Out2
	(mq_RFC_Out2
			.p_target_socket
	);

	CreditsOrData->p_mq_RFC_Data
	(mq_RFC_Data
			.p_target_socket
	);
	CreditsOrData->p_mq_RFC_Cdts
	(mq_RFC_Cdts
			.p_target_socket
	);

	RFCOMM_Receive->p_mq_RFCOMM_In
	(p_mq_RFCOMM_In
	);
	RFCOMM_Receive->p_mq_RFC_Cdts
	(mq_RFC_Cdts
			.p_target_socket
	);

	RFCOMM_Send->p_mq_RFCOMM_Out
	(p_mq_RFCOMM_Out
	);
	RFCOMM_Send->p_mq_RFC_Data
	(mq_RFC_Data
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_rfcomm_layer::~cfm_rfcomm_layer(void) {

	delete RFC_Out;	///ddd
	delete CreditsOrData;	///ddd
	delete RFCOMM_Receive;	///ddd
	delete RFCOMM_Send;	///ddd
}

void cfm_rfcomm_layer::cb_before_elaboration(void) {

}

void cfm_rfcomm_layer::cb_end_of_elaboration(void) {

}

void cfm_rfcomm_layer::cb_end_of_simulation(void) {

}

void cfm_rfcomm_layer::cb_init_attributes() {

	mq_RFC_Cdts.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Cdts.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Cdts.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_RFC_Cdts.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_RFC_Cdts.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_RFC_Cdts.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Cdts.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Data.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Data.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Data.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_RFC_Data.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_RFC_Data.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_RFC_Data.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Data.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Out1.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Out1.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Out1.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_RFC_Out1.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_RFC_Out1.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_RFC_Out1.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Out1.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Out2.cfa_send_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Out2.cfa_receive_time.init(cf_expr_duration(10, CF_US));
	mq_RFC_Out2.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_RFC_Out2.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_RFC_Out2.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_RFC_Out2.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_RFC_Out2.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}

void cfm_rfcomm_layer::cb_init_local_vars(void) {


}


