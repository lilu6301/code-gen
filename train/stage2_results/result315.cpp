
/*
 * \class cfm_hwdevice test
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of MyApplication generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_hwdevice test.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_myapplication
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_hwdevice test
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

void cfm_hwdevice test::startProcess(void) {

}

cfm_hwdevice test::cfm_hwdevice test(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_hwdevice test_dp_if()
, p_sv_inputStream("p_sv_inputStream")
, p_sv_outputStream("p_sv_outputStream")
, mq_inputFrame("inputFrame"
)
, mq_outputFrame("outputFrame"
)
, sv_processingMode("processingMode"
)
, ev_startProcess("startProcess"
)

{
	cf_function_container::init();
	hwModel = new cfm_hwmodel
	("hwModel");
	hwTestBench = new cfm_hwtestbench
	("hwTestBench");

	hwModel->p_mq_inputFrame
	(mq_inputFrame
			.p_target_socket
	);
	hwModel->p_mq_outputFrame
	(mq_outputFrame
			.p_target_socket
	);
	hwModel->p_sv_processingMode
	(sv_processingMode
			.p_target_socket
	);
	hwModel->p_ev_startProcess
	(ev_startProcess
			.p_target_socket
	);

	hwTestBench->p_mq_inputFrame
	(mq_inputFrame
			.p_target_socket
	);
	hwTestBench->p_mq_outputFrame
	(mq_outputFrame
			.p_target_socket
	);
	hwTestBench->p_sv_processingMode
	(sv_processingMode
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_hwdevice test::~cfm_hwdevice test(void) {

	delete hwModel;	///ddd
	delete hwTestBench;	///ddd
}

void cfm_hwdevice test::cb_before_elaboration(void) {

}

void cfm_hwdevice test::cb_end_of_elaboration(void) {

}

void cfm_hwdevice test::cb_end_of_simulation(void) {

}

void cfm_hwdevice test::cb_init_attributes() {

	mq_inputFrame.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_inputFrame.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_inputFrame.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_inputFrame.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_inputFrame.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_inputFrame.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_inputFrame.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_outputFrame.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_outputFrame.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_outputFrame.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_outputFrame.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_outputFrame.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_outputFrame.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_outputFrame.cfa_receive_threshold.init((cf_nonzero_count) 1);
	sv_processingMode.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	sv_processingMode.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	sv_processingMode.cfa_semaphore.init(false);
	sv_processingMode.cfa_concurrency.init((cf_nonzero_count) 1);
	ev_startProcess.cfa_set_time.init(cf_expr_duration(1, CF_NS));
	ev_startProcess.cfa_get_time.init(cf_expr_duration(1, CF_NS));
	ev_startProcess.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);

	return;
}

void cfm_hwdevice test::cb_init_local_vars(void) {


}


