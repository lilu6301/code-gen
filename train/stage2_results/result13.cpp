
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_videoprotocolstack
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator
 * for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_videoprotocolstack.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_softwaredefinedradioapp
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_videoprotocolstack
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'VideoProtocolStack definitions' algorithm generated code

// End of 'VideoProtocolStack definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_videoprotocolstack ::cfm_videoprotocolstack()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), cfm_videoprotocolstack_dp_if(),
      mq_IPToRTP("IPToRTP"), mq_MPEToIP("MPEToIP"),
      p_mq_NetToDpvb("p_mq_NetToDpvb"), p_mq_RTPToApp("p_mq_RTPToApp") {
  cf_function_container::init();
  // instantiation of models
  IPVideo = new cfm_ipvideo("IPVideo");
  MPETSL = new cfm_mpeatsl("MPETSL");
  RTPUDP = new cfm_rtpudp("RTPUDP");
  // connections
  // model connect to relation
  IPVideo->p_mq_IPToRTP(mq_IPToRTP.p_target_socket);
  IPVideo->p_mq_MPEToIP(mq_MPEToIP.p_target_socket);
  // model connect to relation
  MPETSL->p_mq_MPEToIP(mq_MPEToIP.p_target_socket);
  // model connect to port
  MPETSL->p_mq_NetToDpvb(p_mq_NetToDpvb);
  // model connect to relation
  RTPUDP->p_mq_IPToRTP(mq_IPToRTP.p_target_socket);
  // model connect to port
  RTPUDP->p_mq_RTPToApp(p_mq_RTPToApp);
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_videoprotocolstack::~cfm_videoprotocolstack(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'VideoProtocolStack destructor' algorithm generated code

  // End of 'VideoProtocolStack destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete IPVideo;
  delete MPETSL;
  delete RTPUDP;
}
//@}

/// \name pre-elaboration section
//@{
void cfm_videoprotocolstack::cb_before_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'VideoProtocolStack pre elaboration' algorithm generated code

  // End of 'VideoProtocolStack pre elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_videoprotocolstack::cb_end_of_elaboration(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'VideoProtocolStack post elaboration' algorithm generated code

  // End of 'VideoProtocolStack post elaboration' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_videoprotocolstack::cb_end_of_simulation(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'VideoProtocolStack post simulation' algorithm generated code

  // End of 'VideoProtocolStack post simulation' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_videoprotocolstack::cb_init_attributes() {

  // initialize function attributes
  cfa_cycle_period.init(cf_expr_time(10, CF_NS));
  // initialize relations attributes
  mq_IPToRTP.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_IPToRTP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_IPToRTP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_IPToRTP.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_IPToRTP.cfa_concurrency.init((cf_nonzero_count)1);
  mq_IPToRTP.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_IPToRTP.cfa_receive_threshold.init((cf_nonzero_count)1);
  mq_MPEToIP.cfa_send_time.init(cf_expr_duration(10, CF_US));
  mq_MPEToIP.cfa_receive_time.init(cf_expr_duration(10, CF_US));
  mq_MPEToIP.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
  mq_MPEToIP.cfa_queue_capacity.init((cf_nonzero_count)1);
  mq_MPEToIP.cfa_concurrency.init((cf_nonzero_count)1);
  mq_MPEToIP.cfa_send_threshold.init((cf_nonzero_count)1);
  mq_MPEToIP.cfa_receive_threshold.init((cf_nonzero_count)1);

  return;
}
//@}

/// \name initialize definitions
//@{
void cfm_videoprotocolstack::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'VideoProtocolStack initializations' algorithm generated code

  // End of 'VideoProtocolStack initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}

//<#!@READ-ONLY-SECTION-END@!#>