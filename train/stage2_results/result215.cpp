
/*
 * \class cfm_datacenterswitch
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_datacenterswitch.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_datacenter
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_datacenterswitch
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_datacenterswitch::cfm_datacenterswitch(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_datacenterswitch_dp_if()

{
	cf_function_container::init();
	RoutingFunction = new cfm_datacenterswitch_routingfunction
	("RoutingFunction");

	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		cfm_inbound* module=new cfm_inbound(cf_string("Inbound[%d]", i).c_str());
		CF_ASSERT( module )
		Inbound_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		cfm_outbound* module=new cfm_outbound(cf_string("Outbound[%d]", i).c_str());
		CF_ASSERT( module )
		Outbound_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		mq_MsgQRouting_in_t* module=new mq_MsgQRouting_in_t(cf_string("MsgQRouting_in[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQRouting_in_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++)
	{
		mq_MsgQRouting_out_t* module=new mq_MsgQRouting_out_t(cf_string("MsgQRouting_out[%d]", i).c_str());
		CF_ASSERT( module )
		mq_MsgQRouting_out_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb+1); i++)
	{
		p_mq_MsgQToDataCenterSwitch_t* module=new p_mq_MsgQToDataCenterSwitch_t(cf_string("p_mq_MsgQToDataCenterSwitch[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToDataCenterSwitch_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb+1); i++)
	{
		p_mq_MsgQToServerRoom_t* module=new p_mq_MsgQToServerRoom_t(cf_string("p_mq_MsgQToServerRoom[%d]", i).c_str());
		CF_ASSERT( module )
		p_mq_MsgQToServerRoom_vec.push_back(module);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		cfm_inbound* module
		=Inbound_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQRouting_in
				(mq_MsgQRouting_in_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MsgQToDataCenterSwitch
			((*p_mq_MsgQToDataCenterSwitch_vec[
							i
							]
					)
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		cfm_outbound* module
		=Outbound_vec[i];
		if(module
				!= nullptr) {
			for (cf_count j = 0; j < (cf_count)(dpServerRoomNb + 1); j++) {
				module->p_mq_MsgQRouting_out
				(mq_MsgQRouting_out_vec[j]
						->p_target_socket
				);
			}
			module->p_mq_MsgQToServerRoom
			((*p_mq_MsgQToServerRoom_vec[
							i
							]
					)
			);
		}
	}

	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		RoutingFunction->p_mq_MsgQRouting_in
		(mq_MsgQRouting_in_vec[i]
				->p_target_socket
		);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		RoutingFunction->p_mq_MsgQRouting_out
		(mq_MsgQRouting_out_vec[i]
				->p_target_socket
		);
	}



	cf_function_container::elab_end();
}

cfm_datacenterswitch::~cfm_datacenterswitch(void) {

	for (vector<cfm_inbound*>::const_iterator vi = Inbound_vec.begin(); vi != Inbound_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<cfm_outbound*>::const_iterator vi = Outbound_vec.begin(); vi != Outbound_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQRouting_in_t*>::const_iterator vi = mq_MsgQRouting_in_vec.begin(); vi != mq_MsgQRouting_in_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<mq_MsgQRouting_out_t*>::const_iterator vi = mq_MsgQRouting_out_vec.begin(); vi != mq_MsgQRouting_out_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToDataCenterSwitch_t*>::const_iterator vi = p_mq_MsgQToDataCenterSwitch_vec.begin(); vi != p_mq_MsgQToDataCenterSwitch_vec.end(); vi++) {
		delete (*vi);
	}
	for (vector<p_mq_MsgQToServerRoom_t*>::const_iterator vi = p_mq_MsgQToServerRoom_vec.begin(); vi != p_mq_MsgQToServerRoom_vec.end(); vi++) {
		delete (*vi);
	}
	delete RoutingFunction;	///ddd
}

void cfm_datacenterswitch::cb_before_elaboration(void) {

}

void cfm_datacenterswitch::cb_end_of_elaboration(void) {

}

void cfm_datacenterswitch::cb_end_of_simulation(void) {

}

void cfm_datacenterswitch::cb_init_attributes() {

	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		(*mq_MsgQRouting_in_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQRouting_in_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQRouting_in_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQRouting_in_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpDataCenterSwitchPortBufferSize);
		(*mq_MsgQRouting_in_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQRouting_in_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQRouting_in_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}
	for (cf_count i = 0; i < (cf_count)(dpServerRoomNb + 1); i++) {
		(*mq_MsgQRouting_out_vec[i]).cfa_send_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQRouting_out_vec[i]).cfa_receive_time.init(cf_expr_duration(1, CF_NS));
		(*mq_MsgQRouting_out_vec[i]).cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
		(*mq_MsgQRouting_out_vec[i]).cfa_queue_capacity.init((cf_nonzero_count) dpDataCenterSwitchPortBufferSize);
		(*mq_MsgQRouting_out_vec[i]).cfa_concurrency.init((cf_nonzero_count) 1);
		(*mq_MsgQRouting_out_vec[i]).cfa_send_threshold.init((cf_nonzero_count) 1);
		(*mq_MsgQRouting_out_vec[i]).cfa_receive_threshold.init((cf_nonzero_count) 1);
	}

	return;
}

void cfm_datacenterswitch::cb_init_local_vars(void) {


}


