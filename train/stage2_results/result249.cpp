
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_applicationmodel
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_applicationmodel.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ApplicationModel definitions' algorithm generated code

//End of 'ApplicationModel definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_applicationmodel::cfm_applicationmodel(sc_core::sc_module_name name)
cf_application(name)
, mq_Ack("Ack"
)
, mq_Msg("Msg"
)

{
	cf_application::init();
	Producer = new cfm_producer
	("Producer");
	Receiver = new cfm_receiver
	("Receiver");

	// connections
	Producer->p_mq_Msg
	(mq_Msg
			.p_target_socket
	);
	Producer->p_mq_Ack
	(mq_Ack
			.p_target_socket
	);

	Receiver->p_mq_Msg
	(mq_Msg
			.p_target_socket
	);
	Receiver->p_mq_Ack
	(mq_Ack
			.p_target_socket
	);

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ApplicationModel constructor' algorithm generated code

	//End of 'ApplicationModel constructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>

	cf_application::elab_end();
}
//@}

/// \name destructor
//@{
cfm_applicationmodel::~cfm_applicationmodel(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ApplicationModel destructor' algorithm generated code

	//End of 'ApplicationModel destructor' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
	delete Producer;	///ddd
	delete Receiver;	///ddd
}
//@}

/// \name pre-elaboration section
//@{
void cfm_applicationmodel::cb_before_elaboration(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ApplicationModel pre elaboration' algorithm generated code

	//End of 'ApplicationModel pre elaboration' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-elaboration section
//@{
void cfm_applicationmodel::cb_end_of_elaboration(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ApplicationModel post elaboration' algorithm generated code

//End of 'ApplicationModel post elaboration' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name post-simulation section
//@{
void cfm_applicationmodel::cb_end_of_simulation(void) {
	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ApplicationModel post simulation' algorithm generated code

	//End of 'ApplicationModel post simulation' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}

/// \name initialize attributes
//@{
void cfm_applicationmodel::cb_init_attributes() {

// initialize function attributes
	cfa_cycle_period.init(cf_expr_time(10, CF_NS));
// initialize relations attributes
	mq_Ack.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_Ack.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_Ack.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_Ack.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_Ack.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Ack.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_Ack.cfa_receive_threshold.init((cf_nonzero_count) 1);
	mq_Msg.cfa_send_time.init(cf_expr_duration(1, CF_NS));
	mq_Msg.cfa_receive_time.init(cf_expr_duration(1, CF_NS));
	mq_Msg.cfa_queue_policy.init(CF_MQ_POLICY_FIFO_FINITE);
	mq_Msg.cfa_queue_capacity.init((cf_nonzero_count) 1);
	mq_Msg.cfa_concurrency.init((cf_nonzero_count) 1);
	mq_Msg.cfa_send_threshold.init((cf_nonzero_count) 1);
	mq_Msg.cfa_receive_threshold.init((cf_nonzero_count) 1);

	return;
}
//@}

/// \name initialize definitions
//@{
void cfm_applicationmodel::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'ApplicationModel initializations' algorithm generated code

	//End of 'ApplicationModel initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}


//<#!@READ-ONLY-SECTION-END@!#>