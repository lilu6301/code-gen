/*
 * \class cfm_producer
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2
 */
#include "cfm_producer.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_applicationmodel
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_producer
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;



cfm_producer::cfm_producer(sc_core::sc_module_name name)
cf_function_container(name)
, cfm_producer_dp_if()
, p_mq_Msg("p_mq_Msg")
, p_mq_Ack("p_mq_Ack")
, sv_DataVar("DataVar"
)
, ev_Req("Req"
)
, sv_TestProd("TestProd"
)

{
	cf_function_container::init();
	Generator = new cfm_generator
	("Generator");
	Sender = new cfm_sender
	("Sender");

	Generator->p_ev_Req
	(ev_Req
			.p_target_socket
	);
	Generator->p_sv_DataVar
	(sv_DataVar
			.p_target_socket
	);
	Generator->p_sv_TestProd
	(sv_TestProd
			.p_target_socket
	);

	Sender->p_ev_Req
	(ev_Req
			.p_target_socket
	);
	Sender->p_mq_Msg
	(p_mq_Msg
	);
	Sender->p_mq_Ack
	(p_mq_Ack
	);
	Sender->p_sv_DataVar
	(sv_DataVar
			.p_target_socket
	);



	cf_function_container::elab_end();
}

cfm_producer::~cfm_producer(void) {

	delete Generator;	///ddd
	delete Sender;	///ddd
}

void cfm_producer::cb_before_elaboration(void) {

}

void cfm_producer::cb_end_of_elaboration(void) {

}

void cfm_producer::cb_end_of_simulation(void) {

}

void cfm_producer::cb_init_attributes() {

	sv_DataVar.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	sv_DataVar.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	sv_DataVar.cfa_semaphore.init(false);
	sv_DataVar.cfa_concurrency.init((cf_nonzero_count) 1);
	ev_Req.cfa_set_time.init(cf_expr_duration(1, CF_NS));
	ev_Req.cfa_get_time.init(cf_expr_duration(1, CF_NS));
	ev_Req.cfa_event_policy.init(CF_EV_POLICY_BOOLEAN);
	sv_TestProd.cfa_write_time.init(cf_expr_duration(1, CF_NS));
	sv_TestProd.cfa_read_time.init(cf_expr_duration(1, CF_NS));
	sv_TestProd.cfa_semaphore.init(false);
	sv_TestProd.cfa_concurrency.init((cf_nonzero_count) 1);

	return;
}

void cfm_producer::cb_init_local_vars(void) {


}


