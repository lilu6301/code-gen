@READ-ONLY-SECTION-START@!#>
/*
* \class cfm_torswitch
* \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
* \details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2
*/
/// Model Source includes start
#include "cfm_torswitch.h"
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ToRSwitch definitions' algorithm generated code

//End of 'ToRSwitch definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_torswitch ::cfm_torswitch() : 
//instantiation of non-vector Event, MessageQueue, SharedVariable
cf_function(),p_mq_MsgQInboundAGGSwitch("p_mq_MsgQInboundAGGSwitch"),p_mq_MsgQInboundServer("p_mq_MsgQInboundServer"),p_mq_MsgQOutboundAGGSwitch("p_mq_MsgQOutboundAGGSwitch"),p_mq_MsgQOutboundServer("p_mq_MsgQOutboundServer"){
cf_function_container::init();
//instantiation of models
InboundAGGSwitch = new cfm_inboundaggswitch("InboundAGGSwitch");
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		cfm_inboundserver* module = new cfm_inboundserver(
				cf_string("InboundServer[%d]", i).c_str());
		CF_ASSERT (module)
		InboundServer_vec.push_back(module);
	}
OutboundAGGSwitch = new cfm_outboundaggswitch("OutboundAGGSwitch");
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		cfm_outboundserver* module = new cfm_outboundserver(
				cf_string("OutboundServer[%d]", i).c_str());
		CF_ASSERT (module)
		OutboundServer_vec.push_back(module);
	}
RoutingFunction = new cfm_routingfunction("RoutingFunction");
//instantiation of relations
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		MessageQueue<cft_DefPacket> mq_MsgQInboundServer_t;
	}
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		MessageQueue<cft_DefPacket> mq_MsgQOutboundServer_t;
	}
//connections
//model connect to port
InboundAGGSwitch->p_mq_MsgQInboundAGGSwitch(p_mq_MsgQInboundAGGSwitch);
InboundAGGSwitch->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);
//model connect to port
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		cfm_inboundserver* module = InboundServer_vec[i];
		if (module!= nullptr) {
//model connect to port
module->p_mq_MsgQInboundServer_t(p_mq_MsgQInboundServer_t);
module->p_mq_MsgQToServer(p_mq_MsgQToServer);
}
}
//model connect to port
OutboundAGGSwitch->p_mq_MsgQOutboundAGGSwitch(p_mq_MsgQOutboundAGGSwitch);
OutboundAGGSwitch->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);
//model connect to port
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		cfm_outboundserver* module = OutboundServer_vec[i];
		if (module!= nullptr) {
//model connect to port
module->p_mq_MsgQOutboundServer_t(p_mq_MsgQOutboundServer_t);
module->p_mq_MsgQToServer(p_mq_MsgQToServer);
}
}
//model connect to port
RoutingFunction->p_mq_MsgQInboundAGGSwitch(p_mq_MsgQInboundAGGSwitch);
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQInboundServer_t(mq_MsgQInboundServer_vec[i]->p_target_socket);
	}
RoutingFunction->p_mq_MsgQOutboundAGGSwitch(p_mq_MsgQOutboundAGGSwitch);
for (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {
		RoutingFunction->p_mq_MsgQOutboundServer_t(mq_MsgQOutboundServer_vec[i]->p_target_socket);
	}
cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_torswitch::~cfm_torswitch(void) {
//<#!@READ-ONLY-SECTION-END@!#>
//Start of 'ToRSwitch destructor' algorithm generated code

//End of 'ToRSwitch destructor' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>
//deconstruct for models
delete InboundAGGSwitch;
for (vector<cfm_inboundserver*>::const_iterator vi = InboundServer_vec.begin();
			vi!= InboundServer_vec.end(); vi++) {
		delete (*vi);
	}
delete OutboundAGGSwitch;
for (vector<cfm_outboundserver*>::const_iterator vi = OutboundServer_vec.begin();
			vi!= OutboundServer_vec.end(); vi++) {
		delete (*vi);
	}
delete RoutingFunction;
//deconstructor for vector relation
for (vector<mq_MsgQInboundServer_t*>::const_iterator vi = mq_MsgQInboundServer_vec.begin();
			vi!= mq_MsgQInboundServer_vec.end(); vi++) {
		delete (*vi);
	}
for (vector<mq_MsgQOutboundServer_t*>::const_iterator vi = mq_MsgQOutboundServer_vec.begin();
			vi!= mq_MsgQOutboundServer_vec.end(); vi++) {
		delete (*vi);
	}
}


//@{
void cfm_torswitch::cb_init_attributes() {

// initialize function attributes

	return;
}
//@}

//@{
void cfm_torswitch::cb_init_local_vars(void) {

	//<#!@READ-ONLY-SECTION-END@!#>
	//Start of 'Router25 initializations' algorithm generated code

	//End of 'Router25 initializations' algorithm generated code
	//<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>