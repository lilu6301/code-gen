
//<#!@READ-ONLY-SECTION-START@!#>
/*
 * \class cfm_torswitch
 * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation
 * \details Simulation model of datacenter generated by C++ Generator for
 * SystemC/TLM2
 */
/// Model Source includes start
#include "cfm_torswitch.h"
#ifdef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#undef COFLUENT_CONTAINER_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_CONTAINER_FUNCTION_CLASS_NAME cfm_rack
#ifdef COFLUENT_SELF_FUNCTION_CLASS_NAME
#undef COFLUENT_SELF_FUNCTION_CLASS_NAME
#endif
#define COFLUENT_SELF_FUNCTION_CLASS_NAME cfm_torswitch
/// Model Source includes end
using namespace std;
using namespace sc_core;
using namespace cf_dt;
using namespace cf_pk;
using namespace cf_core;

//<#!@READ-ONLY-SECTION-END@!#>
// Start of 'ToRSwitch definitions' algorithm generated code

// End of 'ToRSwitch definitions' algorithm generated code
//<#!@READ-ONLY-SECTION-START@!#>

/// \name constructor
//@{
cfm_torswitch ::cfm_torswitch()
    : // instantiation of non-vector Event, MessageQueue, SharedVariable
      cf_function_container(name), cfm_torswitch_dp_if(),
      mq_MsgQInboundAGGSwitch("MsgQInboundAGGSwitch"),
      mq_MsgQInboundServer("MsgQInboundServer"),
      mq_MsgQOutboundAGGSwitch("MsgQOutboundAGGSwitch"),
      mq_MsgQOutboundServer("MsgQOutboundServer"),
      p_mq_MsgQServerToToRSwitch("p_mq_MsgQServerToToRSwitch"),
      p_mq_MsgQToAggSwitch("p_mq_MsgQToAggSwitch"),
      p_mq_MsgQToRack("p_mq_MsgQToRack"),
      p_mq_MsgQToServer("p_mq_MsgQToServer") {
  cf_function_container::init();
  // instantiation of models
  InboundAGGSwitch = new cfm_inboundaggswitch("InboundAGGSwitch");
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    cfm_inboundserver *module =
        new cfm_inboundserver(cf_string("InboundServer[%d]", i).c_str());
    CF_ASSERT(module)
    InboundServer_vec.push_back(module);
  }
  OutboundAGGSwitch = new cfm_outboundaggswitch("OutboundAGGSwitch");
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    cfm_outboundserver *module =
        new cfm_outboundserver(cf_string("OutboundServer[%d]", i).c_str());
    CF_ASSERT(module)
    OutboundServer_vec.push_back(module);
  }
  RoutingFunction = new cfm_routingfunction("RoutingFunction");
  // instantiation of relations
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    mq_MsgQInboundServer_t *module =
        new mq_MsgQInboundServer_t(cf_string("MsgQInboundServer[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQInboundServer_vec.push_back(module);
  }
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    mq_MsgQOutboundServer_t *module =
        new mq_MsgQOutboundServer_t(cf_string("MsgQOutboundServer[%d]", i).c_str());
    CF_ASSERT(module)
    mq_MsgQOutboundServer_vec.push_back(module);
  }
  // connections
  // model connect to relation
  InboundAGGSwitch->p_mq_MsgQInboundAGGSwitch(
      mq_MsgQInboundAGGSwitch.p_target_socket);
  // model connect to port
  InboundAGGSwitch->p_mq_MsgQToRack(p_mq_MsgQToRack);
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    cfm_inboundserver *module = InboundServer_vec[i];
    if (module != nullptr) {
      // model connect to relation
      for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
        module->p_mq_MsgQInboundServer(
            mq_MsgQInboundServer_vec[j]->p_target_socket);
      }
      // model connect to port
      module->p_mq_MsgQServerToToRSwitch(p_mq_MsgQServerToToRSwitch);
    }
  }
  // model connect to relation
  OutboundAGGSwitch->p_mq_MsgQOutboundAGGSwitch(
      mq_MsgQOutboundAGGSwitch.p_target_socket);
  // model connect to port
  OutboundAGGSwitch->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    cfm_outboundserver *module = OutboundServer_vec[i];
    if (module != nullptr) {
      // model connect to relation
      for (cf_count j = 0; j < (cf_count)(dpServerPerRackNb + 1); j++) {
        module->p_mq_MsgQOutboundServer(
            mq_MsgQOutboundServer_vec[j]->p_target_socket);
      }
      // model connect to port
      module->p_mq_MsgQToServer(p_mq_MsgQToServer);
    }
  }
  // model connect to relation
  RoutingFunction->p_mq_MsgQInboundAGGSwitch(
      mq_MsgQInboundAGGSwitch.p_target_socket);
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    RoutingFunction->p_mq_MsgQInboundServer(
        mq_MsgQInboundServer_vec[i]->p_target_socket);
  }
  RoutingFunction->p_mq_MsgQOutboundAGGSwitch(
      mq_MsgQOutboundAGGSwitch.p_target_socket);
  for (cf_count i = 0; i < (cf_count)(dpServerPerRackNb + 1); i++) {
    RoutingFunction->p_mq_MsgQOutboundServer(
        mq_MsgQOutboundServer_vec[i]->p_target_socket);
  }
  cf_function_container::elab_end();
}
//@}

/// \name destructor
//@{
cfm_torswitch::~cfm_torswitch(void) {
  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'ToRSwitch destructor' algorithm generated code

  // End of 'ToRSwitch destructor' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
  // deconstruct for models
  delete InboundAGGSwitch;
  for (vector<cfm_inboundserver *>::const_iterator vi =
           InboundServer_vec.begin();
       vi != InboundServer_vec.end(); vi++) {
    delete (*vi);
  }
  delete OutboundAGGSwitch;
  for (vector<cfm_outboundserver *>::const_iterator vi =
           OutboundServer_vec.begin();
       vi != OutboundServer_vec.end(); vi++) {
    delete (*vi);
  }
  delete RoutingFunction;
  // deconstructor for vector relation
  for (vector<mq_MsgQInboundServer_t *>::const_iterator vi =
           mq_MsgQInboundServer_vec.begin();
       vi != mq_MsgQInboundServer_vec.end(); vi++) {
    delete (*vi);
  }
  for (vector<mq_MsgQOutboundServer_t *>::const_iterator vi =
           mq_MsgQOutboundServer_vec.begin();
       vi != mq_MsgQOutboundServer_vec.end(); vi++) {
    delete (*vi);
  }
}

//@{
void cfm_torswitch::cb_init_attributes() {

  // initialize function attributes

  return;
}
//@}

//@{
void cfm_torswitch::cb_init_local_vars(void) {

  //<#!@READ-ONLY-SECTION-END@!#>
  // Start of 'Router25 initializations' algorithm generated code

  // End of 'Router25 initializations' algorithm generated code
  //<#!@READ-ONLY-SECTION-START@!#>
}
//@}
//<#!@READ-ONLY-SECTION-END@!#>