[
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'SoftwareDefinedRadioApp', 'models': [{'name': 'MobilePhone', 'type': 'cofluent:Function'}, {'name': 'Networks', 'type': 'cofluent:Function'}, {'name': 'User', 'type': 'cofluent:Function'}], 'relations': [{'name': 'NetToDVB', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['MobilePhone', 'Networks']}, {'name': 'NetToUMTS', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'Networks']}, {'name': 'Request', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'User']}, {'name': 'Response', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'User']}, {'name': 'UMTSToNet', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'Networks']}, {'name': 'Video', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['MobilePhone', 'User']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SOFTWAREDEFINEDRADIOAPP\n#define COFS_MODEL_SOFTWAREDEFINEDRADIOAPP\n\n\n#include \"cfm_softwaredefinedradioapp_global.h\"\n#include \"cfm_softwaredefinedradioapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_mobilephone.h\"\n#include \"cfm_networks.h\"\n#include \"cfm_user.h\"\n#include \"dt/cft_defcall_in.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_softwaredefinedradioapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefVideo> mq_NetToDVB_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_NetToUMTS_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_Request_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_Response_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_UMTSToNet_t;\ntypedef cf_core::cf_message_queue<cft_DefVideo> mq_Video_t;\n\n/// constructor\ncfm_softwaredefinedradioapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_softwaredefinedradioapp(void);\n\ncfm_mobilephone *MobilePhone;\ncfm_networks *Networks;\ncfm_user *User;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_NetToDVB_t mq_NetToDVB;\nmq_NetToUMTS_t mq_NetToUMTS;\nmq_Request_t mq_Request;\nmq_Response_t mq_Response;\nmq_UMTSToNet_t mq_UMTSToNet;\nmq_Video_t mq_Video;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'SoftwareDefinedRadioApp', 'models': [{'name': 'MobilePhone', 'type': 'cofluent:Function'}, {'name': 'Networks', 'type': 'cofluent:Function'}, {'name': 'User', 'type': 'cofluent:Function'}], 'relations': [{'name': 'NetToDVB', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['MobilePhone', 'Networks']}, {'name': 'NetToUMTS', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'Networks']}, {'name': 'Request', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'User']}, {'name': 'Response', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'User']}, {'name': 'UMTSToNet', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['MobilePhone', 'Networks']}, {'name': 'Video', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['MobilePhone', 'User']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_softwaredefinedradioapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_softwaredefinedradioapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'SoftwareDefinedRadioApp definitions' algorithm generated code\n\n//End of 'SoftwareDefinedRadioApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_softwaredefinedradioapp ::cfm_softwaredefinedradioapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_NetToDVB(\"NetToDVB\"),mq_NetToUMTS(\"NetToUMTS\"),mq_Request(\"Request\"),mq_Response(\"Response\"),mq_UMTSToNet(\"UMTSToNet\"),mq_Video(\"Video\"){\ncf_application::init();\n//instantiation of models\nMobilePhone = new cfm_mobilephone(\"MobilePhone\");\nNetworks = new cfm_networks(\"Networks\");\nUser = new cfm_user(\"User\");\n//connections\n//model connect to relation\nMobilePhone->p_mq_NetToDVB(mq_NetToDVB.p_target_socket);\nMobilePhone->p_mq_NetToUMTS(mq_NetToUMTS.p_target_socket);\nMobilePhone->p_mq_Request(mq_Request.p_target_socket);\nMobilePhone->p_mq_Response(mq_Response.p_target_socket);\nMobilePhone->p_mq_UMTSToNet(mq_UMTSToNet.p_target_socket);\nMobilePhone->p_mq_Video(mq_Video.p_target_socket);\n//model connect to relation\nNetworks->p_mq_NetToDVB(mq_NetToDVB.p_target_socket);\nNetworks->p_mq_NetToUMTS(mq_NetToUMTS.p_target_socket);\nNetworks->p_mq_UMTSToNet(mq_UMTSToNet.p_target_socket);\n//model connect to relation\nUser->p_mq_Request(mq_Request.p_target_socket);\nUser->p_mq_Response(mq_Response.p_target_socket);\nUser->p_mq_Video(mq_Video.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_softwaredefinedradioapp::~cfm_softwaredefinedradioapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'SoftwareDefinedRadioApp destructor' algorithm generated code\n\n//End of 'SoftwareDefinedRadioApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete MobilePhone;\ndelete Networks;\ndelete User;\n}\n\n\n//@{\nvoid cfm_softwaredefinedradioapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_softwaredefinedradioapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MobilePhone', 'type': 'cofluent:Function', 'models': [{'name': 'ApplicationLayer', 'type': 'cofluent:Function'}, {'name': 'CallProtocolStack', 'type': 'cofluent:Function'}, {'name': 'Controller', 'type': 'cofluent:Function'}, {'name': 'VideoProtocolStack', 'type': 'cofluent:Function'}], 'ports': [{'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['VideoProtocolStack']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['CallProtocolStack']}, {'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer']}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallProtocolStack']}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['ApplicationLayer']}], 'relations': [{'name': 'AppToCtrl', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer', 'Controller']}, {'name': 'AppToHTTP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer', 'CallProtocolStack']}, {'name': 'HTTPToApp', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer', 'CallProtocolStack']}, {'name': 'RTPToApp', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['ApplicationLayer', 'VideoProtocolStack']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MOBILEPHONE\n#define COFS_MODEL_MOBILEPHONE\n\n\n#include \"cfm_mobilephone_global.h\"\n#include \"cfm_mobilephone_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_applicationlayer.h\"\n#include \"cfm_callprotocolstack.h\"\n#include \"cfm_controller.h\"\n#include \"cfm_videoprotocolstack.h\"\n#include \"dt/cft_defcall_in.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_mobilephone : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_AppToCtrl_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_AppToHTTP_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_HTTPToApp_t;\ntypedef cf_core::cf_message_queue<cft_DefVideo> mq_RTPToApp_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_mobilephone, cft_defvideo> p_mq_NetToDVB_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_mobilephone, cft_defcall> p_mq_NetToUMTS_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_mobilephone, cft_defcall> p_mq_Request_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_mobilephone, cft_defcall> p_mq_Response_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_mobilephone, cft_defcall> p_mq_UMTSToNet_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_mobilephone, cft_defvideo> p_mq_Video_t;\n\n/// constructor\ncfm_mobilephone(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_mobilephone(void);\n\np_mq_NetToDVB_t p_mq_NetToDVB;\np_mq_NetToUMTS_t p_mq_NetToUMTS;\np_mq_Request_t p_mq_Request;\np_mq_Response_t p_mq_Response;\np_mq_UMTSToNet_t p_mq_UMTSToNet;\np_mq_Video_t p_mq_Video;\n\ncfm_applicationlayer *ApplicationLayer;\ncfm_callprotocolstack *CallProtocolStack;\ncfm_controller *Controller;\ncfm_videoprotocolstack *VideoProtocolStack;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_AppToCtrl_t mq_AppToCtrl;\nmq_AppToHTTP_t mq_AppToHTTP;\nmq_HTTPToApp_t mq_HTTPToApp;\nmq_RTPToApp_t mq_RTPToApp;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MobilePhone', 'type': 'cofluent:Function', 'models': [{'name': 'ApplicationLayer', 'type': 'cofluent:Function'}, {'name': 'CallProtocolStack', 'type': 'cofluent:Function'}, {'name': 'Controller', 'type': 'cofluent:Function'}, {'name': 'VideoProtocolStack', 'type': 'cofluent:Function'}], 'ports': [{'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['VideoProtocolStack']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['CallProtocolStack']}, {'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer']}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallProtocolStack']}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['ApplicationLayer']}], 'relations': [{'name': 'AppToCtrl', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer', 'Controller']}, {'name': 'AppToHTTP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer', 'CallProtocolStack']}, {'name': 'HTTPToApp', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['ApplicationLayer', 'CallProtocolStack']}, {'name': 'RTPToApp', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['ApplicationLayer', 'VideoProtocolStack']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_mobilephone\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_mobilephone.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MobilePhone definitions' algorithm generated code\n\n//End of 'MobilePhone definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_mobilephone ::cfm_mobilephone() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_AppToCtrl(\"AppToCtrl\"),mq_AppToHTTP(\"AppToHTTP\"),mq_HTTPToApp(\"HTTPToApp\"),mq_RTPToApp(\"RTPToApp\"),p_mq_NetToDVB(\"p_mq_NetToDVB\"),p_mq_NetToUMTS(\"p_mq_NetToUMTS\"),p_mq_Request(\"p_mq_Request\"),p_mq_Response(\"p_mq_Response\"),p_mq_UMTSToNet(\"p_mq_UMTSToNet\"),p_mq_Video(\"p_mq_Video\"){\ncf_function_container::init();\n//instantiation of models\nApplicationLayer = new cfm_applicationlayer(\"ApplicationLayer\");\nCallProtocolStack = new cfm_callprotocolstack(\"CallProtocolStack\");\nController = new cfm_controller(\"Controller\");\nVideoProtocolStack = new cfm_videoprotocolstack(\"VideoProtocolStack\");\n//connections\n//model connect to relation\nApplicationLayer->p_mq_AppToCtrl(mq_AppToCtrl.p_target_socket);\nApplicationLayer->p_mq_AppToHTTP(mq_AppToHTTP.p_target_socket);\nApplicationLayer->p_mq_HTTPToApp(mq_HTTPToApp.p_target_socket);\nApplicationLayer->p_mq_RTPToApp(mq_RTPToApp.p_target_socket);\n//model connect to port\nApplicationLayer->p_mq_Request(p_mq_Request);\nApplicationLayer->p_mq_Response(p_mq_Response);\nApplicationLayer->p_mq_Video(p_mq_Video);\n//model connect to relation\nCallProtocolStack->p_mq_AppToHTTP(mq_AppToHTTP.p_target_socket);\nCallProtocolStack->p_mq_HTTPToApp(mq_HTTPToApp.p_target_socket);\n//model connect to port\nCallProtocolStack->p_mq_NetToUMTS(p_mq_NetToUMTS);\nCallProtocolStack->p_mq_UMTSToNet(p_mq_UMTSToNet);\n//model connect to relation\nController->p_mq_AppToCtrl(mq_AppToCtrl.p_target_socket);\n//model connect to relation\nVideoProtocolStack->p_mq_RTPToApp(mq_RTPToApp.p_target_socket);\n//model connect to port\nVideoProtocolStack->p_mq_NetToDVB(p_mq_NetToDVB);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_mobilephone::~cfm_mobilephone(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MobilePhone destructor' algorithm generated code\n\n//End of 'MobilePhone destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete ApplicationLayer;\ndelete CallProtocolStack;\ndelete Controller;\ndelete VideoProtocolStack;\n}\n\n\n//@{\nvoid cfm_mobilephone::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_mobilephone::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Networks', 'type': 'cofluent:Function', 'models': [{'name': 'BroadcastNetwork', 'type': 'cofluent:Function'}, {'name': 'ClockGenerator', 'type': 'cofluent:Function'}, {'name': 'InteractiveNetwork', 'type': 'cofluent:Function'}], 'ports': [{'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['BroadcastNetwork']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['InteractiveNetwork']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['InteractiveNetwork']}], 'relations': [{'name': 'BurstClock', 'type': 'cofluent:Event', 'connectTo': ['BroadcastNetwork', 'ClockGenerator']}, {'name': 'VideoFiles', 'type': 'cofluent:SharedVariable', 'dataType': 'DefNet', 'connectTo': ['InteractiveNetwork', 'BroadcastNetwork']}, {'name': 'VideoNet', 'type': 'cofluent:MessageQueue', 'dataType': 'DefNet', 'connectTo': ['InteractiveNetwork', 'BroadcastNetwork']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_NETWORKS\n#define COFS_MODEL_NETWORKS\n\n\n#include \"cfm_networks_global.h\"\n#include \"cfm_networks_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_broadcastnetwork.h\"\n#include \"cfm_clockgenerator.h\"\n#include \"cfm_interactivenetwork.h\"\n#include \"dt/cft_defcall_in.h\"\n#include \"dt/cft_defnet_in.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_networks : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_event ev_BurstClock_t;\ntypedef cf_core::cf_shared_variable<cft_DefNet> sv_VideoFiles_t;\ntypedef cf_core::cf_message_queue<cft_DefNet> mq_VideoNet_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_networks, cft_defvideo> p_mq_NetToDVB_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_networks, cft_defcall> p_mq_NetToUMTS_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_networks, cft_defcall> p_mq_UMTSToNet_t;\n\n/// constructor\ncfm_networks(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_networks(void);\n\np_mq_NetToDVB_t p_mq_NetToDVB;\np_mq_NetToUMTS_t p_mq_NetToUMTS;\np_mq_UMTSToNet_t p_mq_UMTSToNet;\n\ncfm_broadcastnetwork *BroadcastNetwork;\ncfm_clockgenerator *ClockGenerator;\ncfm_interactivenetwork *InteractiveNetwork;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nev_BurstClock_t ev_BurstClock;\nsv_VideoFiles_t sv_VideoFiles;\nmq_VideoNet_t mq_VideoNet;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Networks', 'type': 'cofluent:Function', 'models': [{'name': 'BroadcastNetwork', 'type': 'cofluent:Function'}, {'name': 'ClockGenerator', 'type': 'cofluent:Function'}, {'name': 'InteractiveNetwork', 'type': 'cofluent:Function'}], 'ports': [{'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['BroadcastNetwork']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['InteractiveNetwork']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['InteractiveNetwork']}], 'relations': [{'name': 'BurstClock', 'type': 'cofluent:Event', 'connectTo': ['BroadcastNetwork', 'ClockGenerator']}, {'name': 'VideoFiles', 'type': 'cofluent:SharedVariable', 'dataType': 'DefNet', 'connectTo': ['InteractiveNetwork', 'BroadcastNetwork']}, {'name': 'VideoNet', 'type': 'cofluent:MessageQueue', 'dataType': 'DefNet', 'connectTo': ['InteractiveNetwork', 'BroadcastNetwork']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_networks\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_networks.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Networks definitions' algorithm generated code\n\n//End of 'Networks definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_networks ::cfm_networks() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_BurstClock(\"BurstClock\"),mq_VideoNet(\"VideoNet\"),p_mq_NetToDVB(\"p_mq_NetToDVB\"),p_mq_NetToUMTS(\"p_mq_NetToUMTS\"),p_mq_UMTSToNet(\"p_mq_UMTSToNet\"),sv_VideoFiles(\"VideoFiles\"){\ncf_function_container::init();\n//instantiation of models\nBroadcastNetwork = new cfm_broadcastnetwork(\"BroadcastNetwork\");\nClockGenerator = new cfm_clockgenerator(\"ClockGenerator\");\nInteractiveNetwork = new cfm_interactivenetwork(\"InteractiveNetwork\");\n//connections\n//model connect to relation\nBroadcastNetwork->p_ev_BurstClock(ev_BurstClock.p_target_socket);\nBroadcastNetwork->p_sv_VideoFiles(sv_VideoFiles.p_target_socket);\nBroadcastNetwork->p_mq_VideoNet(mq_VideoNet.p_target_socket);\n//model connect to port\nBroadcastNetwork->p_mq_NetToDVB(p_mq_NetToDVB);\n//model connect to relation\nClockGenerator->p_ev_BurstClock(ev_BurstClock.p_target_socket);\n//model connect to relation\nInteractiveNetwork->p_sv_VideoFiles(sv_VideoFiles.p_target_socket);\nInteractiveNetwork->p_mq_VideoNet(mq_VideoNet.p_target_socket);\n//model connect to port\nInteractiveNetwork->p_mq_NetToUMTS(p_mq_NetToUMTS);\nInteractiveNetwork->p_mq_UMTSToNet(p_mq_UMTSToNet);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_networks::~cfm_networks(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Networks destructor' algorithm generated code\n\n//End of 'Networks destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BroadcastNetwork;\ndelete ClockGenerator;\ndelete InteractiveNetwork;\n}\n\n\n//@{\nvoid cfm_networks::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_networks::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'User', 'type': 'cofluent:Function', 'models': [{'name': 'Reading', 'type': 'cofluent:Function'}, {'name': 'Requesting', 'type': 'cofluent:Function'}, {'name': 'Watching', 'type': 'cofluent:Function'}], 'ports': [{'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['Requesting', 'Reading']}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['Reading']}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['Watching']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_USER\n#define COFS_MODEL_USER\n\n\n#include \"cfm_user_global.h\"\n#include \"cfm_user_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_reading.h\"\n#include \"cfm_requesting.h\"\n#include \"cfm_watching.h\"\n#include \"dt/cft_defcall_in.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_user : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_user, cft_defcall> p_mq_Request_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_user, cft_defcall> p_mq_Response_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_user, cft_defvideo> p_mq_Video_t;\n\n/// constructor\ncfm_user(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_user(void);\n\np_mq_Request_t p_mq_Request;\np_mq_Response_t p_mq_Response;\np_mq_Video_t p_mq_Video;\n\ncfm_reading *Reading;\ncfm_requesting *Requesting;\ncfm_watching *Watching;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'User', 'type': 'cofluent:Function', 'models': [{'name': 'Reading', 'type': 'cofluent:Function'}, {'name': 'Requesting', 'type': 'cofluent:Function'}, {'name': 'Watching', 'type': 'cofluent:Function'}], 'ports': [{'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['Requesting', 'Reading']}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['Reading']}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['Watching']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_user\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_user.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'User definitions' algorithm generated code\n\n//End of 'User definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_user ::cfm_user() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_Request(\"p_mq_Request\"),p_mq_Response(\"p_mq_Response\"),p_mq_Video(\"p_mq_Video\"){\ncf_function_container::init();\n//instantiation of models\nReading = new cfm_reading(\"Reading\");\nRequesting = new cfm_requesting(\"Requesting\");\nWatching = new cfm_watching(\"Watching\");\n//connections\n//model connect to port\nReading->p_mq_Request(p_mq_Request);\nReading->p_mq_Response(p_mq_Response);\n//model connect to port\nRequesting->p_mq_Request(p_mq_Request);\n//model connect to port\nWatching->p_mq_Video(p_mq_Video);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_user::~cfm_user(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'User destructor' algorithm generated code\n\n//End of 'User destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Reading;\ndelete Requesting;\ndelete Watching;\n}\n\n\n//@{\nvoid cfm_user::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_user::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ApplicationLayer', 'type': 'cofluent:Function', 'models': [{'name': 'CallApplication', 'type': 'cofluent:Function'}, {'name': 'VideoApplication', 'type': 'cofluent:Function'}], 'ports': [{'name': 'AppToCtrl', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['VideoApplication']}, {'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['VideoApplication']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_APPLICATIONLAYER\n#define COFS_MODEL_APPLICATIONLAYER\n\n\n#include \"cfm_applicationlayer_global.h\"\n#include \"cfm_applicationlayer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_callapplication.h\"\n#include \"cfm_videoapplication.h\"\n#include \"dt/cft_defcall_in.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_applicationlayer : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defcall> p_mq_AppToCtrl_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defcall> p_mq_AppToHTTP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defcall> p_mq_HTTPToApp_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defvideo> p_mq_RTPToApp_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defcall> p_mq_Request_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defcall> p_mq_Response_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_applicationlayer, cft_defvideo> p_mq_Video_t;\n\n/// constructor\ncfm_applicationlayer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_applicationlayer(void);\n\np_mq_AppToCtrl_t p_mq_AppToCtrl;\np_mq_AppToHTTP_t p_mq_AppToHTTP;\np_mq_HTTPToApp_t p_mq_HTTPToApp;\np_mq_RTPToApp_t p_mq_RTPToApp;\np_mq_Request_t p_mq_Request;\np_mq_Response_t p_mq_Response;\np_mq_Video_t p_mq_Video;\n\ncfm_callapplication *CallApplication;\ncfm_videoapplication *VideoApplication;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ApplicationLayer', 'type': 'cofluent:Function', 'models': [{'name': 'CallApplication', 'type': 'cofluent:Function'}, {'name': 'VideoApplication', 'type': 'cofluent:Function'}], 'ports': [{'name': 'AppToCtrl', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['VideoApplication']}, {'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['CallApplication']}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['VideoApplication']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_applicationlayer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_applicationlayer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationLayer definitions' algorithm generated code\n\n//End of 'ApplicationLayer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_applicationlayer ::cfm_applicationlayer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_AppToCtrl(\"p_mq_AppToCtrl\"),p_mq_AppToHTTP(\"p_mq_AppToHTTP\"),p_mq_HTTPToApp(\"p_mq_HTTPToApp\"),p_mq_RTPToApp(\"p_mq_RTPToApp\"),p_mq_Request(\"p_mq_Request\"),p_mq_Response(\"p_mq_Response\"),p_mq_Video(\"p_mq_Video\"){\ncf_function_container::init();\n//instantiation of models\nCallApplication = new cfm_callapplication(\"CallApplication\");\nVideoApplication = new cfm_videoapplication(\"VideoApplication\");\n//connections\n//model connect to port\nCallApplication->p_mq_AppToCtrl(p_mq_AppToCtrl);\nCallApplication->p_mq_AppToHTTP(p_mq_AppToHTTP);\nCallApplication->p_mq_HTTPToApp(p_mq_HTTPToApp);\nCallApplication->p_mq_Request(p_mq_Request);\nCallApplication->p_mq_Response(p_mq_Response);\n//model connect to port\nVideoApplication->p_mq_RTPToApp(p_mq_RTPToApp);\nVideoApplication->p_mq_Video(p_mq_Video);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_applicationlayer::~cfm_applicationlayer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationLayer destructor' algorithm generated code\n\n//End of 'ApplicationLayer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete CallApplication;\ndelete VideoApplication;\n}\n\n\n//@{\nvoid cfm_applicationlayer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_applicationlayer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CallProtocolStack', 'type': 'cofluent:Function', 'models': [{'name': 'HTTPTCP', 'type': 'cofluent:Function'}, {'name': 'IPCall', 'type': 'cofluent:Function'}, {'name': 'UMTS', 'type': 'cofluent:Function'}], 'ports': [{'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP']}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['UMTS']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['UMTS']}], 'relations': [{'name': 'HTTPToIP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP', 'IPCall']}, {'name': 'IPToHTTP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP', 'IPCall']}, {'name': 'IPToUMTS', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['IPCall', 'UMTS']}, {'name': 'UMTSToIP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['IPCall', 'UMTS']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CALLPROTOCOLSTACK\n#define COFS_MODEL_CALLPROTOCOLSTACK\n\n\n#include \"cfm_callprotocolstack_global.h\"\n#include \"cfm_callprotocolstack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_httptcp.h\"\n#include \"cfm_ipcall.h\"\n#include \"cfm_umts.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_callprotocolstack : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_HTTPToIP_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_IPToHTTP_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_IPToUMTS_t;\ntypedef cf_core::cf_message_queue<cft_DefCall> mq_UMTSToIP_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_callprotocolstack, cft_defcall> p_mq_AppToHTTP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_callprotocolstack, cft_defcall> p_mq_HTTPToApp_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_callprotocolstack, cft_defcall> p_mq_NetToUMTS_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_callprotocolstack, cft_defcall> p_mq_UMTSToNet_t;\n\n/// constructor\ncfm_callprotocolstack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_callprotocolstack(void);\n\np_mq_AppToHTTP_t p_mq_AppToHTTP;\np_mq_HTTPToApp_t p_mq_HTTPToApp;\np_mq_NetToUMTS_t p_mq_NetToUMTS;\np_mq_UMTSToNet_t p_mq_UMTSToNet;\n\ncfm_httptcp *HTTPTCP;\ncfm_ipcall *IPCall;\ncfm_umts *UMTS;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_HTTPToIP_t mq_HTTPToIP;\nmq_IPToHTTP_t mq_IPToHTTP;\nmq_IPToUMTS_t mq_IPToUMTS;\nmq_UMTSToIP_t mq_UMTSToIP;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CallProtocolStack', 'type': 'cofluent:Function', 'models': [{'name': 'HTTPTCP', 'type': 'cofluent:Function'}, {'name': 'IPCall', 'type': 'cofluent:Function'}, {'name': 'UMTS', 'type': 'cofluent:Function'}], 'ports': [{'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP']}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['UMTS']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['UMTS']}], 'relations': [{'name': 'HTTPToIP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP', 'IPCall']}, {'name': 'IPToHTTP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP', 'IPCall']}, {'name': 'IPToUMTS', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['IPCall', 'UMTS']}, {'name': 'UMTSToIP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefCall', 'connectTo': ['IPCall', 'UMTS']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_callprotocolstack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_callprotocolstack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CallProtocolStack definitions' algorithm generated code\n\n//End of 'CallProtocolStack definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_callprotocolstack ::cfm_callprotocolstack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_HTTPToIP(\"HTTPToIP\"),mq_IPToHTTP(\"IPToHTTP\"),mq_IPToUMTS(\"IPToUMTS\"),mq_UMTSToIP(\"UMTSToIP\"),p_mq_AppToHTTP(\"p_mq_AppToHTTP\"),p_mq_HTTPToApp(\"p_mq_HTTPToApp\"),p_mq_NetToUMTS(\"p_mq_NetToUMTS\"),p_mq_UMTSToNet(\"p_mq_UMTSToNet\"){\ncf_function_container::init();\n//instantiation of models\nHTTPTCP = new cfm_httptcp(\"HTTPTCP\");\nIPCall = new cfm_ipcall(\"IPCall\");\nUMTS = new cfm_umts(\"UMTS\");\n//connections\n//model connect to relation\nHTTPTCP->p_mq_HTTPToIP(mq_HTTPToIP.p_target_socket);\nHTTPTCP->p_mq_IPToHTTP(mq_IPToHTTP.p_target_socket);\n//model connect to port\nHTTPTCP->p_mq_AppToHTTP(p_mq_AppToHTTP);\nHTTPTCP->p_mq_HTTPToApp(p_mq_HTTPToApp);\n//model connect to relation\nIPCall->p_mq_HTTPToIP(mq_HTTPToIP.p_target_socket);\nIPCall->p_mq_IPToHTTP(mq_IPToHTTP.p_target_socket);\nIPCall->p_mq_IPToUMTS(mq_IPToUMTS.p_target_socket);\nIPCall->p_mq_UMTSToIP(mq_UMTSToIP.p_target_socket);\n//model connect to relation\nUMTS->p_mq_IPToUMTS(mq_IPToUMTS.p_target_socket);\nUMTS->p_mq_UMTSToIP(mq_UMTSToIP.p_target_socket);\n//model connect to port\nUMTS->p_mq_NetToUMTS(p_mq_NetToUMTS);\nUMTS->p_mq_UMTSToNet(p_mq_UMTSToNet);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_callprotocolstack::~cfm_callprotocolstack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CallProtocolStack destructor' algorithm generated code\n\n//End of 'CallProtocolStack destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete HTTPTCP;\ndelete IPCall;\ndelete UMTS;\n}\n\n\n//@{\nvoid cfm_callprotocolstack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_callprotocolstack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'VideoProtocolStack', 'type': 'cofluent:Function', 'models': [{'name': 'IPVideo', 'type': 'cofluent:Function'}, {'name': 'MPETSL', 'type': 'cofluent:Function'}, {'name': 'RTPUDP', 'type': 'cofluent:Function'}], 'ports': [{'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['MPETSL']}, {'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['RTPUDP']}], 'relations': [{'name': 'IPToRTP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['RTPUDP', 'IPVideo']}, {'name': 'MPEToIP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['IPVideo', 'MPETSL']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_VIDEOPROTOCOLSTACK\n#define COFS_MODEL_VIDEOPROTOCOLSTACK\n\n\n#include \"cfm_videoprotocolstack_global.h\"\n#include \"cfm_videoprotocolstack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_ipvideo.h\"\n#include \"cfm_mpetsl.h\"\n#include \"cfm_rtpudp.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_videoprotocolstack : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefVideo> mq_IPToRTP_t;\ntypedef cf_core::cf_message_queue<cft_DefVideo> mq_MPEToIP_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_videoprotocolstack, cft_defvideo> p_mq_NetToDVB_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_videoprotocolstack, cft_defvideo> p_mq_RTPToApp_t;\n\n/// constructor\ncfm_videoprotocolstack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_videoprotocolstack(void);\n\np_mq_NetToDVB_t p_mq_NetToDVB;\np_mq_RTPToApp_t p_mq_RTPToApp;\n\ncfm_ipvideo *IPVideo;\ncfm_mpetsl *MPETSL;\ncfm_rtpudp *RTPUDP;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_IPToRTP_t mq_IPToRTP;\nmq_MPEToIP_t mq_MPEToIP;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'VideoProtocolStack', 'type': 'cofluent:Function', 'models': [{'name': 'IPVideo', 'type': 'cofluent:Function'}, {'name': 'MPETSL', 'type': 'cofluent:Function'}, {'name': 'RTPUDP', 'type': 'cofluent:Function'}], 'ports': [{'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo', 'connectTo': ['MPETSL']}, {'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo', 'connectTo': ['RTPUDP']}], 'relations': [{'name': 'IPToRTP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['RTPUDP', 'IPVideo']}, {'name': 'MPEToIP', 'type': 'cofluent:MessageQueue', 'dataType': 'DefVideo', 'connectTo': ['IPVideo', 'MPETSL']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_videoprotocolstack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_videoprotocolstack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'VideoProtocolStack definitions' algorithm generated code\n\n//End of 'VideoProtocolStack definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_videoprotocolstack ::cfm_videoprotocolstack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_IPToRTP(\"IPToRTP\"),mq_MPEToIP(\"MPEToIP\"),p_mq_NetToDVB(\"p_mq_NetToDVB\"),p_mq_RTPToApp(\"p_mq_RTPToApp\"){\ncf_function_container::init();\n//instantiation of models\nIPVideo = new cfm_ipvideo(\"IPVideo\");\nMPETSL = new cfm_mpetsl(\"MPETSL\");\nRTPUDP = new cfm_rtpudp(\"RTPUDP\");\n//connections\n//model connect to relation\nIPVideo->p_mq_IPToRTP(mq_IPToRTP.p_target_socket);\nIPVideo->p_mq_MPEToIP(mq_MPEToIP.p_target_socket);\n//model connect to relation\nMPETSL->p_mq_MPEToIP(mq_MPEToIP.p_target_socket);\n//model connect to port\nMPETSL->p_mq_NetToDVB(p_mq_NetToDVB);\n//model connect to relation\nRTPUDP->p_mq_IPToRTP(mq_IPToRTP.p_target_socket);\n//model connect to port\nRTPUDP->p_mq_RTPToApp(p_mq_RTPToApp);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_videoprotocolstack::~cfm_videoprotocolstack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'VideoProtocolStack destructor' algorithm generated code\n\n//End of 'VideoProtocolStack destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete IPVideo;\ndelete MPETSL;\ndelete RTPUDP;\n}\n\n\n//@{\nvoid cfm_videoprotocolstack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_videoprotocolstack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Controller', 'type': 'cofluent:Function', 'ports': [{'name': 'AppToCtrl', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONTROLLER\n#define COFS_MODEL_CONTROLLER\n\n\n#include \"cfm_controller_global.h\"\n#include \"cfm_controller_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_controller : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_controller(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_controller(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Controller', 'type': 'cofluent:Function', 'ports': [{'name': 'AppToCtrl', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_controller\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_controller.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Controller definitions' algorithm generated code\n\n//End of 'Controller definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_controller ::cfm_controller() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_controller::~cfm_controller(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Controller destructor' algorithm generated code\n\n//End of 'Controller destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_controller::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_controller::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'InteractiveNetwork', 'type': 'cofluent:Function', 'ports': [{'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'VideoFiles', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefNet'}, {'name': 'VideoNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefNet'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INTERACTIVENETWORK\n#define COFS_MODEL_INTERACTIVENETWORK\n\n\n#include \"cfm_interactivenetwork_global.h\"\n#include \"cfm_interactivenetwork_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n#include \"dt/cft_defnet_in.h\"\n\nclass cfm_interactivenetwork : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_interactivenetwork(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_interactivenetwork(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'InteractiveNetwork', 'type': 'cofluent:Function', 'ports': [{'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'VideoFiles', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefNet'}, {'name': 'VideoNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefNet'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_interactivenetwork\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_interactivenetwork.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InteractiveNetwork definitions' algorithm generated code\n\n//End of 'InteractiveNetwork definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_interactivenetwork ::cfm_interactivenetwork() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_interactivenetwork::~cfm_interactivenetwork(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InteractiveNetwork destructor' algorithm generated code\n\n//End of 'InteractiveNetwork destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_interactivenetwork::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_interactivenetwork::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BroadcastNetwork', 'type': 'cofluent:Function', 'ports': [{'name': 'BurstClock', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}, {'name': 'VideoFiles', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefNet'}, {'name': 'VideoNet', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefNet'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BROADCASTNETWORK\n#define COFS_MODEL_BROADCASTNETWORK\n\n\n#include \"cfm_broadcastnetwork_global.h\"\n#include \"cfm_broadcastnetwork_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defnet_in.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_broadcastnetwork : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_broadcastnetwork(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_broadcastnetwork(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BroadcastNetwork', 'type': 'cofluent:Function', 'ports': [{'name': 'BurstClock', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}, {'name': 'VideoFiles', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefNet'}, {'name': 'VideoNet', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefNet'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_broadcastnetwork\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_broadcastnetwork.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BroadcastNetwork definitions' algorithm generated code\n\n//End of 'BroadcastNetwork definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_broadcastnetwork ::cfm_broadcastnetwork() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_broadcastnetwork::~cfm_broadcastnetwork(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BroadcastNetwork destructor' algorithm generated code\n\n//End of 'BroadcastNetwork destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_broadcastnetwork::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_broadcastnetwork::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ClockGenerator', 'type': 'cofluent:Function', 'ports': [{'name': 'BurstClock', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CLOCKGENERATOR\n#define COFS_MODEL_CLOCKGENERATOR\n\n\n#include \"cfm_clockgenerator_global.h\"\n#include \"cfm_clockgenerator_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_clockgenerator : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_clockgenerator(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_clockgenerator(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ClockGenerator', 'type': 'cofluent:Function', 'ports': [{'name': 'BurstClock', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_clockgenerator\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_clockgenerator.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ClockGenerator definitions' algorithm generated code\n\n//End of 'ClockGenerator definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_clockgenerator ::cfm_clockgenerator() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_clockgenerator::~cfm_clockgenerator(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ClockGenerator destructor' algorithm generated code\n\n//End of 'ClockGenerator destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_clockgenerator::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_clockgenerator::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Requesting', 'type': 'cofluent:Function', 'ports': [{'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_REQUESTING\n#define COFS_MODEL_REQUESTING\n\n\n#include \"cfm_requesting_global.h\"\n#include \"cfm_requesting_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_requesting : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_requesting(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_requesting(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Requesting', 'type': 'cofluent:Function', 'ports': [{'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_requesting\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_requesting.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Requesting definitions' algorithm generated code\n\n//End of 'Requesting definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_requesting ::cfm_requesting() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_requesting::~cfm_requesting(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Requesting destructor' algorithm generated code\n\n//End of 'Requesting destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_requesting::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_requesting::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Watching', 'type': 'cofluent:Function', 'ports': [{'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WATCHING\n#define COFS_MODEL_WATCHING\n\n\n#include \"cfm_watching_global.h\"\n#include \"cfm_watching_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_watching : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_watching(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_watching(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Watching', 'type': 'cofluent:Function', 'ports': [{'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_watching\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_watching.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Watching definitions' algorithm generated code\n\n//End of 'Watching definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_watching ::cfm_watching() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_watching::~cfm_watching(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Watching destructor' algorithm generated code\n\n//End of 'Watching destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_watching::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_watching::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Reading', 'type': 'cofluent:Function', 'ports': [{'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_READING\n#define COFS_MODEL_READING\n\n\n#include \"cfm_reading_global.h\"\n#include \"cfm_reading_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_reading : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_reading(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_reading(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Reading', 'type': 'cofluent:Function', 'ports': [{'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_reading\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_reading.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Reading definitions' algorithm generated code\n\n//End of 'Reading definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_reading ::cfm_reading() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_reading::~cfm_reading(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Reading destructor' algorithm generated code\n\n//End of 'Reading destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_reading::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_reading::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CallApplication', 'type': 'cofluent:Function', 'ports': [{'name': 'AppToCtrl', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CALLAPPLICATION\n#define COFS_MODEL_CALLAPPLICATION\n\n\n#include \"cfm_callapplication_global.h\"\n#include \"cfm_callapplication_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_callapplication : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_callapplication(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_callapplication(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CallApplication', 'type': 'cofluent:Function', 'ports': [{'name': 'AppToCtrl', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'Request', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'Response', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_callapplication\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_callapplication.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CallApplication definitions' algorithm generated code\n\n//End of 'CallApplication definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_callapplication ::cfm_callapplication() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_callapplication::~cfm_callapplication(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CallApplication destructor' algorithm generated code\n\n//End of 'CallApplication destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_callapplication::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_callapplication::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'VideoApplication', 'type': 'cofluent:Function', 'ports': [{'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_VIDEOAPPLICATION\n#define COFS_MODEL_VIDEOAPPLICATION\n\n\n#include \"cfm_videoapplication_global.h\"\n#include \"cfm_videoapplication_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_videoapplication : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_videoapplication(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_videoapplication(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'VideoApplication', 'type': 'cofluent:Function', 'ports': [{'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}, {'name': 'Video', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_videoapplication\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_videoapplication.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'VideoApplication definitions' algorithm generated code\n\n//End of 'VideoApplication definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_videoapplication ::cfm_videoapplication() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_videoapplication::~cfm_videoapplication(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'VideoApplication destructor' algorithm generated code\n\n//End of 'VideoApplication destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_videoapplication::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_videoapplication::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'HTTPTCP', 'type': 'cofluent:Function', 'models': [{'name': 'HTTPTCP_Receive', 'type': 'cofluent:Function'}, {'name': 'HTTPTCP_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Send']}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Receive']}, {'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Send']}, {'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Receive']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HTTPTCP\n#define COFS_MODEL_HTTPTCP\n\n\n#include \"cfm_httptcp_global.h\"\n#include \"cfm_httptcp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_httptcp_receive.h\"\n#include \"cfm_httptcp_send.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_httptcp : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_httptcp, cft_defcall> p_mq_AppToHTTP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_httptcp, cft_defcall> p_mq_HTTPToApp_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_httptcp, cft_defcall> p_mq_HTTPToIP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_httptcp, cft_defcall> p_mq_IPToHTTP_t;\n\n/// constructor\ncfm_httptcp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_httptcp(void);\n\np_mq_AppToHTTP_t p_mq_AppToHTTP;\np_mq_HTTPToApp_t p_mq_HTTPToApp;\np_mq_HTTPToIP_t p_mq_HTTPToIP;\np_mq_IPToHTTP_t p_mq_IPToHTTP;\n\ncfm_httptcp_receive *HTTPTCP_Receive;\ncfm_httptcp_send *HTTPTCP_Send;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'HTTPTCP', 'type': 'cofluent:Function', 'models': [{'name': 'HTTPTCP_Receive', 'type': 'cofluent:Function'}, {'name': 'HTTPTCP_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Send']}, {'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Receive']}, {'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Send']}, {'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['HTTPTCP_Receive']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_httptcp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_httptcp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HTTPTCP definitions' algorithm generated code\n\n//End of 'HTTPTCP definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_httptcp ::cfm_httptcp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_AppToHTTP(\"p_mq_AppToHTTP\"),p_mq_HTTPToApp(\"p_mq_HTTPToApp\"),p_mq_HTTPToIP(\"p_mq_HTTPToIP\"),p_mq_IPToHTTP(\"p_mq_IPToHTTP\"){\ncf_function_container::init();\n//instantiation of models\nHTTPTCP_Receive = new cfm_httptcp_receive(\"HTTPTCP_Receive\");\nHTTPTCP_Send = new cfm_httptcp_send(\"HTTPTCP_Send\");\n//connections\n//model connect to port\nHTTPTCP_Receive->p_mq_HTTPToApp(p_mq_HTTPToApp);\nHTTPTCP_Receive->p_mq_IPToHTTP(p_mq_IPToHTTP);\n//model connect to port\nHTTPTCP_Send->p_mq_AppToHTTP(p_mq_AppToHTTP);\nHTTPTCP_Send->p_mq_HTTPToIP(p_mq_HTTPToIP);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_httptcp::~cfm_httptcp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HTTPTCP destructor' algorithm generated code\n\n//End of 'HTTPTCP destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete HTTPTCP_Receive;\ndelete HTTPTCP_Send;\n}\n\n\n//@{\nvoid cfm_httptcp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_httptcp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'IPCall', 'type': 'cofluent:Function', 'models': [{'name': 'IPCall_Receive', 'type': 'cofluent:Function'}, {'name': 'IPCall_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['IPCall_Send']}, {'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['IPCall_Receive']}, {'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['IPCall_Send']}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['IPCall_Receive']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_IPCALL\n#define COFS_MODEL_IPCALL\n\n\n#include \"cfm_ipcall_global.h\"\n#include \"cfm_ipcall_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_ipcall_receive.h\"\n#include \"cfm_ipcall_send.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_ipcall : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_ipcall, cft_defcall> p_mq_HTTPToIP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_ipcall, cft_defcall> p_mq_IPToHTTP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_ipcall, cft_defcall> p_mq_IPToUMTS_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_ipcall, cft_defcall> p_mq_UMTSToIP_t;\n\n/// constructor\ncfm_ipcall(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ipcall(void);\n\np_mq_HTTPToIP_t p_mq_HTTPToIP;\np_mq_IPToHTTP_t p_mq_IPToHTTP;\np_mq_IPToUMTS_t p_mq_IPToUMTS;\np_mq_UMTSToIP_t p_mq_UMTSToIP;\n\ncfm_ipcall_receive *IPCall_Receive;\ncfm_ipcall_send *IPCall_Send;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'IPCall', 'type': 'cofluent:Function', 'models': [{'name': 'IPCall_Receive', 'type': 'cofluent:Function'}, {'name': 'IPCall_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['IPCall_Send']}, {'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['IPCall_Receive']}, {'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['IPCall_Send']}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['IPCall_Receive']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ipcall\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ipcall.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPCall definitions' algorithm generated code\n\n//End of 'IPCall definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ipcall ::cfm_ipcall() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_HTTPToIP(\"p_mq_HTTPToIP\"),p_mq_IPToHTTP(\"p_mq_IPToHTTP\"),p_mq_IPToUMTS(\"p_mq_IPToUMTS\"),p_mq_UMTSToIP(\"p_mq_UMTSToIP\"){\ncf_function_container::init();\n//instantiation of models\nIPCall_Receive = new cfm_ipcall_receive(\"IPCall_Receive\");\nIPCall_Send = new cfm_ipcall_send(\"IPCall_Send\");\n//connections\n//model connect to port\nIPCall_Receive->p_mq_IPToHTTP(p_mq_IPToHTTP);\nIPCall_Receive->p_mq_UMTSToIP(p_mq_UMTSToIP);\n//model connect to port\nIPCall_Send->p_mq_HTTPToIP(p_mq_HTTPToIP);\nIPCall_Send->p_mq_IPToUMTS(p_mq_IPToUMTS);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ipcall::~cfm_ipcall(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPCall destructor' algorithm generated code\n\n//End of 'IPCall destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete IPCall_Receive;\ndelete IPCall_Send;\n}\n\n\n//@{\nvoid cfm_ipcall::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ipcall::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'UMTS', 'type': 'cofluent:Function', 'models': [{'name': 'UMTS_Receive', 'type': 'cofluent:Function'}, {'name': 'UMTS_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['UMTS_Send']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['UMTS_Receive']}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['UMTS_Receive']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['UMTS_Send']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_UMTS\n#define COFS_MODEL_UMTS\n\n\n#include \"cfm_umts_global.h\"\n#include \"cfm_umts_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_umts_receive.h\"\n#include \"cfm_umts_send.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_umts : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_umts, cft_defcall> p_mq_IPToUMTS_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_umts, cft_defcall> p_mq_NetToUMTS_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_umts, cft_defcall> p_mq_UMTSToIP_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_umts, cft_defcall> p_mq_UMTSToNet_t;\n\n/// constructor\ncfm_umts(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_umts(void);\n\np_mq_IPToUMTS_t p_mq_IPToUMTS;\np_mq_NetToUMTS_t p_mq_NetToUMTS;\np_mq_UMTSToIP_t p_mq_UMTSToIP;\np_mq_UMTSToNet_t p_mq_UMTSToNet;\n\ncfm_umts_receive *UMTS_Receive;\ncfm_umts_send *UMTS_Send;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'UMTS', 'type': 'cofluent:Function', 'models': [{'name': 'UMTS_Receive', 'type': 'cofluent:Function'}, {'name': 'UMTS_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['UMTS_Send']}, {'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall', 'connectTo': ['UMTS_Receive']}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['UMTS_Receive']}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall', 'connectTo': ['UMTS_Send']}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_umts\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_umts.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UMTS definitions' algorithm generated code\n\n//End of 'UMTS definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_umts ::cfm_umts() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_IPToUMTS(\"p_mq_IPToUMTS\"),p_mq_NetToUMTS(\"p_mq_NetToUMTS\"),p_mq_UMTSToIP(\"p_mq_UMTSToIP\"),p_mq_UMTSToNet(\"p_mq_UMTSToNet\"){\ncf_function_container::init();\n//instantiation of models\nUMTS_Receive = new cfm_umts_receive(\"UMTS_Receive\");\nUMTS_Send = new cfm_umts_send(\"UMTS_Send\");\n//connections\n//model connect to port\nUMTS_Receive->p_mq_NetToUMTS(p_mq_NetToUMTS);\nUMTS_Receive->p_mq_UMTSToIP(p_mq_UMTSToIP);\n//model connect to port\nUMTS_Send->p_mq_IPToUMTS(p_mq_IPToUMTS);\nUMTS_Send->p_mq_UMTSToNet(p_mq_UMTSToNet);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_umts::~cfm_umts(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UMTS destructor' algorithm generated code\n\n//End of 'UMTS destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete UMTS_Receive;\ndelete UMTS_Send;\n}\n\n\n//@{\nvoid cfm_umts::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_umts::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RTPUDP', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToRTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}, {'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RTPUDP\n#define COFS_MODEL_RTPUDP\n\n\n#include \"cfm_rtpudp_global.h\"\n#include \"cfm_rtpudp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_rtpudp : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_rtpudp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rtpudp(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RTPUDP', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToRTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}, {'name': 'RTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rtpudp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rtpudp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RTPUDP definitions' algorithm generated code\n\n//End of 'RTPUDP definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rtpudp ::cfm_rtpudp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rtpudp::~cfm_rtpudp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RTPUDP destructor' algorithm generated code\n\n//End of 'RTPUDP destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_rtpudp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rtpudp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'IPVideo', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToRTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}, {'name': 'MPEToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_IPVIDEO\n#define COFS_MODEL_IPVIDEO\n\n\n#include \"cfm_ipvideo_global.h\"\n#include \"cfm_ipvideo_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_ipvideo : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_ipvideo(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ipvideo(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'IPVideo', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToRTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}, {'name': 'MPEToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ipvideo\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ipvideo.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPVideo definitions' algorithm generated code\n\n//End of 'IPVideo definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ipvideo ::cfm_ipvideo() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ipvideo::~cfm_ipvideo(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPVideo destructor' algorithm generated code\n\n//End of 'IPVideo destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_ipvideo::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ipvideo::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MPETSL', 'type': 'cofluent:Function', 'ports': [{'name': 'MPEToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}, {'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MPETSL\n#define COFS_MODEL_MPETSL\n\n\n#include \"cfm_mpetsl_global.h\"\n#include \"cfm_mpetsl_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defvideo_in.h\"\n\nclass cfm_mpetsl : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_mpetsl(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_mpetsl(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MPETSL', 'type': 'cofluent:Function', 'ports': [{'name': 'MPEToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefVideo'}, {'name': 'NetToDVB', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefVideo'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_mpetsl\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_mpetsl.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MPETSL definitions' algorithm generated code\n\n//End of 'MPETSL definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_mpetsl ::cfm_mpetsl() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_mpetsl::~cfm_mpetsl(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MPETSL destructor' algorithm generated code\n\n//End of 'MPETSL destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_mpetsl::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_mpetsl::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'HTTPTCP_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HTTPTCP_SEND\n#define COFS_MODEL_HTTPTCP_SEND\n\n\n#include \"cfm_httptcp_send_global.h\"\n#include \"cfm_httptcp_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_httptcp_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_httptcp_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_httptcp_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'HTTPTCP_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'AppToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_httptcp_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_httptcp_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HTTPTCP_Send definitions' algorithm generated code\n\n//End of 'HTTPTCP_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_httptcp_send ::cfm_httptcp_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_httptcp_send::~cfm_httptcp_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HTTPTCP_Send destructor' algorithm generated code\n\n//End of 'HTTPTCP_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_httptcp_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_httptcp_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'HTTPTCP_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HTTPTCP_RECEIVE\n#define COFS_MODEL_HTTPTCP_RECEIVE\n\n\n#include \"cfm_httptcp_receive_global.h\"\n#include \"cfm_httptcp_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_httptcp_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_httptcp_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_httptcp_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'HTTPTCP_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'HTTPToApp', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_httptcp_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_httptcp_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HTTPTCP_Receive definitions' algorithm generated code\n\n//End of 'HTTPTCP_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_httptcp_receive ::cfm_httptcp_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_httptcp_receive::~cfm_httptcp_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HTTPTCP_Receive destructor' algorithm generated code\n\n//End of 'HTTPTCP_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_httptcp_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_httptcp_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'IPCall_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_IPCALL_SEND\n#define COFS_MODEL_IPCALL_SEND\n\n\n#include \"cfm_ipcall_send_global.h\"\n#include \"cfm_ipcall_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_ipcall_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_ipcall_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ipcall_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'IPCall_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'HTTPToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ipcall_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ipcall_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPCall_Send definitions' algorithm generated code\n\n//End of 'IPCall_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ipcall_send ::cfm_ipcall_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ipcall_send::~cfm_ipcall_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPCall_Send destructor' algorithm generated code\n\n//End of 'IPCall_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_ipcall_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ipcall_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'IPCall_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_IPCALL_RECEIVE\n#define COFS_MODEL_IPCALL_RECEIVE\n\n\n#include \"cfm_ipcall_receive_global.h\"\n#include \"cfm_ipcall_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_ipcall_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_ipcall_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ipcall_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'IPCall_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToHTTP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ipcall_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ipcall_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPCall_Receive definitions' algorithm generated code\n\n//End of 'IPCall_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ipcall_receive ::cfm_ipcall_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ipcall_receive::~cfm_ipcall_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'IPCall_Receive destructor' algorithm generated code\n\n//End of 'IPCall_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_ipcall_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ipcall_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'UMTS_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_UMTS_SEND\n#define COFS_MODEL_UMTS_SEND\n\n\n#include \"cfm_umts_send_global.h\"\n#include \"cfm_umts_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_umts_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_umts_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_umts_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'UMTS_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'IPToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'UMTSToNet', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_umts_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_umts_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UMTS_Send definitions' algorithm generated code\n\n//End of 'UMTS_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_umts_send ::cfm_umts_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_umts_send::~cfm_umts_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UMTS_Send destructor' algorithm generated code\n\n//End of 'UMTS_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_umts_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_umts_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'UMTS_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_UMTS_RECEIVE\n#define COFS_MODEL_UMTS_RECEIVE\n\n\n#include \"cfm_umts_receive_global.h\"\n#include \"cfm_umts_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defcall_in.h\"\n\nclass cfm_umts_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_umts_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_umts_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'UMTS_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'NetToUMTS', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefCall'}, {'name': 'UMTSToIP', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefCall'}], 'globalName': 'SoftwareDefinedRadioApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_umts_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of SoftwareDefinedRadioApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_umts_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UMTS_Receive definitions' algorithm generated code\n\n//End of 'UMTS_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_umts_receive ::cfm_umts_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_umts_receive::~cfm_umts_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UMTS_Receive destructor' algorithm generated code\n\n//End of 'UMTS_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_umts_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_umts_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CoSimVCSUVMApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'ProcessingFunction', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'data', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProcessingFunction', 'Producer']}, {'name': 'read', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer', 'ProcessingFunction']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_COSIMVCSUVMAPP\n#define COFS_MODEL_COSIMVCSUVMAPP\n\n\n#include \"cfm_cosimvcsuvmapp_global.h\"\n#include \"cfm_cosimvcsuvmapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_processingfunction.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_cosimvcsuvmapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_data_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_read_t;\n\n/// constructor\ncfm_cosimvcsuvmapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_cosimvcsuvmapp(void);\n\ncfm_consumer *Consumer;\ncfm_processingfunction *ProcessingFunction;\ncfm_producer *Producer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_data_t mq_data;\nmq_read_t mq_read;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CoSimVCSUVMApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'ProcessingFunction', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'data', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProcessingFunction', 'Producer']}, {'name': 'read', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer', 'ProcessingFunction']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_cosimvcsuvmapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVCSUVMApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_cosimvcsuvmapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoSimVCSUVMApp definitions' algorithm generated code\n\n//End of 'CoSimVCSUVMApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_cosimvcsuvmapp ::cfm_cosimvcsuvmapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_data(\"data\"),mq_read(\"read\"){\ncf_application::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nProcessingFunction = new cfm_processingfunction(\"ProcessingFunction\");\nProducer = new cfm_producer(\"Producer\");\n//connections\n//model connect to relation\nConsumer->p_mq_read(mq_read.p_target_socket);\n//model connect to relation\nProcessingFunction->p_mq_data(mq_data.p_target_socket);\nProcessingFunction->p_mq_read(mq_read.p_target_socket);\n//model connect to relation\nProducer->p_mq_data(mq_data.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_cosimvcsuvmapp::~cfm_cosimvcsuvmapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoSimVCSUVMApp destructor' algorithm generated code\n\n//End of 'CoSimVCSUVMApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete ProcessingFunction;\ndelete Producer;\n}\n\n\n//@{\nvoid cfm_cosimvcsuvmapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_cosimvcsuvmapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'read', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'CoSimVCSUVMApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'read', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'CoSimVCSUVMApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVCSUVMApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'data', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'CoSimVCSUVMApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'data', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'CoSimVCSUVMApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVCSUVMApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Inheritance_example1App', 'models': [{'name': 'F1', 'type': 'cofluent:Function'}, {'name': 'F2', 'type': 'cofluent:Function'}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INHERITANCE_EXAMPLE1APP\n#define COFS_MODEL_INHERITANCE_EXAMPLE1APP\n\n\n#include \"cfm_inheritance_example1app_global.h\"\n#include \"cfm_inheritance_example1app_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_f1.h\"\n#include \"cfm_f2.h\"\n\nclass cfm_inheritance_example1app : public cf_core::cf_application {\npublic:\n\n/// constructor\ncfm_inheritance_example1app(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inheritance_example1app(void);\n\ncfm_f1 *F1;\ncfm_f2 *F2;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Inheritance_example1App', 'models': [{'name': 'F1', 'type': 'cofluent:Function'}, {'name': 'F2', 'type': 'cofluent:Function'}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inheritance_example1app\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example1App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inheritance_example1app.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inheritance_example1App definitions' algorithm generated code\n\n//End of 'Inheritance_example1App definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inheritance_example1app ::cfm_inheritance_example1app() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(){\ncf_application::init();\n//instantiation of models\nF1 = new cfm_f1(\"F1\");\nF2 = new cfm_f2(\"F2\");\n//connections\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inheritance_example1app::~cfm_inheritance_example1app(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inheritance_example1App destructor' algorithm generated code\n\n//End of 'Inheritance_example1App destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete F1;\ndelete F2;\n}\n\n\n//@{\nvoid cfm_inheritance_example1app::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inheritance_example1app::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'F1', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example1App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_F1\n#define COFS_MODEL_F1\n\n\n#include \"cfm_f1_global.h\"\n#include \"cfm_f1_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_f1 : public cf_core::cf_function {\npublic:\n\n/// constructor\ncfm_f1(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_f1(void);\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'F1', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example1App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_f1\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example1App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_f1.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F1 definitions' algorithm generated code\n\n//End of 'F1 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_f1 ::cfm_f1() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_f1::~cfm_f1(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F1 destructor' algorithm generated code\n\n//End of 'F1 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_f1::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_f1::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'F2', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example1App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_F2\n#define COFS_MODEL_F2\n\n\n#include \"cfm_f2_global.h\"\n#include \"cfm_f2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_f2 : public cf_core::cf_function {\npublic:\n\n/// constructor\ncfm_f2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_f2(void);\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'F2', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example1App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_f2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example1App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_f2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F2 definitions' algorithm generated code\n\n//End of 'F2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_f2 ::cfm_f2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_f2::~cfm_f2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F2 destructor' algorithm generated code\n\n//End of 'F2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_f2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_f2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CopyPayloadNonPod', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['Consumer', 'Producer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_COPYPAYLOADNONPOD\n#define COFS_MODEL_COPYPAYLOADNONPOD\n\n\n#include \"cfm_copypayloadnonpod_global.h\"\n#include \"cfm_copypayloadnonpod_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_defmsgq_in.h\"\n\nclass cfm_copypayloadnonpod : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefMsgQ> mq_MsgQ_t;\n\n/// constructor\ncfm_copypayloadnonpod(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_copypayloadnonpod(void);\n\ncfm_consumer *Consumer;\ncfm_producer *Producer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQ_t mq_MsgQ;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CopyPayloadNonPod', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['Consumer', 'Producer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_copypayloadnonpod\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CopyPayloadNonPod generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_copypayloadnonpod.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CopyPayloadNonPod definitions' algorithm generated code\n\n//End of 'CopyPayloadNonPod definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_copypayloadnonpod ::cfm_copypayloadnonpod() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQ(\"MsgQ\"){\ncf_application::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nProducer = new cfm_producer(\"Producer\");\n//connections\n//model connect to relation\nConsumer->p_mq_MsgQ(mq_MsgQ.p_target_socket);\n//model connect to relation\nProducer->p_mq_MsgQ(mq_MsgQ.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_copypayloadnonpod::~cfm_copypayloadnonpod(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CopyPayloadNonPod destructor' algorithm generated code\n\n//End of 'CopyPayloadNonPod destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete Producer;\n}\n\n\n//@{\nvoid cfm_copypayloadnonpod::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_copypayloadnonpod::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}], 'globalName': 'CopyPayloadNonPod'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defmsgq_in.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}], 'globalName': 'CopyPayloadNonPod'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CopyPayloadNonPod generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}], 'globalName': 'CopyPayloadNonPod'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defmsgq_in.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}], 'globalName': 'CopyPayloadNonPod'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CopyPayloadNonPod generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CoFluentAPIFromExternalIP', 'models': [{'name': 'CoF_Initiator', 'type': 'cofluent:Function'}, {'name': 'iUart', 'type': 'cofluent:SystemCIP'}], 'relations': [{'name': 'MsgBwQ', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['CoF_Initiator']}, {'name': 'MsgFwQ', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['CoF_Initiator']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_COFLUENTAPIFROMEXTERNALIP\n#define COFS_MODEL_COFLUENTAPIFROMEXTERNALIP\n\n\n#include \"cfm_cofluentapifromexternalip_global.h\"\n#include \"cfm_cofluentapifromexternalip_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_cof_initiator.h\"\n#include \"cfm_iuart.h\"\n#include \"dt/cft_defmsgq_in.h\"\n\nclass cfm_cofluentapifromexternalip : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefMsgQ> mq_MsgBwQ_t;\ntypedef cf_core::cf_message_queue<cft_DefMsgQ> mq_MsgFwQ_t;\n\n/// constructor\ncfm_cofluentapifromexternalip(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_cofluentapifromexternalip(void);\n\ncfm_cof_initiator *CoF_Initiator;\ncfm_iuart *iUart;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgBwQ_t mq_MsgBwQ;\nmq_MsgFwQ_t mq_MsgFwQ;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CoFluentAPIFromExternalIP', 'models': [{'name': 'CoF_Initiator', 'type': 'cofluent:Function'}, {'name': 'iUart', 'type': 'cofluent:SystemCIP'}], 'relations': [{'name': 'MsgBwQ', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['CoF_Initiator']}, {'name': 'MsgFwQ', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['CoF_Initiator']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_cofluentapifromexternalip\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoFluentAPIFromExternalIP generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_cofluentapifromexternalip.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoFluentAPIFromExternalIP definitions' algorithm generated code\n\n//End of 'CoFluentAPIFromExternalIP definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_cofluentapifromexternalip ::cfm_cofluentapifromexternalip() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgBwQ(\"MsgBwQ\"),mq_MsgFwQ(\"MsgFwQ\"){\ncf_application::init();\n//instantiation of models\nCoF_Initiator = new cfm_cof_initiator(\"CoF_Initiator\");\niUart = new cfm_iuart(\"iUart\");\n//connections\n//model connect to relation\nCoF_Initiator->p_mq_MsgBwQ(mq_MsgBwQ.p_target_socket);\nCoF_Initiator->p_mq_MsgFwQ(mq_MsgFwQ.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_cofluentapifromexternalip::~cfm_cofluentapifromexternalip(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoFluentAPIFromExternalIP destructor' algorithm generated code\n\n//End of 'CoFluentAPIFromExternalIP destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete CoF_Initiator;\ndelete iUart;\n}\n\n\n//@{\nvoid cfm_cofluentapifromexternalip::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_cofluentapifromexternalip::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CoF_Initiator', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgBwQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}, {'name': 'MsgFwQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}], 'globalName': 'CoFluentAPIFromExternalIP'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_COF_INITIATOR\n#define COFS_MODEL_COF_INITIATOR\n\n\n#include \"cfm_cof_initiator_global.h\"\n#include \"cfm_cof_initiator_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defmsgq_in.h\"\n\nclass cfm_cof_initiator : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_cof_initiator(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_cof_initiator(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CoF_Initiator', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgBwQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}, {'name': 'MsgFwQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}], 'globalName': 'CoFluentAPIFromExternalIP'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_cof_initiator\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoFluentAPIFromExternalIP generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_cof_initiator.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoF_Initiator definitions' algorithm generated code\n\n//End of 'CoF_Initiator definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_cof_initiator ::cfm_cof_initiator() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_cof_initiator::~cfm_cof_initiator(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoF_Initiator destructor' algorithm generated code\n\n//End of 'CoF_Initiator destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_cof_initiator::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_cof_initiator::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'TransactionTrackerMsgQApp', 'models': [{'name': 'Consumer1', 'type': 'cofluent:Function'}, {'name': 'Consumer2', 'type': 'cofluent:Function'}, {'name': 'MessageRouting', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQIn', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'MessageRouting']}, {'name': 'MsgQOut1', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer1', 'MessageRouting']}, {'name': 'MsgQOut2', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer2', 'MessageRouting']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TRANSACTIONTRACKERMSGQAPP\n#define COFS_MODEL_TRANSACTIONTRACKERMSGQAPP\n\n\n#include \"cfm_transactiontrackermsgqapp_global.h\"\n#include \"cfm_transactiontrackermsgqapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer1.h\"\n#include \"cfm_consumer2.h\"\n#include \"cfm_messagerouting.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_transactiontrackermsgqapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQIn_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQOut1_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQOut2_t;\n\n/// constructor\ncfm_transactiontrackermsgqapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_transactiontrackermsgqapp(void);\n\ncfm_consumer1 *Consumer1;\ncfm_consumer2 *Consumer2;\ncfm_messagerouting *MessageRouting;\ncfm_producer *Producer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQIn_t mq_MsgQIn;\nmq_MsgQOut1_t mq_MsgQOut1;\nmq_MsgQOut2_t mq_MsgQOut2;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'TransactionTrackerMsgQApp', 'models': [{'name': 'Consumer1', 'type': 'cofluent:Function'}, {'name': 'Consumer2', 'type': 'cofluent:Function'}, {'name': 'MessageRouting', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQIn', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'MessageRouting']}, {'name': 'MsgQOut1', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer1', 'MessageRouting']}, {'name': 'MsgQOut2', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer2', 'MessageRouting']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_transactiontrackermsgqapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TransactionTrackerMsgQApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_transactiontrackermsgqapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'TransactionTrackerMsgQApp definitions' algorithm generated code\n\n//End of 'TransactionTrackerMsgQApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_transactiontrackermsgqapp ::cfm_transactiontrackermsgqapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQIn(\"MsgQIn\"),mq_MsgQOut1(\"MsgQOut1\"),mq_MsgQOut2(\"MsgQOut2\"){\ncf_application::init();\n//instantiation of models\nConsumer1 = new cfm_consumer1(\"Consumer1\");\nConsumer2 = new cfm_consumer2(\"Consumer2\");\nMessageRouting = new cfm_messagerouting(\"MessageRouting\");\nProducer = new cfm_producer(\"Producer\");\n//connections\n//model connect to relation\nConsumer1->p_mq_MsgQOut1(mq_MsgQOut1.p_target_socket);\n//model connect to relation\nConsumer2->p_mq_MsgQOut2(mq_MsgQOut2.p_target_socket);\n//model connect to relation\nMessageRouting->p_mq_MsgQIn(mq_MsgQIn.p_target_socket);\nMessageRouting->p_mq_MsgQOut1(mq_MsgQOut1.p_target_socket);\nMessageRouting->p_mq_MsgQOut2(mq_MsgQOut2.p_target_socket);\n//model connect to relation\nProducer->p_mq_MsgQIn(mq_MsgQIn.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_transactiontrackermsgqapp::~cfm_transactiontrackermsgqapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'TransactionTrackerMsgQApp destructor' algorithm generated code\n\n//End of 'TransactionTrackerMsgQApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer1;\ndelete Consumer2;\ndelete MessageRouting;\ndelete Producer;\n}\n\n\n//@{\nvoid cfm_transactiontrackermsgqapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_transactiontrackermsgqapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer1', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOut1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER1\n#define COFS_MODEL_CONSUMER1\n\n\n#include \"cfm_consumer1_global.h\"\n#include \"cfm_consumer1_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer1 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer1(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer1(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer1', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOut1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer1\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TransactionTrackerMsgQApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer1.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer1 definitions' algorithm generated code\n\n//End of 'Consumer1 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer1 ::cfm_consumer1() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer1::~cfm_consumer1(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer1 destructor' algorithm generated code\n\n//End of 'Consumer1 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer1::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer1::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer2', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOut2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER2\n#define COFS_MODEL_CONSUMER2\n\n\n#include \"cfm_consumer2_global.h\"\n#include \"cfm_consumer2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer2', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOut2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TransactionTrackerMsgQApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer2 definitions' algorithm generated code\n\n//End of 'Consumer2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer2 ::cfm_consumer2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer2::~cfm_consumer2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer2 destructor' algorithm generated code\n\n//End of 'Consumer2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TransactionTrackerMsgQApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MessageRouting', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQIn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'MsgQOut1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}, {'name': 'MsgQOut2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MESSAGEROUTING\n#define COFS_MODEL_MESSAGEROUTING\n\n\n#include \"cfm_messagerouting_global.h\"\n#include \"cfm_messagerouting_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_messagerouting : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_messagerouting(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_messagerouting(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MessageRouting', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQIn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'MsgQOut1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}, {'name': 'MsgQOut2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'TransactionTrackerMsgQApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_messagerouting\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TransactionTrackerMsgQApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_messagerouting.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MessageRouting definitions' algorithm generated code\n\n//End of 'MessageRouting definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_messagerouting ::cfm_messagerouting() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_messagerouting::~cfm_messagerouting(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MessageRouting destructor' algorithm generated code\n\n//End of 'MessageRouting destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_messagerouting::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_messagerouting::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ProtocolMapDataTypeApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}, {'name': 'ProtocolReceive', 'type': 'cofluent:Function'}, {'name': 'ProtocolSend', 'type': 'cofluent:Function'}], 'relations': [{'name': 'protocol_data', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProtocolSend', 'ProtocolReceive']}, {'name': 'user_data_in', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProtocolSend', 'Producer']}, {'name': 'user_data_out', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer', 'ProtocolReceive']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PROTOCOLMAPDATATYPEAPP\n#define COFS_MODEL_PROTOCOLMAPDATATYPEAPP\n\n\n#include \"cfm_protocolmapdatatypeapp_global.h\"\n#include \"cfm_protocolmapdatatypeapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_producer.h\"\n#include \"cfm_protocolreceive.h\"\n#include \"cfm_protocolsend.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_protocolmapdataapplicationapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_protocol_data_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_user_data_in_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_user_data_out_t;\n\n/// constructor\ncfm_protocolmapdatatypeapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_protocolmapdatatypeapp(void);\n\ncfm_consumer *Consumer;\ncfm_producer *Producer;\ncfm_protocolreceive *ProtocolReceive;\ncfm_protocolsend *ProtocolSend;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_protocol_data_t mq_protocol_data;\nmq_user_data_in_t mq_user_data_in;\nmq_user_data_out_t mq_user_data_out;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ProtocolMapDataTypeApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}, {'name': 'ProtocolReceive', 'type': 'cofluent:Function'}, {'name': 'ProtocolSend', 'type': 'cofluent:Function'}], 'relations': [{'name': 'protocol_data', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProtocolSend', 'ProtocolReceive']}, {'name': 'user_data_in', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProtocolSend', 'Producer']}, {'name': 'user_data_out', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Consumer', 'ProtocolReceive']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_protocolmapdatatypeapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ProtocolMapDataTypeApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_protocolmapdatatypeapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProtocolMapDataTypeApp definitions' algorithm generated code\n\n//End of 'ProtocolMapDataTypeApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_protocolmapdatatypeapp ::cfm_protocolmapdatatypeapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_protocol_data(\"protocol_data\"),mq_user_data_in(\"user_data_in\"),mq_user_data_out(\"user_data_out\"){\ncf_application::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nProducer = new cfm_producer(\"Producer\");\nProtocolReceive = new cfm_protocolreceive(\"ProtocolReceive\");\nProtocolSend = new cfm_protocolsend(\"ProtocolSend\");\n//connections\n//model connect to relation\nConsumer->p_mq_user_data_out(mq_user_data_out.p_target_socket);\n//model connect to relation\nProducer->p_mq_user_data_in(mq_user_data_in.p_target_socket);\n//model connect to relation\nProtocolReceive->p_mq_protocol_data(mq_protocol_data.p_target_socket);\nProtocolReceive->p_mq_user_data_out(mq_user_data_out.p_target_socket);\n//model connect to relation\nProtocolSend->p_mq_protocol_data(mq_protocol_data.p_target_socket);\nProtocolSend->p_mq_user_data_in(mq_user_data_in.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_protocolmapdatatypeapp::~cfm_protocolmapdatatypeapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProtocolMapDataTypeApp destructor' algorithm generated code\n\n//End of 'ProtocolMapDataTypeApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete Producer;\ndelete ProtocolReceive;\ndelete ProtocolSend;\n}\n\n\n//@{\nvoid cfm_protocolmapdatatypeapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_protocolmapdatatypeapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ProtocolSend', 'type': 'cofluent:Function', 'ports': [{'name': 'protocol_data', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}, {'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PROTOCOLSEND\n#define COFS_MODEL_PROTOCOLSEND\n\n\n#include \"cfm_protocolsend_global.h\"\n#include \"cfm_protocolsend_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_protocolsend : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_protocolsend(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_protocolsend(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ProtocolSend', 'type': 'cofluent:Function', 'ports': [{'name': 'protocol_data', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}, {'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_protocolsend\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ProtocolMapDataTypeApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_protocolsend.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProtocolSend definitions' algorithm generated code\n\n//End of 'ProtocolSend definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_protocolsend ::cfm_protocolsend() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_protocolsend::~cfm_protocolsend(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProtocolSend destructor' algorithm generated code\n\n//End of 'ProtocolSend destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_protocolsend::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_protocolsend::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ProtocolMapDataTypeApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ProtocolMapDataTypeApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ProtocolReceive', 'type': 'cofluent:Function', 'ports': [{'name': 'protocol_data', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PROTOCOLRECEIVE\n#define COFS_MODEL_PROTOCOLRECEIVE\n\n\n#include \"cfm_protocolreceive_global.h\"\n#include \"cfm_protocolreceive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_protocolreceive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_protocolreceive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_protocolreceive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ProtocolReceive', 'type': 'cofluent:Function', 'ports': [{'name': 'protocol_data', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ProtocolMapDataTypeApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_protocolreceive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ProtocolMapDataTypeApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_protocolreceive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProtocolReceive definitions' algorithm generated code\n\n//End of 'ProtocolReceive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_protocolreceive ::cfm_protocolreceive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_protocolreceive::~cfm_protocolreceive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProtocolReceive destructor' algorithm generated code\n\n//End of 'ProtocolReceive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_protocolreceive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_protocolreceive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MapDataTypeAPIApp', 'models': [{'name': 'ConsumerMap', 'type': 'cofluent:Function'}, {'name': 'ProducerMap', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQMap', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProducerMap', 'ConsumerMap']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MAPDATATYPEAPIAPP\n#define COFS_MODEL_MAPDATATYPEAPIAPP\n\n\n#include \"cfm_mapdatatypeapiapp_global.h\"\n#include \"cfm_mapdatatypeapiapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumermap.h\"\n#include \"cfm_producermap.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_mapdataapplicationapiapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQMap_t;\n\n/// constructor\ncfm_mapdatatypeapiapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_mapdatatypeapiapp(void);\n\ncfm_consumermap *ConsumerMap;\ncfm_producermap *ProducerMap;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQMap_t mq_MsgQMap;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MapDataTypeAPIApp', 'models': [{'name': 'ConsumerMap', 'type': 'cofluent:Function'}, {'name': 'ProducerMap', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQMap', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProducerMap', 'ConsumerMap']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_mapdatatypeapiapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MapDataTypeAPIApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_mapdatatypeapiapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MapDataTypeAPIApp definitions' algorithm generated code\n\n//End of 'MapDataTypeAPIApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_mapdatatypeapiapp ::cfm_mapdatatypeapiapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQMap(\"MsgQMap\"){\ncf_application::init();\n//instantiation of models\nConsumerMap = new cfm_consumermap(\"ConsumerMap\");\nProducerMap = new cfm_producermap(\"ProducerMap\");\n//connections\n//model connect to relation\nConsumerMap->p_mq_MsgQMap(mq_MsgQMap.p_target_socket);\n//model connect to relation\nProducerMap->p_mq_MsgQMap(mq_MsgQMap.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_mapdatatypeapiapp::~cfm_mapdatatypeapiapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MapDataTypeAPIApp destructor' algorithm generated code\n\n//End of 'MapDataTypeAPIApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete ConsumerMap;\ndelete ProducerMap;\n}\n\n\n//@{\nvoid cfm_mapdatatypeapiapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_mapdatatypeapiapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ProducerMap', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQMap', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'MapDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCERMAP\n#define COFS_MODEL_PRODUCERMAP\n\n\n#include \"cfm_producermap_global.h\"\n#include \"cfm_producermap_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producermap : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producermap(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producermap(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ProducerMap', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQMap', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'MapDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producermap\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MapDataTypeAPIApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producermap.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProducerMap definitions' algorithm generated code\n\n//End of 'ProducerMap definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producermap ::cfm_producermap() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producermap::~cfm_producermap(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProducerMap destructor' algorithm generated code\n\n//End of 'ProducerMap destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producermap::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producermap::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ConsumerMap', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQMap', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'MapDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMERMAP\n#define COFS_MODEL_CONSUMERMAP\n\n\n#include \"cfm_consumermap_global.h\"\n#include \"cfm_consumermap_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumermap : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumermap(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumermap(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ConsumerMap', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQMap', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'MapDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumermap\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MapDataTypeAPIApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumermap.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ConsumerMap definitions' algorithm generated code\n\n//End of 'ConsumerMap definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumermap ::cfm_consumermap() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumermap::~cfm_consumermap(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ConsumerMap destructor' algorithm generated code\n\n//End of 'ConsumerMap destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumermap::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumermap::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'VectorDataTypeAPIApp', 'models': [{'name': 'ConsumerVector', 'type': 'cofluent:Function'}, {'name': 'ProducerVector', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQVector', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProducerVector', 'ConsumerVector']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_VECTORDATATYPEAPIAPP\n#define COFS_MODEL_VECTORDATATYPEAPIAPP\n\n\n#include \"cfm_vectordatatypeapiapp_global.h\"\n#include \"cfm_vectordatatypeapiapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumervector.h\"\n#include \"cfm_producervector.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_vectordataapplicationapiapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQVector_t;\n\n/// constructor\ncfm_vectordatatypeapiapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_vectordatatypeapiapp(void);\n\ncfm_consumervector *ConsumerVector;\ncfm_producervector *ProducerVector;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQVector_t mq_MsgQVector;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'VectorDataTypeAPIApp', 'models': [{'name': 'ConsumerVector', 'type': 'cofluent:Function'}, {'name': 'ProducerVector', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQVector', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['ProducerVector', 'ConsumerVector']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_vectordatatypeapiapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of VectorDataTypeAPIApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_vectordatatypeapiapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'VectorDataTypeAPIApp definitions' algorithm generated code\n\n//End of 'VectorDataTypeAPIApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_vectordatatypeapiapp ::cfm_vectordatatypeapiapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQVector(\"MsgQVector\"){\ncf_application::init();\n//instantiation of models\nConsumerVector = new cfm_consumervector(\"ConsumerVector\");\nProducerVector = new cfm_producervector(\"ProducerVector\");\n//connections\n//model connect to relation\nConsumerVector->p_mq_MsgQVector(mq_MsgQVector.p_target_socket);\n//model connect to relation\nProducerVector->p_mq_MsgQVector(mq_MsgQVector.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_vectordatatypeapiapp::~cfm_vectordatatypeapiapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'VectorDataTypeAPIApp destructor' algorithm generated code\n\n//End of 'VectorDataTypeAPIApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete ConsumerVector;\ndelete ProducerVector;\n}\n\n\n//@{\nvoid cfm_vectordatatypeapiapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_vectordatatypeapiapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ProducerVector', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQVector', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'VectorDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCERVECTOR\n#define COFS_MODEL_PRODUCERVECTOR\n\n\n#include \"cfm_producervector_global.h\"\n#include \"cfm_producervector_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producervector : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producervector(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producervector(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ProducerVector', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQVector', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'VectorDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producervector\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of VectorDataTypeAPIApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producervector.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProducerVector definitions' algorithm generated code\n\n//End of 'ProducerVector definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producervector ::cfm_producervector() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producervector::~cfm_producervector(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ProducerVector destructor' algorithm generated code\n\n//End of 'ProducerVector destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producervector::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producervector::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ConsumerVector', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQVector', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'VectorDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMERVECTOR\n#define COFS_MODEL_CONSUMERVECTOR\n\n\n#include \"cfm_consumervector_global.h\"\n#include \"cfm_consumervector_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumervector : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumervector(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumervector(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ConsumerVector', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQVector', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'VectorDataTypeAPIApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumervector\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of VectorDataTypeAPIApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumervector.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ConsumerVector definitions' algorithm generated code\n\n//End of 'ConsumerVector definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumervector ::cfm_consumervector() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumervector::~cfm_consumervector(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ConsumerVector destructor' algorithm generated code\n\n//End of 'ConsumerVector destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumervector::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumervector::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ApplicationVectorDataType', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Processing', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'user_data_in', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'Processing']}, {'name': 'user_data_out', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Processing', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_APPLICATIONVECTORDATATYPE\n#define COFS_MODEL_APPLICATIONVECTORDATATYPE\n\n\n#include \"cfm_applicationvectordatatype_global.h\"\n#include \"cfm_applicationvectordatatype_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_processing.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_applicationvectordataapplication : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_user_data_in_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_user_data_out_t;\n\n/// constructor\ncfm_applicationvectordatatype(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_applicationvectordatatype(void);\n\ncfm_consumer *Consumer;\ncfm_processing *Processing;\ncfm_producer *Producer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_user_data_in_t mq_user_data_in;\nmq_user_data_out_t mq_user_data_out;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ApplicationVectorDataType', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Processing', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'user_data_in', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'Processing']}, {'name': 'user_data_out', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Processing', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_applicationvectordatatype\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationVectorDataType generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_applicationvectordatatype.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationVectorDataType definitions' algorithm generated code\n\n//End of 'ApplicationVectorDataType definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_applicationvectordatatype ::cfm_applicationvectordatatype() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_user_data_in(\"user_data_in\"),mq_user_data_out(\"user_data_out\"){\ncf_application::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nProcessing = new cfm_processing(\"Processing\");\nProducer = new cfm_producer(\"Producer\");\n//connections\n//model connect to relation\nConsumer->p_mq_user_data_out(mq_user_data_out.p_target_socket);\n//model connect to relation\nProcessing->p_mq_user_data_in(mq_user_data_in.p_target_socket);\nProcessing->p_mq_user_data_out(mq_user_data_out.p_target_socket);\n//model connect to relation\nProducer->p_mq_user_data_in(mq_user_data_in.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_applicationvectordatatype::~cfm_applicationvectordatatype(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationVectorDataType destructor' algorithm generated code\n\n//End of 'ApplicationVectorDataType destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete Processing;\ndelete Producer;\n}\n\n\n//@{\nvoid cfm_applicationvectordatatype::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_applicationvectordatatype::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ApplicationVectorDataType'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ApplicationVectorDataType'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationVectorDataType generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Processing', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ApplicationVectorDataType'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PROCESSING\n#define COFS_MODEL_PROCESSING\n\n\n#include \"cfm_processing_global.h\"\n#include \"cfm_processing_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_processing : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_processing(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_processing(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Processing', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_in', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'ApplicationVectorDataType'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_processing\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationVectorDataType generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_processing.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Processing definitions' algorithm generated code\n\n//End of 'Processing definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_processing ::cfm_processing() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_processing::~cfm_processing(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Processing destructor' algorithm generated code\n\n//End of 'Processing destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_processing::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_processing::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'ApplicationVectorDataType'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'user_data_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'ApplicationVectorDataType'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationVectorDataType generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CoSimVerilatorChiselApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer1', 'type': 'cofluent:Function'}, {'name': 'Producer2', 'type': 'cofluent:Function'}, {'name': 'adder', 'type': 'cofluent:Function'}], 'relations': [{'name': 'data1', 'type': 'cofluent:MessageQueue', 'dataType': 'Defdata1', 'connectTo': ['Producer1', 'adder']}, {'name': 'data2', 'type': 'cofluent:MessageQueue', 'dataType': 'Defdata1', 'connectTo': ['Producer2', 'adder']}, {'name': 'sum', 'type': 'cofluent:MessageQueue', 'dataType': 'Defsum', 'connectTo': ['adder', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_COSIMVERILATORCHISELAPP\n#define COFS_MODEL_COSIMVERILATORCHISELAPP\n\n\n#include \"cfm_cosimverilatorchiselapp_global.h\"\n#include \"cfm_cosimverilatorchiselapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_producer1.h\"\n#include \"cfm_producer2.h\"\n#include \"cfm_adder.h\"\n#include \"dt/cft_defdata1_in.h\"\n#include \"dt/cft_defsum_in.h\"\n\nclass cfm_cosimverilatorchiselapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_Defdata1> mq_data1_t;\ntypedef cf_core::cf_message_queue<cft_Defdata1> mq_data2_t;\ntypedef cf_core::cf_message_queue<cft_Defsum> mq_sum_t;\n\n/// constructor\ncfm_cosimverilatorchiselapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_cosimverilatorchiselapp(void);\n\ncfm_consumer *Consumer;\ncfm_producer1 *Producer1;\ncfm_producer2 *Producer2;\ncfm_adder *adder;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_data1_t mq_data1;\nmq_data2_t mq_data2;\nmq_sum_t mq_sum;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CoSimVerilatorChiselApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer1', 'type': 'cofluent:Function'}, {'name': 'Producer2', 'type': 'cofluent:Function'}, {'name': 'adder', 'type': 'cofluent:Function'}], 'relations': [{'name': 'data1', 'type': 'cofluent:MessageQueue', 'dataType': 'Defdata1', 'connectTo': ['Producer1', 'adder']}, {'name': 'data2', 'type': 'cofluent:MessageQueue', 'dataType': 'Defdata1', 'connectTo': ['Producer2', 'adder']}, {'name': 'sum', 'type': 'cofluent:MessageQueue', 'dataType': 'Defsum', 'connectTo': ['adder', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_cosimverilatorchiselapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVerilatorChiselApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_cosimverilatorchiselapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoSimVerilatorChiselApp definitions' algorithm generated code\n\n//End of 'CoSimVerilatorChiselApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_cosimverilatorchiselapp ::cfm_cosimverilatorchiselapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_data1(\"data1\"),mq_data2(\"data2\"),mq_sum(\"sum\"){\ncf_application::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nProducer1 = new cfm_producer1(\"Producer1\");\nProducer2 = new cfm_producer2(\"Producer2\");\nadder = new cfm_adder(\"adder\");\n//connections\n//model connect to relation\nConsumer->p_mq_sum(mq_sum.p_target_socket);\n//model connect to relation\nProducer1->p_mq_data1(mq_data1.p_target_socket);\n//model connect to relation\nProducer2->p_mq_data2(mq_data2.p_target_socket);\n//model connect to relation\nadder->p_mq_data1(mq_data1.p_target_socket);\nadder->p_mq_data2(mq_data2.p_target_socket);\nadder->p_mq_sum(mq_sum.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_cosimverilatorchiselapp::~cfm_cosimverilatorchiselapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CoSimVerilatorChiselApp destructor' algorithm generated code\n\n//End of 'CoSimVerilatorChiselApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete Producer1;\ndelete Producer2;\ndelete adder;\n}\n\n\n//@{\nvoid cfm_cosimverilatorchiselapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_cosimverilatorchiselapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer1', 'type': 'cofluent:Function', 'ports': [{'name': 'data1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Defdata1'}], 'globalName': 'CoSimVerilatorChiselApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER1\n#define COFS_MODEL_PRODUCER1\n\n\n#include \"cfm_producer1_global.h\"\n#include \"cfm_producer1_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata1_in.h\"\n\nclass cfm_producer1 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer1(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer1(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer1', 'type': 'cofluent:Function', 'ports': [{'name': 'data1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Defdata1'}], 'globalName': 'CoSimVerilatorChiselApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer1\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVerilatorChiselApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer1.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer1 definitions' algorithm generated code\n\n//End of 'Producer1 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer1 ::cfm_producer1() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer1::~cfm_producer1(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer1 destructor' algorithm generated code\n\n//End of 'Producer1 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer1::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer1::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer2', 'type': 'cofluent:Function', 'ports': [{'name': 'data2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Defdata1'}], 'globalName': 'CoSimVerilatorChiselApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER2\n#define COFS_MODEL_PRODUCER2\n\n\n#include \"cfm_producer2_global.h\"\n#include \"cfm_producer2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata1_in.h\"\n\nclass cfm_producer2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer2', 'type': 'cofluent:Function', 'ports': [{'name': 'data2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Defdata1'}], 'globalName': 'CoSimVerilatorChiselApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVerilatorChiselApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer2 definitions' algorithm generated code\n\n//End of 'Producer2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer2 ::cfm_producer2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer2::~cfm_producer2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer2 destructor' algorithm generated code\n\n//End of 'Producer2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'sum', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Defsum'}], 'globalName': 'CoSimVerilatorChiselApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defsum_in.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'sum', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Defsum'}], 'globalName': 'CoSimVerilatorChiselApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CoSimVerilatorChiselApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'TLM2LT', 'models': [{'name': 'Reader', 'type': 'cofluent:Function'}, {'name': 'TLM2Platfom', 'type': 'cofluent:SystemCIP'}, {'name': 'Target', 'type': 'cofluent:Function'}, {'name': 'Target_2', 'type': 'cofluent:Function'}, {'name': 'Writer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'InitiatorReader', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Reader']}, {'name': 'InitiatorWriter', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Writer']}, {'name': 'ReaderResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Reader']}, {'name': 'ReferenceQueue', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target_2']}, {'name': 'ReferenceQueue2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target']}, {'name': 'ReferenceQueue3', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync2', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target']}, {'name': 'Sync3', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target_2']}, {'name': 'TargetRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetWrapper', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TLM2LT\n#define COFS_MODEL_TLM2LT\n\n\n#include \"cfm_tlm2lt_global.h\"\n#include \"cfm_tlm2lt_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_reader.h\"\n#include \"cfm_tlm2platfom.h\"\n#include \"cfm_target.h\"\n#include \"cfm_target_2.h\"\n#include \"cfm_writer.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_defmsgq_in.h\"\n#include \"dt/cft_initiator_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_tlm2lt : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_Initiator> mq_InitiatorReader_t;\ntypedef cf_core::cf_message_queue<cft_Initiator> mq_InitiatorWriter_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_ReaderResponse_t;\ntypedef cf_core::cf_message_queue<cft_DefData> mq_ReferenceQueue_t;\ntypedef cf_core::cf_message_queue<cft_DefData> mq_ReferenceQueue2_t;\ntypedef cf_core::cf_message_queue<cft_DefMsgQ> mq_ReferenceQueue3_t;\ntypedef cf_core::cf_event ev_Sync_t;\ntypedef cf_core::cf_event ev_Sync2_t;\ntypedef cf_core::cf_event ev_Sync3_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_TargetRequest_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_TargetResponse_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_TargetWrapper_t;\n\n/// constructor\ncfm_tlm2lt(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_tlm2lt(void);\n\ncfm_reader *Reader;\ncfm_tlm2platfom *TLM2Platfom;\ncfm_target *Target;\ncfm_target_2 *Target_2;\ncfm_writer *Writer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_InitiatorReader_t mq_InitiatorReader;\nmq_InitiatorWriter_t mq_InitiatorWriter;\nmq_ReaderResponse_t mq_ReaderResponse;\nmq_ReferenceQueue_t mq_ReferenceQueue;\nmq_ReferenceQueue2_t mq_ReferenceQueue2;\nmq_ReferenceQueue3_t mq_ReferenceQueue3;\nev_Sync_t ev_Sync;\nev_Sync2_t ev_Sync2;\nev_Sync3_t ev_Sync3;\nmq_TargetRequest_t mq_TargetRequest;\nmq_TargetResponse_t mq_TargetResponse;\nmq_TargetWrapper_t mq_TargetWrapper;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'TLM2LT', 'models': [{'name': 'Reader', 'type': 'cofluent:Function'}, {'name': 'TLM2Platfom', 'type': 'cofluent:SystemCIP'}, {'name': 'Target', 'type': 'cofluent:Function'}, {'name': 'Target_2', 'type': 'cofluent:Function'}, {'name': 'Writer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'InitiatorReader', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Reader']}, {'name': 'InitiatorWriter', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Writer']}, {'name': 'ReaderResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Reader']}, {'name': 'ReferenceQueue', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target_2']}, {'name': 'ReferenceQueue2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target']}, {'name': 'ReferenceQueue3', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync2', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target']}, {'name': 'Sync3', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target_2']}, {'name': 'TargetRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetWrapper', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_tlm2lt\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2LT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_tlm2lt.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'TLM2LT definitions' algorithm generated code\n\n//End of 'TLM2LT definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_tlm2lt ::cfm_tlm2lt() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),ev_Sync(\"Sync\"),ev_Sync2(\"Sync2\"),ev_Sync3(\"Sync3\"),mq_InitiatorReader(\"InitiatorReader\"),mq_InitiatorWriter(\"InitiatorWriter\"),mq_ReaderResponse(\"ReaderResponse\"),mq_ReferenceQueue(\"ReferenceQueue\"),mq_ReferenceQueue2(\"ReferenceQueue2\"),mq_ReferenceQueue3(\"ReferenceQueue3\"),mq_TargetRequest(\"TargetRequest\"),mq_TargetResponse(\"TargetResponse\"),mq_TargetWrapper(\"TargetWrapper\"){\ncf_application::init();\n//instantiation of models\nReader = new cfm_reader(\"Reader\");\nTLM2Platfom = new cfm_tlm2platfom(\"TLM2Platfom\");\nTarget = new cfm_target(\"Target\");\nTarget_2 = new cfm_target_2(\"Target_2\");\nWriter = new cfm_writer(\"Writer\");\n//connections\n//model connect to relation\nReader->p_mq_InitiatorReader(mq_InitiatorReader.p_target_socket);\nReader->p_mq_ReaderResponse(mq_ReaderResponse.p_target_socket);\nReader->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);\nReader->p_ev_Sync(ev_Sync.p_target_socket);\n//model connect to relation\nTarget->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);\nTarget->p_ev_Sync2(ev_Sync2.p_target_socket);\nTarget->p_mq_TargetWrapper(mq_TargetWrapper.p_target_socket);\n//model connect to relation\nTarget_2->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);\nTarget_2->p_ev_Sync3(ev_Sync3.p_target_socket);\nTarget_2->p_mq_TargetRequest(mq_TargetRequest.p_target_socket);\nTarget_2->p_mq_TargetResponse(mq_TargetResponse.p_target_socket);\n//model connect to relation\nWriter->p_mq_InitiatorWriter(mq_InitiatorWriter.p_target_socket);\nWriter->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);\nWriter->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);\nWriter->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);\nWriter->p_ev_Sync(ev_Sync.p_target_socket);\nWriter->p_ev_Sync2(ev_Sync2.p_target_socket);\nWriter->p_ev_Sync3(ev_Sync3.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_tlm2lt::~cfm_tlm2lt(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'TLM2LT destructor' algorithm generated code\n\n//End of 'TLM2LT destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Reader;\ndelete TLM2Platfom;\ndelete Target;\ndelete Target_2;\ndelete Writer;\n}\n\n\n//@{\nvoid cfm_tlm2lt::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_tlm2lt::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Writer', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorWriter', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WRITER\n#define COFS_MODEL_WRITER\n\n\n#include \"cfm_writer_global.h\"\n#include \"cfm_writer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_defmsgq_in.h\"\n#include \"dt/cft_initiator_in.h\"\n\nclass cfm_writer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_writer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_writer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Writer', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorWriter', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_writer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2LT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_writer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Writer definitions' algorithm generated code\n\n//End of 'Writer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_writer ::cfm_writer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_writer::~cfm_writer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Writer destructor' algorithm generated code\n\n//End of 'Writer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_writer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_writer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Target', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetWrapper', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TARGET\n#define COFS_MODEL_TARGET\n\n\n#include \"cfm_target_global.h\"\n#include \"cfm_target_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_target : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_target(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_target(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Target', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetWrapper', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_target\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2LT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_target.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target definitions' algorithm generated code\n\n//End of 'Target definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_target ::cfm_target() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_target::~cfm_target(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target destructor' algorithm generated code\n\n//End of 'Target destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_target::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_target::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Reader', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorReader', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReaderResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_READER\n#define COFS_MODEL_READER\n\n\n#include \"cfm_reader_global.h\"\n#include \"cfm_reader_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defmsgq_in.h\"\n#include \"dt/cft_initiator_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_reader : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_reader(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_reader(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Reader', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorReader', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReaderResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_reader\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2LT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_reader.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Reader definitions' algorithm generated code\n\n//End of 'Reader definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_reader ::cfm_reader() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_reader::~cfm_reader(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Reader destructor' algorithm generated code\n\n//End of 'Reader destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_reader::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_reader::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Target_2', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'TargetResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Target'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TARGET_2\n#define COFS_MODEL_TARGET_2\n\n\n#include \"cfm_target_2_global.h\"\n#include \"cfm_target_2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_target_2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_target_2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_target_2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Target_2', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'TargetResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Target'}], 'globalName': 'TLM2LT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_target_2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2LT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_target_2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target_2 definitions' algorithm generated code\n\n//End of 'Target_2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_target_2 ::cfm_target_2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_target_2::~cfm_target_2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target_2 destructor' algorithm generated code\n\n//End of 'Target_2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_target_2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_target_2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'AutomatedPayloadTrackers', 'models': [{'name': 'C1', 'type': 'cofluent:Function'}, {'name': 'C2', 'type': 'cofluent:Function'}, {'name': 'F12', 'type': 'cofluent:Function'}, {'name': 'F2', 'type': 'cofluent:Function'}, {'name': 'P1', 'type': 'cofluent:Function'}, {'name': 'P2', 'type': 'cofluent:Function'}], 'relations': [{'name': 'M1_1', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F12', 'P1']}, {'name': 'M1_2', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F2', 'F12']}, {'name': 'M1_3', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F2', 'C1']}, {'name': 'M2_1', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F12', 'P2']}, {'name': 'M2_2', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['C2', 'F12']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_AUTOMATEDPAYLOADTRACKERS\n#define COFS_MODEL_AUTOMATEDPAYLOADTRACKERS\n\n\n#include \"cfm_automatedpayloadtrackers_global.h\"\n#include \"cfm_automatedpayloadtrackers_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_c1.h\"\n#include \"cfm_c2.h\"\n#include \"cfm_f12.h\"\n#include \"cfm_f2.h\"\n#include \"cfm_p1.h\"\n#include \"cfm_p2.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_automatedpayloadtrackers : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_M1_1_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_M1_2_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_M1_3_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_M2_1_t;\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_M2_2_t;\n\n/// constructor\ncfm_automatedpayloadtrackers(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_automatedpayloadtrackers(void);\n\ncfm_c1 *C1;\ncfm_c2 *C2;\ncfm_f12 *F12;\ncfm_f2 *F2;\ncfm_p1 *P1;\ncfm_p2 *P2;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_M1_1_t mq_M1_1;\nmq_M1_2_t mq_M1_2;\nmq_M1_3_t mq_M1_3;\nmq_M2_1_t mq_M2_1;\nmq_M2_2_t mq_M2_2;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'AutomatedPayloadTrackers', 'models': [{'name': 'C1', 'type': 'cofluent:Function'}, {'name': 'C2', 'type': 'cofluent:Function'}, {'name': 'F12', 'type': 'cofluent:Function'}, {'name': 'F2', 'type': 'cofluent:Function'}, {'name': 'P1', 'type': 'cofluent:Function'}, {'name': 'P2', 'type': 'cofluent:Function'}], 'relations': [{'name': 'M1_1', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F12', 'P1']}, {'name': 'M1_2', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F2', 'F12']}, {'name': 'M1_3', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F2', 'C1']}, {'name': 'M2_1', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['F12', 'P2']}, {'name': 'M2_2', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['C2', 'F12']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_automatedpayloadtrackers\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_automatedpayloadtrackers.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'AutomatedPayloadTrackers definitions' algorithm generated code\n\n//End of 'AutomatedPayloadTrackers definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_automatedpayloadtrackers ::cfm_automatedpayloadtrackers() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_M1_1(\"M1_1\"),mq_M1_2(\"M1_2\"),mq_M1_3(\"M1_3\"),mq_M2_1(\"M2_1\"),mq_M2_2(\"M2_2\"){\ncf_application::init();\n//instantiation of models\nC1 = new cfm_c1(\"C1\");\nC2 = new cfm_c2(\"C2\");\nF12 = new cfm_f12(\"F12\");\nF2 = new cfm_f2(\"F2\");\nP1 = new cfm_p1(\"P1\");\nP2 = new cfm_p2(\"P2\");\n//connections\n//model connect to relation\nC1->p_mq_M1_3(mq_M1_3.p_target_socket);\n//model connect to relation\nC2->p_mq_M2_2(mq_M2_2.p_target_socket);\n//model connect to relation\nF12->p_mq_M1_1(mq_M1_1.p_target_socket);\nF12->p_mq_M1_2(mq_M1_2.p_target_socket);\nF12->p_mq_M2_1(mq_M2_1.p_target_socket);\nF12->p_mq_M2_2(mq_M2_2.p_target_socket);\n//model connect to relation\nF2->p_mq_M1_2(mq_M1_2.p_target_socket);\nF2->p_mq_M1_3(mq_M1_3.p_target_socket);\n//model connect to relation\nP1->p_mq_M1_1(mq_M1_1.p_target_socket);\n//model connect to relation\nP2->p_mq_M2_1(mq_M2_1.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_automatedpayloadtrackers::~cfm_automatedpayloadtrackers(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'AutomatedPayloadTrackers destructor' algorithm generated code\n\n//End of 'AutomatedPayloadTrackers destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete C1;\ndelete C2;\ndelete F12;\ndelete F2;\ndelete P1;\ndelete P2;\n}\n\n\n//@{\nvoid cfm_automatedpayloadtrackers::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_automatedpayloadtrackers::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'C2', 'type': 'cofluent:Function', 'ports': [{'name': 'M2_2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_C2\n#define COFS_MODEL_C2\n\n\n#include \"cfm_c2_global.h\"\n#include \"cfm_c2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_c2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_c2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_c2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'C2', 'type': 'cofluent:Function', 'ports': [{'name': 'M2_2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_c2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_c2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'C2 definitions' algorithm generated code\n\n//End of 'C2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_c2 ::cfm_c2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_c2::~cfm_c2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'C2 destructor' algorithm generated code\n\n//End of 'C2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_c2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_c2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'F2', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'M1_3', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_F2\n#define COFS_MODEL_F2\n\n\n#include \"cfm_f2_global.h\"\n#include \"cfm_f2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_f2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_f2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_f2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'F2', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'M1_3', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_f2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_f2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F2 definitions' algorithm generated code\n\n//End of 'F2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_f2 ::cfm_f2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_f2::~cfm_f2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F2 destructor' algorithm generated code\n\n//End of 'F2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_f2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_f2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'F12', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'M1_2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}, {'name': 'M2_1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'M2_2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_F12\n#define COFS_MODEL_F12\n\n\n#include \"cfm_f12_global.h\"\n#include \"cfm_f12_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_f12 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_f12(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_f12(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'F12', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'M1_2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}, {'name': 'M2_1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}, {'name': 'M2_2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_f12\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_f12.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F12 definitions' algorithm generated code\n\n//End of 'F12 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_f12 ::cfm_f12() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_f12::~cfm_f12(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F12 destructor' algorithm generated code\n\n//End of 'F12 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_f12::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_f12::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'P1', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_P1\n#define COFS_MODEL_P1\n\n\n#include \"cfm_p1_global.h\"\n#include \"cfm_p1_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_p1 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_p1(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_p1(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'P1', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_p1\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_p1.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'P1 definitions' algorithm generated code\n\n//End of 'P1 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_p1 ::cfm_p1() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_p1::~cfm_p1(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'P1 destructor' algorithm generated code\n\n//End of 'P1 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_p1::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_p1::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'P2', 'type': 'cofluent:Function', 'ports': [{'name': 'M2_1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_P2\n#define COFS_MODEL_P2\n\n\n#include \"cfm_p2_global.h\"\n#include \"cfm_p2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_p2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_p2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_p2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'P2', 'type': 'cofluent:Function', 'ports': [{'name': 'M2_1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_p2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_p2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'P2 definitions' algorithm generated code\n\n//End of 'P2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_p2 ::cfm_p2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_p2::~cfm_p2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'P2 destructor' algorithm generated code\n\n//End of 'P2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_p2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_p2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'C1', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_3', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_C1\n#define COFS_MODEL_C1\n\n\n#include \"cfm_c1_global.h\"\n#include \"cfm_c1_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_c1 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_c1(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_c1(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'C1', 'type': 'cofluent:Function', 'ports': [{'name': 'M1_3', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'AutomatedPayloadTrackers'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_c1\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of AutomatedPayloadTrackers generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_c1.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'C1 definitions' algorithm generated code\n\n//End of 'C1 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_c1 ::cfm_c1() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_c1::~cfm_c1(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'C1 destructor' algorithm generated code\n\n//End of 'C1 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_c1::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_c1::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'DDRMemory', 'models': [{'name': 'ClientSide', 'type': 'cofluent:Function'}, {'name': 'Target', 'type': 'cofluent:Function'}], 'relations': [{'name': 'ARADDRchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefARADDRchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'AWADDRchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefAWADDRchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'BRESPchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBRESPchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'RDATAchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRDATAchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'WDATAchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefWDATAchn', 'connectTo': ['ClientSide', 'Target']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_DDRMEMORY\n#define COFS_MODEL_DDRMEMORY\n\n\n#include \"cfm_ddrmemory_global.h\"\n#include \"cfm_ddrmemory_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_clientside.h\"\n#include \"cfm_target.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_ddrmemory : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefARADDRchn> mq_ARADDRchn_t;\ntypedef cf_core::cf_message_queue<cft_DefAWADDRchn> mq_AWADDRchn_t;\ntypedef cf_core::cf_message_queue<cft_DefBRESPchn> mq_BRESPchn_t;\ntypedef cf_core::cf_message_queue<cft_DefRDATAchn> mq_RDATAchn_t;\ntypedef cf_core::cf_message_queue<cft_DefWDATAchn> mq_WDATAchn_t;\n\n/// constructor\ncfm_ddrmemory(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ddrmemory(void);\n\ncfm_clientside *ClientSide;\ncfm_target *Target;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_ARADDRchn_t mq_ARADDRchn;\nmq_AWADDRchn_t mq_AWADDRchn;\nmq_BRESPchn_t mq_BRESPchn;\nmq_RDATAchn_t mq_RDATAchn;\nmq_WDATAchn_t mq_WDATAchn;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'DDRMemory', 'models': [{'name': 'ClientSide', 'type': 'cofluent:Function'}, {'name': 'Target', 'type': 'cofluent:Function'}], 'relations': [{'name': 'ARADDRchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefARADDRchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'AWADDRchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefAWADDRchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'BRESPchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBRESPchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'RDATAchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRDATAchn', 'connectTo': ['ClientSide', 'Target']}, {'name': 'WDATAchn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefWDATAchn', 'connectTo': ['ClientSide', 'Target']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ddrmemory\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ddrmemory.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'DDRMemory definitions' algorithm generated code\n\n//End of 'DDRMemory definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ddrmemory ::cfm_ddrmemory() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_ARADDRchn(\"ARADDRchn\"),mq_AWADDRchn(\"AWADDRchn\"),mq_BRESPchn(\"BRESPchn\"),mq_RDATAchn(\"RDATAchn\"),mq_WDATAchn(\"WDATAchn\"){\ncf_application::init();\n//instantiation of models\nClientSide = new cfm_clientside(\"ClientSide\");\nTarget = new cfm_target(\"Target\");\n//connections\n//model connect to relation\nClientSide->p_mq_ARADDRchn(mq_ARADDRchn.p_target_socket);\nClientSide->p_mq_AWADDRchn(mq_AWADDRchn.p_target_socket);\nClientSide->p_mq_BRESPchn(mq_BRESPchn.p_target_socket);\nClientSide->p_mq_RDATAchn(mq_RDATAchn.p_target_socket);\nClientSide->p_mq_WDATAchn(mq_WDATAchn.p_target_socket);\n//model connect to relation\nTarget->p_mq_ARADDRchn(mq_ARADDRchn.p_target_socket);\nTarget->p_mq_AWADDRchn(mq_AWADDRchn.p_target_socket);\nTarget->p_mq_BRESPchn(mq_BRESPchn.p_target_socket);\nTarget->p_mq_RDATAchn(mq_RDATAchn.p_target_socket);\nTarget->p_mq_WDATAchn(mq_WDATAchn.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ddrmemory::~cfm_ddrmemory(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'DDRMemory destructor' algorithm generated code\n\n//End of 'DDRMemory destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete ClientSide;\ndelete Target;\n}\n\n\n//@{\nvoid cfm_ddrmemory::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ddrmemory::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ClientSide', 'type': 'cofluent:Function', 'models': [{'name': 'Device', 'type': 'cofluent:Function', 'vector': '0, C_Nbr'}, {'name': 'RDDmux', 'type': 'cofluent:RoutingFunction'}, {'name': 'WRDmux', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn', 'connectTo': ['Device']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn', 'connectTo': ['Device']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn', 'connectTo': ['WRDmux']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn', 'connectTo': ['RDDmux']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn', 'connectTo': ['Device']}], 'relations': [{'name': 'BRESPin', 'type': 'cofluent:MessageQueue', 'vector': '0, C_Nbr', 'dataType': 'DefBRESPchn', 'connectTo': ['Device', 'WRDmux']}, {'name': 'RDATAin', 'type': 'cofluent:MessageQueue', 'vector': '0, C_Nbr', 'dataType': 'DefRDATAchn', 'connectTo': ['Device', 'RDDmux']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CLIENTSIDE\n#define COFS_MODEL_CLIENTSIDE\n\n\n#include \"cfm_clientside_global.h\"\n#include \"cfm_clientside_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_device.h\"\n#include \"cfm_rddmux.h\"\n#include \"cfm_wrdmux.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_clientside : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefBRESPchn> mq_BRESPin_t;\ntypedef cf_core::cf_message_queue<cft_DefRDATAchn> mq_RDATAin_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_clientside, cft_defaraddrchn> p_mq_ARADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_clientside, cft_defawaddrchn> p_mq_AWADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_clientside, cft_defbrespchn> p_mq_BRESPchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_clientside, cft_defrdatachn> p_mq_RDATAchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_clientside, cft_defwdatachn> p_mq_WDATAchn_t;\n\n/// constructor\ncfm_clientside(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_clientside(void);\n\np_mq_ARADDRchn_t p_mq_ARADDRchn;\np_mq_AWADDRchn_t p_mq_AWADDRchn;\np_mq_BRESPchn_t p_mq_BRESPchn;\np_mq_RDATAchn_t p_mq_RDATAchn;\np_mq_WDATAchn_t p_mq_WDATAchn;\n\nstd::vector<cfm_device *> ClientSide_vec;\ncfm_rddmux *RDDmux;\ncfm_wrdmux *WRDmux;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_BRESPin_t *> mq_BRESPin_vec;\nstd::vector<mq_RDATAin_t *> mq_RDATAin_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ClientSide', 'type': 'cofluent:Function', 'models': [{'name': 'Device', 'type': 'cofluent:Function', 'vector': '0, C_Nbr'}, {'name': 'RDDmux', 'type': 'cofluent:RoutingFunction'}, {'name': 'WRDmux', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn', 'connectTo': ['Device']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn', 'connectTo': ['Device']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn', 'connectTo': ['WRDmux']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn', 'connectTo': ['RDDmux']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn', 'connectTo': ['Device']}], 'relations': [{'name': 'BRESPin', 'type': 'cofluent:MessageQueue', 'vector': '0, C_Nbr', 'dataType': 'DefBRESPchn', 'connectTo': ['Device', 'WRDmux']}, {'name': 'RDATAin', 'type': 'cofluent:MessageQueue', 'vector': '0, C_Nbr', 'dataType': 'DefRDATAchn', 'connectTo': ['Device', 'RDDmux']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_clientside\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_clientside.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ClientSide definitions' algorithm generated code\n\n//End of 'ClientSide definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_clientside ::cfm_clientside() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_BRESPin(\"BRESPin\"),mq_RDATAin(\"RDATAin\"),p_mq_ARADDRchn(\"p_mq_ARADDRchn\"),p_mq_AWADDRchn(\"p_mq_AWADDRchn\"),p_mq_BRESPchn(\"p_mq_BRESPchn\"),p_mq_RDATAchn(\"p_mq_RDATAchn\"),p_mq_WDATAchn(\"p_mq_WDATAchn\"){\ncf_function_container::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {\n\t\tcfm_device* module = new cfm_device(\n\t\t\t\tcf_string(\"Device[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tDevice_vec.push_back(module);\n\t}\nRDDmux = new cfm_rddmux(\"RDDmux\");\nWRDmux = new cfm_wrdmux(\"WRDmux\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {\n\t\tmq_BRESPin_t* module = new mq_BRESPin_t(\n\t\t\t\tcf_string(\"BRESPin[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_BRESPin_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {\n\t\tmq_RDATAin_t* module = new mq_RDATAin_t(\n\t\t\t\tcf_string(\"RDATAin[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_RDATAin_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {\n\t\tcfm_device* module = Device_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( C_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_BRESPin(mq_BRESPin_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( C_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_RDATAin(mq_RDATAin_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_ARADDRchn(p_mq_ARADDRchn);\nmodule->p_mq_AWADDRchn(p_mq_AWADDRchn);\nmodule->p_mq_WDATAchn(p_mq_WDATAchn);\n}\n}\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {\n\t\tRDDmux->p_mq_RDATAin(mq_RDATAin_vec[i]->p_target_socket);\n\t}\n//model connect to port\nRDDmux->p_mq_RDATAchn(p_mq_RDATAchn);\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( C_Nbr + 1); i++) {\n\t\tWRDmux->p_mq_BRESPin(mq_BRESPin_vec[i]->p_target_socket);\n\t}\n//model connect to port\nWRDmux->p_mq_BRESPchn(p_mq_BRESPchn);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_clientside::~cfm_clientside(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ClientSide destructor' algorithm generated code\n\n//End of 'ClientSide destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_device*>::const_iterator vi = Device_vec.begin();\n\t\t\tvi != Device_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete RDDmux;\ndelete WRDmux;\n//deconstructor for vector relation\nfor (vector<mq_BRESPin_t*>::const_iterator vi = mq_BRESPin_vec.begin();\n\t\t\tvi != mq_BRESPin_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_RDATAin_t*>::const_iterator vi = mq_RDATAin_vec.begin();\n\t\t\tvi != mq_RDATAin_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_clientside::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_clientside::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Target', 'type': 'cofluent:Function', 'models': [{'name': 'Memory', 'type': 'cofluent:Function', 'vector': '0, M_Nbr'}, {'name': 'MemoryController', 'type': 'cofluent:Function'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn', 'connectTo': ['MemoryController']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn', 'connectTo': ['MemoryController']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn', 'connectTo': ['MemoryController']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn', 'connectTo': ['MemoryController']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn', 'connectTo': ['MemoryController']}], 'relations': [{'name': 'DDRCommand', 'type': 'cofluent:MessageQueue', 'vector': '0, M_Nbr', 'dataType': 'DefDDRCommand', 'connectTo': ['MemoryController', 'Memory']}, {'name': 'DQs', 'type': 'cofluent:MessageQueue', 'vector': '0, M_Nbr', 'dataType': 'DefDQs', 'connectTo': ['MemoryController', 'Memory']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TARGET\n#define COFS_MODEL_TARGET\n\n\n#include \"cfm_target_global.h\"\n#include \"cfm_target_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_memory.h\"\n#include \"cfm_memorycontroller.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n#include \"dt/cft_defdqs_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_target : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefDDRCommand> mq_DDRCommand_t;\ntypedef cf_core::cf_message_queue<cft_DefDQs> mq_DQs_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_target, cft_defaraddrchn> p_mq_ARADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_target, cft_defawaddrchn> p_mq_AWADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_target, cft_defbrespchn> p_mq_BRESPchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_target, cft_defrdatachn> p_mq_RDATAchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_target, cft_defwdatachn> p_mq_WDATAchn_t;\n\n/// constructor\ncfm_target(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_target(void);\n\np_mq_ARADDRchn_t p_mq_ARADDRchn;\np_mq_AWADDRchn_t p_mq_AWADDRchn;\np_mq_BRESPchn_t p_mq_BRESPchn;\np_mq_RDATAchn_t p_mq_RDATAchn;\np_mq_WDATAchn_t p_mq_WDATAchn;\n\nstd::vector<cfm_memory *> Target_vec;\ncfm_memorycontroller *MemoryController;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_DDRCommand_t *> mq_DDRCommand_vec;\nstd::vector<mq_DQs_t *> mq_DQs_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Target', 'type': 'cofluent:Function', 'models': [{'name': 'Memory', 'type': 'cofluent:Function', 'vector': '0, M_Nbr'}, {'name': 'MemoryController', 'type': 'cofluent:Function'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn', 'connectTo': ['MemoryController']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn', 'connectTo': ['MemoryController']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn', 'connectTo': ['MemoryController']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn', 'connectTo': ['MemoryController']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn', 'connectTo': ['MemoryController']}], 'relations': [{'name': 'DDRCommand', 'type': 'cofluent:MessageQueue', 'vector': '0, M_Nbr', 'dataType': 'DefDDRCommand', 'connectTo': ['MemoryController', 'Memory']}, {'name': 'DQs', 'type': 'cofluent:MessageQueue', 'vector': '0, M_Nbr', 'dataType': 'DefDQs', 'connectTo': ['MemoryController', 'Memory']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_target\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_target.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target definitions' algorithm generated code\n\n//End of 'Target definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_target ::cfm_target() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_DDRCommand(\"DDRCommand\"),mq_DQs(\"DQs\"),p_mq_ARADDRchn(\"p_mq_ARADDRchn\"),p_mq_AWADDRchn(\"p_mq_AWADDRchn\"),p_mq_BRESPchn(\"p_mq_BRESPchn\"),p_mq_RDATAchn(\"p_mq_RDATAchn\"),p_mq_WDATAchn(\"p_mq_WDATAchn\"){\ncf_function_container::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tcfm_memory* module = new cfm_memory(\n\t\t\t\tcf_string(\"Memory[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tMemory_vec.push_back(module);\n\t}\nMemoryController = new cfm_memorycontroller(\"MemoryController\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tmq_DDRCommand_t* module = new mq_DDRCommand_t(\n\t\t\t\tcf_string(\"DDRCommand[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_DDRCommand_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tmq_DQs_t* module = new mq_DQs_t(\n\t\t\t\tcf_string(\"DQs[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_DQs_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tcfm_memory* module = Memory_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( M_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_DDRCommand(mq_DDRCommand_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( M_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_DQs(mq_DQs_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tMemoryController->p_mq_DDRCommand(mq_DDRCommand_vec[i]->p_target_socket);\n\t}\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tMemoryController->p_mq_DQs(mq_DQs_vec[i]->p_target_socket);\n\t}\n//model connect to port\nMemoryController->p_mq_ARADDRchn(p_mq_ARADDRchn);\nMemoryController->p_mq_AWADDRchn(p_mq_AWADDRchn);\nMemoryController->p_mq_BRESPchn(p_mq_BRESPchn);\nMemoryController->p_mq_RDATAchn(p_mq_RDATAchn);\nMemoryController->p_mq_WDATAchn(p_mq_WDATAchn);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_target::~cfm_target(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target destructor' algorithm generated code\n\n//End of 'Target destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_memory*>::const_iterator vi = Memory_vec.begin();\n\t\t\tvi != Memory_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete MemoryController;\n//deconstructor for vector relation\nfor (vector<mq_DDRCommand_t*>::const_iterator vi = mq_DDRCommand_vec.begin();\n\t\t\tvi != mq_DDRCommand_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_DQs_t*>::const_iterator vi = mq_DQs_vec.begin();\n\t\t\tvi != mq_DQs_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_target::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_target::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Device', 'type': 'cofluent:Function', 'models': [{'name': 'ReceiveWACK', 'type': 'cofluent:Function'}, {'name': 'ReceiverRData', 'type': 'cofluent:Function'}, {'name': 'Sender', 'type': 'cofluent:Function'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn', 'connectTo': ['Sender']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn', 'connectTo': ['Sender']}, {'name': 'BRESPin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn', 'connectTo': ['ReceiveWACK']}, {'name': 'RDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn', 'connectTo': ['ReceiverRData']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn', 'connectTo': ['Sender']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_DEVICE\n#define COFS_MODEL_DEVICE\n\n\n#include \"cfm_device_global.h\"\n#include \"cfm_device_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_receivewack.h\"\n#include \"cfm_receiverrdata.h\"\n#include \"cfm_sender.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_device : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_device, cft_defaraddrchn> p_mq_ARADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_device, cft_defawaddrchn> p_mq_AWADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_device, cft_defbrespchn> p_mq_BRESPin_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_device, cft_defrdatachn> p_mq_RDATAin_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_device, cft_defwdatachn> p_mq_WDATAchn_t;\n\n/// constructor\ncfm_device(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_device(void);\n\np_mq_ARADDRchn_t p_mq_ARADDRchn;\np_mq_AWADDRchn_t p_mq_AWADDRchn;\np_mq_BRESPin_t p_mq_BRESPin;\np_mq_RDATAin_t p_mq_RDATAin;\np_mq_WDATAchn_t p_mq_WDATAchn;\n\ncfm_receivewack *ReceiveWACK;\ncfm_receiverrdata *ReceiverRData;\ncfm_sender *Sender;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Device', 'type': 'cofluent:Function', 'models': [{'name': 'ReceiveWACK', 'type': 'cofluent:Function'}, {'name': 'ReceiverRData', 'type': 'cofluent:Function'}, {'name': 'Sender', 'type': 'cofluent:Function'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn', 'connectTo': ['Sender']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn', 'connectTo': ['Sender']}, {'name': 'BRESPin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn', 'connectTo': ['ReceiveWACK']}, {'name': 'RDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn', 'connectTo': ['ReceiverRData']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn', 'connectTo': ['Sender']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_device\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_device.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Device definitions' algorithm generated code\n\n//End of 'Device definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_device ::cfm_device() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_ARADDRchn(\"p_mq_ARADDRchn\"),p_mq_AWADDRchn(\"p_mq_AWADDRchn\"),p_mq_BRESPin(\"p_mq_BRESPin\"),p_mq_RDATAin(\"p_mq_RDATAin\"),p_mq_WDATAchn(\"p_mq_WDATAchn\"){\ncf_function_container::init();\n//instantiation of models\nReceiveWACK = new cfm_receivewack(\"ReceiveWACK\");\nReceiverRData = new cfm_receiverrdata(\"ReceiverRData\");\nSender = new cfm_sender(\"Sender\");\n//connections\n//model connect to port\nReceiveWACK->p_mq_BRESPin(p_mq_BRESPin);\n//model connect to port\nReceiverRData->p_mq_RDATAin(p_mq_RDATAin);\n//model connect to port\nSender->p_mq_ARADDRchn(p_mq_ARADDRchn);\nSender->p_mq_AWADDRchn(p_mq_AWADDRchn);\nSender->p_mq_WDATAchn(p_mq_WDATAchn);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_device::~cfm_device(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Device destructor' algorithm generated code\n\n//End of 'Device destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete ReceiveWACK;\ndelete ReceiverRData;\ndelete Sender;\n}\n\n\n//@{\nvoid cfm_device::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_device::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'WRDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn'}, {'name': 'BRESPin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WRDMUX\n#define COFS_MODEL_WRDMUX\n\n\n#include \"cfm_wrdmux_global.h\"\n#include \"cfm_wrdmux_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n\nclass cfm_wrdmux : public cf_core::cf_routingfunction {\npublic:\n\n\n/// constructor\ncfm_wrdmux(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_wrdmux(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'WRDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn'}, {'name': 'BRESPin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_wrdmux\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_wrdmux.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WRDmux definitions' algorithm generated code\n\n//End of 'WRDmux definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_wrdmux ::cfm_wrdmux() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_routingfunction(){\ncf_function_router::init();\n//connections\ncf_function_router::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_wrdmux::~cfm_wrdmux(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WRDmux destructor' algorithm generated code\n\n//End of 'WRDmux destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_wrdmux::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_wrdmux::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RDDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn'}, {'name': 'RDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RDDMUX\n#define COFS_MODEL_RDDMUX\n\n\n#include \"cfm_rddmux_global.h\"\n#include \"cfm_rddmux_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n\nclass cfm_rddmux : public cf_core::cf_routingfunction {\npublic:\n\n\n/// constructor\ncfm_rddmux(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rddmux(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RDDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn'}, {'name': 'RDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rddmux\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rddmux.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RDDmux definitions' algorithm generated code\n\n//End of 'RDDmux definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rddmux ::cfm_rddmux() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_routingfunction(){\ncf_function_router::init();\n//connections\ncf_function_router::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rddmux::~cfm_rddmux(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RDDmux destructor' algorithm generated code\n\n//End of 'RDDmux destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_rddmux::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rddmux::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MemoryController', 'type': 'cofluent:Function', 'models': [{'name': 'BackEnd', 'type': 'cofluent:Function'}, {'name': 'FrontEnd', 'type': 'cofluent:Function', 'vector': '0, P_Nbr'}, {'name': 'RAddrDmux', 'type': 'cofluent:RoutingFunction'}, {'name': 'WAddrDmux', 'type': 'cofluent:RoutingFunction'}, {'name': 'WdataDmux', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn', 'connectTo': ['RAddrDmux']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn', 'connectTo': ['WAddrDmux']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn', 'connectTo': ['FrontEnd']}, {'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand', 'connectTo': ['BackEnd']}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDQs', 'connectTo': ['BackEnd']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn', 'connectTo': ['FrontEnd']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn', 'connectTo': ['WdataDmux']}], 'relations': [{'name': 'ARADDRin', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefARADDRchn', 'connectTo': ['RAddrDmux', 'FrontEnd']}, {'name': 'AWADDRin', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefAWADDRchn', 'connectTo': ['WAddrDmux', 'FrontEnd']}, {'name': 'DataRead', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefDataRead', 'connectTo': ['FrontEnd', 'BackEnd']}, {'name': 'MemReadRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMemReadRequest', 'connectTo': ['FrontEnd', 'BackEnd']}, {'name': 'MemWriteRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMemWriteRequest', 'connectTo': ['FrontEnd', 'BackEnd']}, {'name': 'WDATAin', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefWDATAchn', 'connectTo': ['WdataDmux', 'FrontEnd']}, {'name': 'WriteAck', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefWriteAck', 'connectTo': ['FrontEnd', 'BackEnd']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MEMORYCONTROLLER\n#define COFS_MODEL_MEMORYCONTROLLER\n\n\n#include \"cfm_memorycontroller_global.h\"\n#include \"cfm_memorycontroller_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_backend.h\"\n#include \"cfm_frontend.h\"\n#include \"cfm_raddrdmux.h\"\n#include \"cfm_waddrdmux.h\"\n#include \"cfm_wdatadmux.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n#include \"dt/cft_defdqs_in.h\"\n#include \"dt/cft_defdataread_in.h\"\n#include \"dt/cft_defmemreadrequest_in.h\"\n#include \"dt/cft_defmemwriterequest_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n#include \"dt/cft_defwriteack_in.h\"\n\nclass cfm_memorycontroller : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefARADDRchn> mq_ARADDRin_t;\ntypedef cf_core::cf_message_queue<cft_DefAWADDRchn> mq_AWADDRin_t;\ntypedef cf_core::cf_message_queue<cft_DefDataRead> mq_DataRead_t;\ntypedef cf_core::cf_message_queue<cft_DefMemReadRequest> mq_MemReadRequest_t;\ntypedef cf_core::cf_message_queue<cft_DefMemWriteRequest> mq_MemWriteRequest_t;\ntypedef cf_core::cf_message_queue<cft_DefWDATAchn> mq_WDATAin_t;\ntypedef cf_core::cf_message_queue<cft_DefWriteAck> mq_WriteAck_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defaraddrchn> p_mq_ARADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defawaddrchn> p_mq_AWADDRchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defbrespchn> p_mq_BRESPchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defddrcommand> p_mq_DDRCommand_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defdqs> p_mq_DQs_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defrdatachn> p_mq_RDATAchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memorycontroller, cft_defwdatachn> p_mq_WDATAchn_t;\n\n/// constructor\ncfm_memorycontroller(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_memorycontroller(void);\n\np_mq_ARADDRchn_t p_mq_ARADDRchn;\np_mq_AWADDRchn_t p_mq_AWADDRchn;\np_mq_BRESPchn_t p_mq_BRESPchn;\np_mq_DDRCommand_t p_mq_DDRCommand;\np_mq_DQs_t p_mq_DQs;\np_mq_RDATAchn_t p_mq_RDATAchn;\np_mq_WDATAchn_t p_mq_WDATAchn;\n\ncfm_backend *BackEnd;\nstd::vector<cfm_frontend *> MemoryController_vec;\ncfm_raddrdmux *RAddrDmux;\ncfm_waddrdmux *WAddrDmux;\ncfm_wdatadmux *WdataDmux;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_ARADDRin_t *> mq_ARADDRin_vec;\nstd::vector<mq_AWADDRin_t *> mq_AWADDRin_vec;\nstd::vector<mq_DataRead_t *> mq_DataRead_vec;\nmq_MemReadRequest_t mq_MemReadRequest;\nmq_MemWriteRequest_t mq_MemWriteRequest;\nstd::vector<mq_WDATAin_t *> mq_WDATAin_vec;\nstd::vector<mq_WriteAck_t *> mq_WriteAck_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MemoryController', 'type': 'cofluent:Function', 'models': [{'name': 'BackEnd', 'type': 'cofluent:Function'}, {'name': 'FrontEnd', 'type': 'cofluent:Function', 'vector': '0, P_Nbr'}, {'name': 'RAddrDmux', 'type': 'cofluent:RoutingFunction'}, {'name': 'WAddrDmux', 'type': 'cofluent:RoutingFunction'}, {'name': 'WdataDmux', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn', 'connectTo': ['RAddrDmux']}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn', 'connectTo': ['WAddrDmux']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn', 'connectTo': ['FrontEnd']}, {'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand', 'connectTo': ['BackEnd']}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDQs', 'connectTo': ['BackEnd']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn', 'connectTo': ['FrontEnd']}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn', 'connectTo': ['WdataDmux']}], 'relations': [{'name': 'ARADDRin', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefARADDRchn', 'connectTo': ['RAddrDmux', 'FrontEnd']}, {'name': 'AWADDRin', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefAWADDRchn', 'connectTo': ['WAddrDmux', 'FrontEnd']}, {'name': 'DataRead', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefDataRead', 'connectTo': ['FrontEnd', 'BackEnd']}, {'name': 'MemReadRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMemReadRequest', 'connectTo': ['FrontEnd', 'BackEnd']}, {'name': 'MemWriteRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMemWriteRequest', 'connectTo': ['FrontEnd', 'BackEnd']}, {'name': 'WDATAin', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefWDATAchn', 'connectTo': ['WdataDmux', 'FrontEnd']}, {'name': 'WriteAck', 'type': 'cofluent:MessageQueue', 'vector': '0, P_Nbr', 'dataType': 'DefWriteAck', 'connectTo': ['FrontEnd', 'BackEnd']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_memorycontroller\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_memorycontroller.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MemoryController definitions' algorithm generated code\n\n//End of 'MemoryController definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_memorycontroller ::cfm_memorycontroller() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_ARADDRin(\"ARADDRin\"),mq_AWADDRin(\"AWADDRin\"),mq_DataRead(\"DataRead\"),mq_MemReadRequest(\"MemReadRequest\"),mq_MemWriteRequest(\"MemWriteRequest\"),mq_WDATAin(\"WDATAin\"),mq_WriteAck(\"WriteAck\"),p_mq_ARADDRchn(\"p_mq_ARADDRchn\"),p_mq_AWADDRchn(\"p_mq_AWADDRchn\"),p_mq_BRESPchn(\"p_mq_BRESPchn\"),p_mq_DDRCommand(\"p_mq_DDRCommand\"),p_mq_DQs(\"p_mq_DQs\"),p_mq_RDATAchn(\"p_mq_RDATAchn\"),p_mq_WDATAchn(\"p_mq_WDATAchn\"){\ncf_function_container::init();\n//instantiation of models\nBackEnd = new cfm_backend(\"BackEnd\");\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tcfm_frontend* module = new cfm_frontend(\n\t\t\t\tcf_string(\"FrontEnd[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tFrontEnd_vec.push_back(module);\n\t}\nRAddrDmux = new cfm_raddrdmux(\"RAddrDmux\");\nWAddrDmux = new cfm_waddrdmux(\"WAddrDmux\");\nWdataDmux = new cfm_wdatadmux(\"WdataDmux\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tmq_ARADDRin_t* module = new mq_ARADDRin_t(\n\t\t\t\tcf_string(\"ARADDRin[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_ARADDRin_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tmq_AWADDRin_t* module = new mq_AWADDRin_t(\n\t\t\t\tcf_string(\"AWADDRin[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_AWADDRin_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tmq_DataRead_t* module = new mq_DataRead_t(\n\t\t\t\tcf_string(\"DataRead[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_DataRead_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tmq_WDATAin_t* module = new mq_WDATAin_t(\n\t\t\t\tcf_string(\"WDATAin[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_WDATAin_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tmq_WriteAck_t* module = new mq_WriteAck_t(\n\t\t\t\tcf_string(\"WriteAck[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_WriteAck_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tBackEnd->p_mq_DataRead(mq_DataRead_vec[i]->p_target_socket);\n\t}\nBackEnd->p_mq_MemReadRequest(mq_MemReadRequest.p_target_socket);\nBackEnd->p_mq_MemWriteRequest(mq_MemWriteRequest.p_target_socket);\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tBackEnd->p_mq_WriteAck(mq_WriteAck_vec[i]->p_target_socket);\n\t}\n//model connect to port\nBackEnd->p_mq_DDRCommand(p_mq_DDRCommand);\nBackEnd->p_mq_DQs(p_mq_DQs);\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tcfm_frontend* module = FrontEnd_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_ARADDRin(mq_ARADDRin_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_AWADDRin(mq_AWADDRin_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_DataRead(mq_DataRead_vec[j]->p_target_socket);\n\t\t\t}\nmodule->p_mq_MemReadRequest(mq_MemReadRequest.p_target_socket);\nmodule->p_mq_MemWriteRequest(mq_MemReadRequest.p_target_socket);\nfor (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_WDATAin(mq_WDATAin_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( P_Nbr + 1); j++) {\n\t\t\t\tmodule->p_mq_WriteAck(mq_WriteAck_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_BRESPchn(p_mq_BRESPchn);\nmodule->p_mq_RDATAchn(p_mq_RDATAchn);\n}\n}\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tRAddrDmux->p_mq_ARADDRin(mq_ARADDRin_vec[i]->p_target_socket);\n\t}\n//model connect to port\nRAddrDmux->p_mq_ARADDRchn(p_mq_ARADDRchn);\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tWAddrDmux->p_mq_AWADDRin(mq_AWADDRin_vec[i]->p_target_socket);\n\t}\n//model connect to port\nWAddrDmux->p_mq_AWADDRchn(p_mq_AWADDRchn);\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( P_Nbr + 1); i++) {\n\t\tWdataDmux->p_mq_WDATAin(mq_WDATAin_vec[i]->p_target_socket);\n\t}\n//model connect to port\nWdataDmux->p_mq_WDATAchn(p_mq_WDATAchn);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_memorycontroller::~cfm_memorycontroller(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MemoryController destructor' algorithm generated code\n\n//End of 'MemoryController destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BackEnd;\nfor (vector<cfm_frontend*>::const_iterator vi = FrontEnd_vec.begin();\n\t\t\tvi != FrontEnd_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete RAddrDmux;\ndelete WAddrDmux;\ndelete WdataDmux;\n//deconstructor for vector relation\nfor (vector<mq_ARADDRin_t*>::const_iterator vi = mq_ARADDRin_vec.begin();\n\t\t\tvi != mq_ARADDRin_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_AWADDRin_t*>::const_iterator vi = mq_AWADDRin_vec.begin();\n\t\t\tvi != mq_AWADDRin_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_DataRead_t*>::const_iterator vi = mq_DataRead_vec.begin();\n\t\t\tvi != mq_DataRead_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_WDATAin_t*>::const_iterator vi = mq_WDATAin_vec.begin();\n\t\t\tvi != mq_WDATAin_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_WriteAck_t*>::const_iterator vi = mq_WriteAck_vec.begin();\n\t\t\tvi != mq_WriteAck_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_memorycontroller::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_memorycontroller::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Memory', 'type': 'cofluent:Function', 'models': [{'name': 'BankDmuxer', 'type': 'cofluent:Function'}, {'name': 'MemoryCommandExecution', 'type': 'cofluent:Function', 'vector': '0, NbBanksperMemory'}], 'ports': [{'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDDRCommand', 'connectTo': ['BankDmuxer']}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDQs', 'connectTo': ['MemoryCommandExecution']}], 'relations': [{'name': 'DDRAction', 'type': 'cofluent:MessageQueue', 'vector': '0, NbBanksperMemory', 'dataType': 'DefDDRCommand', 'connectTo': ['MemoryCommandExecution', 'BankDmuxer']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MEMORY\n#define COFS_MODEL_MEMORY\n\n\n#include \"cfm_memory_global.h\"\n#include \"cfm_memory_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_bankdmuxer.h\"\n#include \"cfm_memorycommandexecution.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n#include \"dt/cft_defdqs_in.h\"\n\nclass cfm_memory : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefDDRCommand> mq_DDRAction_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_memory, cft_defddrcommand> p_mq_DDRCommand_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_memory, cft_defdqs> p_mq_DQs_t;\n\n/// constructor\ncfm_memory(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_memory(void);\n\np_mq_DDRCommand_t p_mq_DDRCommand;\np_mq_DQs_t p_mq_DQs;\n\ncfm_bankdmuxer *BankDmuxer;\nstd::vector<cfm_memorycommandexecution *> Memory_vec;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_DDRAction_t *> mq_DDRAction_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Memory', 'type': 'cofluent:Function', 'models': [{'name': 'BankDmuxer', 'type': 'cofluent:Function'}, {'name': 'MemoryCommandExecution', 'type': 'cofluent:Function', 'vector': '0, NbBanksperMemory'}], 'ports': [{'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDDRCommand', 'connectTo': ['BankDmuxer']}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDQs', 'connectTo': ['MemoryCommandExecution']}], 'relations': [{'name': 'DDRAction', 'type': 'cofluent:MessageQueue', 'vector': '0, NbBanksperMemory', 'dataType': 'DefDDRCommand', 'connectTo': ['MemoryCommandExecution', 'BankDmuxer']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_memory\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_memory.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Memory definitions' algorithm generated code\n\n//End of 'Memory definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_memory ::cfm_memory() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_DDRAction(\"DDRAction\"),p_mq_DDRCommand(\"p_mq_DDRCommand\"),p_mq_DQs(\"p_mq_DQs\"){\ncf_function_container::init();\n//instantiation of models\nBankDmuxer = new cfm_bankdmuxer(\"BankDmuxer\");\nfor (cf_count i = 0; i < (cf_count)( NbBanksperMemory + 1); i++) {\n\t\tcfm_memorycommandexecution* module = new cfm_memorycommandexecution(\n\t\t\t\tcf_string(\"MemoryCommandExecution[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tMemoryCommandExecution_vec.push_back(module);\n\t}\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( NbBanksperMemory + 1); i++) {\n\t\tmq_DDRAction_t* module = new mq_DDRAction_t(\n\t\t\t\tcf_string(\"DDRAction[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_DDRAction_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( NbBanksperMemory + 1); i++) {\n\t\tBankDmuxer->p_mq_DDRAction(mq_DDRAction_vec[i]->p_target_socket);\n\t}\n//model connect to port\nBankDmuxer->p_mq_DDRCommand(p_mq_DDRCommand);\nfor (cf_count i = 0; i < (cf_count)( NbBanksperMemory + 1); i++) {\n\t\tcfm_memorycommandexecution* module = MemoryCommandExecution_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( NbBanksperMemory + 1); j++) {\n\t\t\t\tmodule->p_mq_DDRAction(mq_DDRAction_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_DQs(p_mq_DQs);\n}\n}\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_memory::~cfm_memory(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Memory destructor' algorithm generated code\n\n//End of 'Memory destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BankDmuxer;\nfor (vector<cfm_memorycommandexecution*>::const_iterator vi = MemoryCommandExecution_vec.begin();\n\t\t\tvi != MemoryCommandExecution_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n//deconstructor for vector relation\nfor (vector<mq_DDRAction_t*>::const_iterator vi = mq_DDRAction_vec.begin();\n\t\t\tvi != mq_DDRAction_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_memory::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_memory::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Sender', 'type': 'cofluent:Function', 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn'}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn'}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SENDER\n#define COFS_MODEL_SENDER\n\n\n#include \"cfm_sender_global.h\"\n#include \"cfm_sender_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_sender : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_sender(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_sender(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Sender', 'type': 'cofluent:Function', 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn'}, {'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn'}, {'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_sender\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_sender.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Sender definitions' algorithm generated code\n\n//End of 'Sender definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_sender ::cfm_sender() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_sender::~cfm_sender(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Sender destructor' algorithm generated code\n\n//End of 'Sender destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_sender::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_sender::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ReceiverRData', 'type': 'cofluent:Function', 'ports': [{'name': 'RDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RECEIVERRDATA\n#define COFS_MODEL_RECEIVERRDATA\n\n\n#include \"cfm_receiverrdata_global.h\"\n#include \"cfm_receiverrdata_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n\nclass cfm_receiverrdata : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_receiverrdata(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_receiverrdata(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ReceiverRData', 'type': 'cofluent:Function', 'ports': [{'name': 'RDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_receiverrdata\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_receiverrdata.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReceiverRData definitions' algorithm generated code\n\n//End of 'ReceiverRData definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_receiverrdata ::cfm_receiverrdata() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_receiverrdata::~cfm_receiverrdata(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReceiverRData destructor' algorithm generated code\n\n//End of 'ReceiverRData destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_receiverrdata::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_receiverrdata::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ReceiveWACK', 'type': 'cofluent:Function', 'ports': [{'name': 'BRESPin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RECEIVEWACK\n#define COFS_MODEL_RECEIVEWACK\n\n\n#include \"cfm_receivewack_global.h\"\n#include \"cfm_receivewack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n\nclass cfm_receivewack : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_receivewack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_receivewack(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ReceiveWACK', 'type': 'cofluent:Function', 'ports': [{'name': 'BRESPin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBRESPchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_receivewack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_receivewack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReceiveWACK definitions' algorithm generated code\n\n//End of 'ReceiveWACK definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_receivewack ::cfm_receivewack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_receivewack::~cfm_receivewack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReceiveWACK destructor' algorithm generated code\n\n//End of 'ReceiveWACK destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_receivewack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_receivewack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'WAddrDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn'}, {'name': 'AWADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WADDRDMUX\n#define COFS_MODEL_WADDRDMUX\n\n\n#include \"cfm_waddrdmux_global.h\"\n#include \"cfm_waddrdmux_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n\nclass cfm_waddrdmux : public cf_core::cf_routingfunction {\npublic:\n\n\n/// constructor\ncfm_waddrdmux(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_waddrdmux(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'WAddrDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'AWADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn'}, {'name': 'AWADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAWADDRchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_waddrdmux\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_waddrdmux.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WAddrDmux definitions' algorithm generated code\n\n//End of 'WAddrDmux definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_waddrdmux ::cfm_waddrdmux() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_routingfunction(){\ncf_function_router::init();\n//connections\ncf_function_router::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_waddrdmux::~cfm_waddrdmux(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WAddrDmux destructor' algorithm generated code\n\n//End of 'WAddrDmux destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_waddrdmux::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_waddrdmux::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'WdataDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn'}, {'name': 'WDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WDATADMUX\n#define COFS_MODEL_WDATADMUX\n\n\n#include \"cfm_wdatadmux_global.h\"\n#include \"cfm_wdatadmux_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_wdatadmux : public cf_core::cf_routingfunction {\npublic:\n\n\n/// constructor\ncfm_wdatadmux(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_wdatadmux(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'WdataDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'WDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn'}, {'name': 'WDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_wdatadmux\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_wdatadmux.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WdataDmux definitions' algorithm generated code\n\n//End of 'WdataDmux definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_wdatadmux ::cfm_wdatadmux() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_routingfunction(){\ncf_function_router::init();\n//connections\ncf_function_router::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_wdatadmux::~cfm_wdatadmux(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WdataDmux destructor' algorithm generated code\n\n//End of 'WdataDmux destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_wdatadmux::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_wdatadmux::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RAddrDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn'}, {'name': 'ARADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RADDRDMUX\n#define COFS_MODEL_RADDRDMUX\n\n\n#include \"cfm_raddrdmux_global.h\"\n#include \"cfm_raddrdmux_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n\nclass cfm_raddrdmux : public cf_core::cf_routingfunction {\npublic:\n\n\n/// constructor\ncfm_raddrdmux(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_raddrdmux(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RAddrDmux', 'type': 'cofluent:RoutingFunction', 'ports': [{'name': 'ARADDRchn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn'}, {'name': 'ARADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefARADDRchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_raddrdmux\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_raddrdmux.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RAddrDmux definitions' algorithm generated code\n\n//End of 'RAddrDmux definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_raddrdmux ::cfm_raddrdmux() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_routingfunction(){\ncf_function_router::init();\n//connections\ncf_function_router::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_raddrdmux::~cfm_raddrdmux(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RAddrDmux destructor' algorithm generated code\n\n//End of 'RAddrDmux destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_raddrdmux::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_raddrdmux::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'FrontEnd', 'type': 'cofluent:Function', 'models': [{'name': 'ReadDataDriver', 'type': 'cofluent:Function'}, {'name': 'ReadDriver', 'type': 'cofluent:Function'}, {'name': 'SendWAckDriver', 'type': 'cofluent:Function'}, {'name': 'WriteDriver', 'type': 'cofluent:Function'}], 'ports': [{'name': 'ARADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn', 'connectTo': ['ReadDriver']}, {'name': 'AWADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn', 'connectTo': ['WriteDriver']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn', 'connectTo': ['SendWAckDriver']}, {'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataRead', 'connectTo': ['ReadDataDriver']}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemReadRequest', 'connectTo': ['ReadDriver']}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemWriteRequest', 'connectTo': ['WriteDriver']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn', 'connectTo': ['ReadDataDriver']}, {'name': 'WDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn', 'connectTo': ['WriteDriver']}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWriteAck', 'connectTo': ['SendWAckDriver']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_FRONTEND\n#define COFS_MODEL_FRONTEND\n\n\n#include \"cfm_frontend_global.h\"\n#include \"cfm_frontend_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_readdatadriver.h\"\n#include \"cfm_readdriver.h\"\n#include \"cfm_sendwackdriver.h\"\n#include \"cfm_writedriver.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defdataread_in.h\"\n#include \"dt/cft_defmemreadrequest_in.h\"\n#include \"dt/cft_defmemwriterequest_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n#include \"dt/cft_defwriteack_in.h\"\n\nclass cfm_frontend : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defaraddrchn> p_mq_ARADDRin_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defawaddrchn> p_mq_AWADDRin_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defbrespchn> p_mq_BRESPchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defdataread> p_mq_DataRead_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defmemreadrequest> p_mq_MemReadRequest_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defmemwriterequest> p_mq_MemWriteRequest_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defrdatachn> p_mq_RDATAchn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defwdatachn> p_mq_WDATAin_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_frontend, cft_defwriteack> p_mq_WriteAck_t;\n\n/// constructor\ncfm_frontend(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_frontend(void);\n\np_mq_ARADDRin_t p_mq_ARADDRin;\np_mq_AWADDRin_t p_mq_AWADDRin;\np_mq_BRESPchn_t p_mq_BRESPchn;\np_mq_DataRead_t p_mq_DataRead;\np_mq_MemReadRequest_t p_mq_MemReadRequest;\np_mq_MemWriteRequest_t p_mq_MemWriteRequest;\np_mq_RDATAchn_t p_mq_RDATAchn;\np_mq_WDATAin_t p_mq_WDATAin;\np_mq_WriteAck_t p_mq_WriteAck;\n\ncfm_readdatadriver *ReadDataDriver;\ncfm_readdriver *ReadDriver;\ncfm_sendwackdriver *SendWAckDriver;\ncfm_writedriver *WriteDriver;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'FrontEnd', 'type': 'cofluent:Function', 'models': [{'name': 'ReadDataDriver', 'type': 'cofluent:Function'}, {'name': 'ReadDriver', 'type': 'cofluent:Function'}, {'name': 'SendWAckDriver', 'type': 'cofluent:Function'}, {'name': 'WriteDriver', 'type': 'cofluent:Function'}], 'ports': [{'name': 'ARADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn', 'connectTo': ['ReadDriver']}, {'name': 'AWADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn', 'connectTo': ['WriteDriver']}, {'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn', 'connectTo': ['SendWAckDriver']}, {'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataRead', 'connectTo': ['ReadDataDriver']}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemReadRequest', 'connectTo': ['ReadDriver']}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemWriteRequest', 'connectTo': ['WriteDriver']}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn', 'connectTo': ['ReadDataDriver']}, {'name': 'WDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn', 'connectTo': ['WriteDriver']}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWriteAck', 'connectTo': ['SendWAckDriver']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_frontend\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_frontend.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'FrontEnd definitions' algorithm generated code\n\n//End of 'FrontEnd definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_frontend ::cfm_frontend() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_ARADDRin(\"p_mq_ARADDRin\"),p_mq_AWADDRin(\"p_mq_AWADDRin\"),p_mq_BRESPchn(\"p_mq_BRESPchn\"),p_mq_DataRead(\"p_mq_DataRead\"),p_mq_MemReadRequest(\"p_mq_MemReadRequest\"),p_mq_MemWriteRequest(\"p_mq_MemWriteRequest\"),p_mq_RDATAchn(\"p_mq_RDATAchn\"),p_mq_WDATAin(\"p_mq_WDATAin\"),p_mq_WriteAck(\"p_mq_WriteAck\"){\ncf_function_container::init();\n//instantiation of models\nReadDataDriver = new cfm_readdatadriver(\"ReadDataDriver\");\nReadDriver = new cfm_readdriver(\"ReadDriver\");\nSendWAckDriver = new cfm_sendwackdriver(\"SendWAckDriver\");\nWriteDriver = new cfm_writedriver(\"WriteDriver\");\n//connections\n//model connect to port\nReadDataDriver->p_mq_DataRead(p_mq_DataRead);\nReadDataDriver->p_mq_RDATAchn(p_mq_RDATAchn);\n//model connect to port\nReadDriver->p_mq_ARADDRin(p_mq_ARADDRin);\nReadDriver->p_mq_MemReadRequest(p_mq_MemReadRequest);\n//model connect to port\nSendWAckDriver->p_mq_BRESPchn(p_mq_BRESPchn);\nSendWAckDriver->p_mq_WriteAck(p_mq_WriteAck);\n//model connect to port\nWriteDriver->p_mq_AWADDRin(p_mq_AWADDRin);\nWriteDriver->p_mq_MemWriteRequest(p_mq_MemWriteRequest);\nWriteDriver->p_mq_WDATAin(p_mq_WDATAin);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_frontend::~cfm_frontend(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'FrontEnd destructor' algorithm generated code\n\n//End of 'FrontEnd destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete ReadDataDriver;\ndelete ReadDriver;\ndelete SendWAckDriver;\ndelete WriteDriver;\n}\n\n\n//@{\nvoid cfm_frontend::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_frontend::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BackEnd', 'type': 'cofluent:Function', 'models': [{'name': 'Arbitration', 'type': 'cofluent:Function'}, {'name': 'CollectRequests', 'type': 'cofluent:Function'}, {'name': 'DDRCommandGeneration', 'type': 'cofluent:Function'}, {'name': 'ResponseForward', 'type': 'cofluent:Function'}], 'ports': [{'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand', 'connectTo': ['DDRCommandGeneration']}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDQs', 'connectTo': ['ResponseForward']}, {'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataRead', 'connectTo': ['ResponseForward']}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemReadRequest', 'connectTo': ['CollectRequests']}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemWriteRequest', 'connectTo': ['CollectRequests']}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWriteAck', 'connectTo': ['ResponseForward', 'Arbitration']}], 'relations': [{'name': 'ListRequestsPtr', 'type': 'cofluent:SharedVariable', 'dataType': 'DefListRequestsPtr', 'connectTo': ['CollectRequests', 'Arbitration']}, {'name': 'MemoryStatus', 'type': 'cofluent:SharedVariable', 'vector': '0, M_Nbr', 'dataType': 'DefMemoryStatus', 'connectTo': ['DDRCommandGeneration']}, {'name': 'RequestCounter', 'type': 'cofluent:Event', 'connectTo': ['CollectRequests', 'Arbitration']}, {'name': 'RequestInformation', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRequestInformation', 'connectTo': ['ResponseForward', 'Arbitration']}, {'name': 'Requests2Memory', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRequests2Memory', 'connectTo': ['Arbitration', 'DDRCommandGeneration']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BACKEND\n#define COFS_MODEL_BACKEND\n\n\n#include \"cfm_backend_global.h\"\n#include \"cfm_backend_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_arbitration.h\"\n#include \"cfm_collectrequests.h\"\n#include \"cfm_ddrcommandgeneration.h\"\n#include \"cfm_responseforward.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n#include \"dt/cft_defdqs_in.h\"\n#include \"dt/cft_defdataread_in.h\"\n#include \"dt/cft_deflistrequestsptr_in.h\"\n#include \"dt/cft_defmemreadrequest_in.h\"\n#include \"dt/cft_defmemwriterequest_in.h\"\n#include \"dt/cft_defmemorystatus_in.h\"\n#include \"dt/cft_defrequestinformation_in.h\"\n#include \"dt/cft_defrequests2memory_in.h\"\n#include \"dt/cft_defwriteack_in.h\"\n\nclass cfm_backend : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_shared_variable<cft_DefListRequestsPtr> sv_ListRequestsPtr_t;\ntypedef cf_core::cf_shared_variable<cft_DefMemoryStatus> sv_MemoryStatus_t;\ntypedef cf_core::cf_event ev_RequestCounter_t;\ntypedef cf_core::cf_message_queue<cft_DefRequestInformation> mq_RequestInformation_t;\ntypedef cf_core::cf_message_queue<cft_DefRequests2Memory> mq_Requests2Memory_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defddrcommand> p_mq_DDRCommand_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defdqs> p_mq_DQs_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defdataread> p_mq_DataRead_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defmemreadrequest> p_mq_MemReadRequest_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defmemwriterequest> p_mq_MemWriteRequest_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_backend, cft_defwriteack> p_mq_WriteAck_t;\n\n/// constructor\ncfm_backend(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_backend(void);\n\np_mq_DDRCommand_t p_mq_DDRCommand;\np_mq_DQs_t p_mq_DQs;\np_mq_DataRead_t p_mq_DataRead;\np_mq_MemReadRequest_t p_mq_MemReadRequest;\np_mq_MemWriteRequest_t p_mq_MemWriteRequest;\np_mq_WriteAck_t p_mq_WriteAck;\n\ncfm_arbitration *Arbitration;\ncfm_collectrequests *CollectRequests;\ncfm_ddrcommandgeneration *DDRCommandGeneration;\ncfm_responseforward *ResponseForward;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nsv_ListRequestsPtr_t sv_ListRequestsPtr;\nstd::vector<sv_MemoryStatus_t *> sv_MemoryStatus_vec;\nev_RequestCounter_t ev_RequestCounter;\nmq_RequestInformation_t mq_RequestInformation;\nmq_Requests2Memory_t mq_Requests2Memory;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BackEnd', 'type': 'cofluent:Function', 'models': [{'name': 'Arbitration', 'type': 'cofluent:Function'}, {'name': 'CollectRequests', 'type': 'cofluent:Function'}, {'name': 'DDRCommandGeneration', 'type': 'cofluent:Function'}, {'name': 'ResponseForward', 'type': 'cofluent:Function'}], 'ports': [{'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand', 'connectTo': ['DDRCommandGeneration']}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDQs', 'connectTo': ['ResponseForward']}, {'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataRead', 'connectTo': ['ResponseForward']}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemReadRequest', 'connectTo': ['CollectRequests']}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemWriteRequest', 'connectTo': ['CollectRequests']}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWriteAck', 'connectTo': ['ResponseForward', 'Arbitration']}], 'relations': [{'name': 'ListRequestsPtr', 'type': 'cofluent:SharedVariable', 'dataType': 'DefListRequestsPtr', 'connectTo': ['CollectRequests', 'Arbitration']}, {'name': 'MemoryStatus', 'type': 'cofluent:SharedVariable', 'vector': '0, M_Nbr', 'dataType': 'DefMemoryStatus', 'connectTo': ['DDRCommandGeneration']}, {'name': 'RequestCounter', 'type': 'cofluent:Event', 'connectTo': ['CollectRequests', 'Arbitration']}, {'name': 'RequestInformation', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRequestInformation', 'connectTo': ['ResponseForward', 'Arbitration']}, {'name': 'Requests2Memory', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRequests2Memory', 'connectTo': ['Arbitration', 'DDRCommandGeneration']}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_backend\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_backend.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BackEnd definitions' algorithm generated code\n\n//End of 'BackEnd definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_backend ::cfm_backend() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_RequestCounter(\"RequestCounter\"),mq_RequestInformation(\"RequestInformation\"),mq_Requests2Memory(\"Requests2Memory\"),p_mq_DDRCommand(\"p_mq_DDRCommand\"),p_mq_DQs(\"p_mq_DQs\"),p_mq_DataRead(\"p_mq_DataRead\"),p_mq_MemReadRequest(\"p_mq_MemReadRequest\"),p_mq_MemWriteRequest(\"p_mq_MemWriteRequest\"),p_mq_WriteAck(\"p_mq_WriteAck\"),sv_ListRequestsPtr(\"ListRequestsPtr\"),sv_MemoryStatus(\"MemoryStatus\"){\ncf_function_container::init();\n//instantiation of models\nArbitration = new cfm_arbitration(\"Arbitration\");\nCollectRequests = new cfm_collectrequests(\"CollectRequests\");\nDDRCommandGeneration = new cfm_ddrcommandgeneration(\"DDRCommandGeneration\");\nResponseForward = new cfm_responseforward(\"ResponseForward\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tsv_MemoryStatus_t* module = new sv_MemoryStatus_t(\n\t\t\t\tcf_string(\"MemoryStatus[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tsv_MemoryStatus_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nArbitration->p_sv_ListRequestsPtr(sv_ListRequestsPtr.p_target_socket);\nArbitration->p_ev_RequestCounter(ev_RequestCounter.p_target_socket);\nArbitration->p_mq_RequestInformation(mq_RequestInformation.p_target_socket);\nArbitration->p_mq_Requests2Memory(mq_Requests2Memory.p_target_socket);\n//model connect to port\nArbitration->p_mq_WriteAck(p_mq_WriteAck);\n//model connect to relation\nCollectRequests->p_sv_ListRequestsPtr(sv_ListRequestsPtr.p_target_socket);\nCollectRequests->p_ev_RequestCounter(ev_RequestCounter.p_target_socket);\n//model connect to port\nCollectRequests->p_mq_MemReadRequest(p_mq_MemReadRequest);\nCollectRequests->p_mq_MemWriteRequest(p_mq_MemWriteRequest);\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( M_Nbr + 1); i++) {\n\t\tDDRCommandGeneration->p_sv_MemoryStatus(sv_MemoryStatus_vec[i]->p_target_socket);\n\t}\nDDRCommandGeneration->p_mq_Requests2Memory(mq_Requests2Memory.p_target_socket);\n//model connect to port\nDDRCommandGeneration->p_mq_DDRCommand(p_mq_DDRCommand);\n//model connect to relation\nResponseForward->p_mq_RequestInformation(mq_RequestInformation.p_target_socket);\n//model connect to port\nResponseForward->p_mq_DQs(p_mq_DQs);\nResponseForward->p_mq_DataRead(p_mq_DataRead);\nResponseForward->p_mq_WriteAck(p_mq_WriteAck);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_backend::~cfm_backend(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BackEnd destructor' algorithm generated code\n\n//End of 'BackEnd destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Arbitration;\ndelete CollectRequests;\ndelete DDRCommandGeneration;\ndelete ResponseForward;\n//deconstructor for vector relation\nfor (vector<sv_MemoryStatus_t*>::const_iterator vi = sv_MemoryStatus_vec.begin();\n\t\t\tvi != sv_MemoryStatus_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_backend::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_backend::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MemoryCommandExecution', 'type': 'cofluent:Function', 'ports': [{'name': 'DDRAction', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDDRCommand'}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDQs'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MEMORYCOMMANDEXECUTION\n#define COFS_MODEL_MEMORYCOMMANDEXECUTION\n\n\n#include \"cfm_memorycommandexecution_global.h\"\n#include \"cfm_memorycommandexecution_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n#include \"dt/cft_defdqs_in.h\"\n\nclass cfm_memorycommandexecution : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_memorycommandexecution(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_memorycommandexecution(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MemoryCommandExecution', 'type': 'cofluent:Function', 'ports': [{'name': 'DDRAction', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDDRCommand'}, {'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDQs'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_memorycommandexecution\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_memorycommandexecution.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MemoryCommandExecution definitions' algorithm generated code\n\n//End of 'MemoryCommandExecution definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_memorycommandexecution ::cfm_memorycommandexecution() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_memorycommandexecution::~cfm_memorycommandexecution(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MemoryCommandExecution destructor' algorithm generated code\n\n//End of 'MemoryCommandExecution destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_memorycommandexecution::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_memorycommandexecution::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BankDmuxer', 'type': 'cofluent:Function', 'ports': [{'name': 'DDRAction', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand'}, {'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDDRCommand'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BANKDMUXER\n#define COFS_MODEL_BANKDMUXER\n\n\n#include \"cfm_bankdmuxer_global.h\"\n#include \"cfm_bankdmuxer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n\nclass cfm_bankdmuxer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_bankdmuxer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_bankdmuxer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BankDmuxer', 'type': 'cofluent:Function', 'ports': [{'name': 'DDRAction', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand'}, {'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDDRCommand'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_bankdmuxer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_bankdmuxer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BankDmuxer definitions' algorithm generated code\n\n//End of 'BankDmuxer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_bankdmuxer ::cfm_bankdmuxer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_bankdmuxer::~cfm_bankdmuxer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BankDmuxer destructor' algorithm generated code\n\n//End of 'BankDmuxer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_bankdmuxer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_bankdmuxer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'WriteDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'AWADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn'}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemWriteRequest'}, {'name': 'WDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WRITEDRIVER\n#define COFS_MODEL_WRITEDRIVER\n\n\n#include \"cfm_writedriver_global.h\"\n#include \"cfm_writedriver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defawaddrchn_in.h\"\n#include \"dt/cft_defmemwriterequest_in.h\"\n#include \"dt/cft_defwdatachn_in.h\"\n\nclass cfm_writedriver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_writedriver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_writedriver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'WriteDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'AWADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAWADDRchn'}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemWriteRequest'}, {'name': 'WDATAin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_writedriver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_writedriver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WriteDriver definitions' algorithm generated code\n\n//End of 'WriteDriver definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_writedriver ::cfm_writedriver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_writedriver::~cfm_writedriver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'WriteDriver destructor' algorithm generated code\n\n//End of 'WriteDriver destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_writedriver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_writedriver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ReadDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'ARADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn'}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemReadRequest'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_READDRIVER\n#define COFS_MODEL_READDRIVER\n\n\n#include \"cfm_readdriver_global.h\"\n#include \"cfm_readdriver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defaraddrchn_in.h\"\n#include \"dt/cft_defmemreadrequest_in.h\"\n\nclass cfm_readdriver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_readdriver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_readdriver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ReadDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'ARADDRin', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefARADDRchn'}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMemReadRequest'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_readdriver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_readdriver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReadDriver definitions' algorithm generated code\n\n//End of 'ReadDriver definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_readdriver ::cfm_readdriver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_readdriver::~cfm_readdriver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReadDriver destructor' algorithm generated code\n\n//End of 'ReadDriver destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_readdriver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_readdriver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'SendWAckDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn'}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWriteAck'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SENDWACKDRIVER\n#define COFS_MODEL_SENDWACKDRIVER\n\n\n#include \"cfm_sendwackdriver_global.h\"\n#include \"cfm_sendwackdriver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbrespchn_in.h\"\n#include \"dt/cft_defwriteack_in.h\"\n\nclass cfm_sendwackdriver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_sendwackdriver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_sendwackdriver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'SendWAckDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'BRESPchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBRESPchn'}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefWriteAck'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_sendwackdriver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_sendwackdriver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'SendWAckDriver definitions' algorithm generated code\n\n//End of 'SendWAckDriver definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_sendwackdriver ::cfm_sendwackdriver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_sendwackdriver::~cfm_sendwackdriver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'SendWAckDriver destructor' algorithm generated code\n\n//End of 'SendWAckDriver destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_sendwackdriver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_sendwackdriver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ReadDataDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataRead'}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_READDATADRIVER\n#define COFS_MODEL_READDATADRIVER\n\n\n#include \"cfm_readdatadriver_global.h\"\n#include \"cfm_readdatadriver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdataread_in.h\"\n#include \"dt/cft_defrdatachn_in.h\"\n\nclass cfm_readdatadriver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_readdatadriver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_readdatadriver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ReadDataDriver', 'type': 'cofluent:Function', 'ports': [{'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataRead'}, {'name': 'RDATAchn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRDATAchn'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_readdatadriver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_readdatadriver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReadDataDriver definitions' algorithm generated code\n\n//End of 'ReadDataDriver definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_readdatadriver ::cfm_readdatadriver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_readdatadriver::~cfm_readdatadriver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ReadDataDriver destructor' algorithm generated code\n\n//End of 'ReadDataDriver destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_readdatadriver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_readdatadriver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CollectRequests', 'type': 'cofluent:Function', 'ports': [{'name': 'ListRequestsPtr', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefListRequestsPtr'}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemReadRequest'}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemWriteRequest'}, {'name': 'RequestCounter', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_COLLECTREQUESTS\n#define COFS_MODEL_COLLECTREQUESTS\n\n\n#include \"cfm_collectrequests_global.h\"\n#include \"cfm_collectrequests_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_deflistrequestsptr_in.h\"\n#include \"dt/cft_defmemreadrequest_in.h\"\n#include \"dt/cft_defmemwriterequest_in.h\"\n\nclass cfm_collectrequests : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_collectrequests(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_collectrequests(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CollectRequests', 'type': 'cofluent:Function', 'ports': [{'name': 'ListRequestsPtr', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefListRequestsPtr'}, {'name': 'MemReadRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemReadRequest'}, {'name': 'MemWriteRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMemWriteRequest'}, {'name': 'RequestCounter', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_collectrequests\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_collectrequests.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CollectRequests definitions' algorithm generated code\n\n//End of 'CollectRequests definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_collectrequests ::cfm_collectrequests() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_collectrequests::~cfm_collectrequests(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CollectRequests destructor' algorithm generated code\n\n//End of 'CollectRequests destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_collectrequests::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_collectrequests::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ResponseForward', 'type': 'cofluent:Function', 'ports': [{'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDQs'}, {'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataRead'}, {'name': 'RequestInformation', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRequestInformation'}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWriteAck'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RESPONSEFORWARD\n#define COFS_MODEL_RESPONSEFORWARD\n\n\n#include \"cfm_responseforward_global.h\"\n#include \"cfm_responseforward_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdqs_in.h\"\n#include \"dt/cft_defdataread_in.h\"\n#include \"dt/cft_defrequestinformation_in.h\"\n#include \"dt/cft_defwriteack_in.h\"\n\nclass cfm_responseforward : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_responseforward(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_responseforward(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ResponseForward', 'type': 'cofluent:Function', 'ports': [{'name': 'DQs', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDQs'}, {'name': 'DataRead', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataRead'}, {'name': 'RequestInformation', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRequestInformation'}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWriteAck'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_responseforward\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_responseforward.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ResponseForward definitions' algorithm generated code\n\n//End of 'ResponseForward definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_responseforward ::cfm_responseforward() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_responseforward::~cfm_responseforward(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ResponseForward destructor' algorithm generated code\n\n//End of 'ResponseForward destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_responseforward::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_responseforward::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Arbitration', 'type': 'cofluent:Function', 'ports': [{'name': 'ListRequestsPtr', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefListRequestsPtr'}, {'name': 'RequestCounter', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'RequestInformation', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRequestInformation'}, {'name': 'Requests2Memory', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRequests2Memory'}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWriteAck'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_ARBITRATION\n#define COFS_MODEL_ARBITRATION\n\n\n#include \"cfm_arbitration_global.h\"\n#include \"cfm_arbitration_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_deflistrequestsptr_in.h\"\n#include \"dt/cft_defrequestinformation_in.h\"\n#include \"dt/cft_defrequests2memory_in.h\"\n#include \"dt/cft_defwriteack_in.h\"\n\nclass cfm_arbitration : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_arbitration(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_arbitration(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Arbitration', 'type': 'cofluent:Function', 'ports': [{'name': 'ListRequestsPtr', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefListRequestsPtr'}, {'name': 'RequestCounter', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'RequestInformation', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRequestInformation'}, {'name': 'Requests2Memory', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRequests2Memory'}, {'name': 'WriteAck', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefWriteAck'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_arbitration\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_arbitration.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Arbitration definitions' algorithm generated code\n\n//End of 'Arbitration definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_arbitration ::cfm_arbitration() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_arbitration::~cfm_arbitration(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Arbitration destructor' algorithm generated code\n\n//End of 'Arbitration destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_arbitration::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_arbitration::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'DDRCommandGeneration', 'type': 'cofluent:Function', 'ports': [{'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand'}, {'name': 'MemoryStatus', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefMemoryStatus'}, {'name': 'Requests2Memory', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRequests2Memory'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_DDRCOMMANDGENERATION\n#define COFS_MODEL_DDRCOMMANDGENERATION\n\n\n#include \"cfm_ddrcommandgeneration_global.h\"\n#include \"cfm_ddrcommandgeneration_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defddrcommand_in.h\"\n#include \"dt/cft_defmemorystatus_in.h\"\n#include \"dt/cft_defrequests2memory_in.h\"\n\nclass cfm_ddrcommandgeneration : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_ddrcommandgeneration(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ddrcommandgeneration(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'DDRCommandGeneration', 'type': 'cofluent:Function', 'ports': [{'name': 'DDRCommand', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDDRCommand'}, {'name': 'MemoryStatus', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefMemoryStatus'}, {'name': 'Requests2Memory', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRequests2Memory'}], 'globalName': 'DDRMemory'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ddrcommandgeneration\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of DDRMemory generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ddrcommandgeneration.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'DDRCommandGeneration definitions' algorithm generated code\n\n//End of 'DDRCommandGeneration definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ddrcommandgeneration ::cfm_ddrcommandgeneration() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ddrcommandgeneration::~cfm_ddrcommandgeneration(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'DDRCommandGeneration destructor' algorithm generated code\n\n//End of 'DDRCommandGeneration destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_ddrcommandgeneration::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ddrcommandgeneration::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Inheritance_example3App', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function', 'vector': '0, 1'}, {'name': 'OS', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function', 'vector': '0, 1'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'vector': '0, 1', 'dataType': 'default', 'connectTo': ['Consumer', 'Producer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INHERITANCE_EXAMPLE3APP\n#define COFS_MODEL_INHERITANCE_EXAMPLE3APP\n\n\n#include \"cfm_inheritance_example3app_global.h\"\n#include \"cfm_inheritance_example3app_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_os.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_inheritance_example3app : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQ_t;\n\n/// constructor\ncfm_inheritance_example3app(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inheritance_example3app(void);\n\nstd::vector<cfm_consumer *> Inheritance_example3App_vec;\ncfm_os *OS;\nstd::vector<cfm_producer *> Inheritance_example3App_vec;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_MsgQ_t *> mq_MsgQ_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Inheritance_example3App', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function', 'vector': '0, 1'}, {'name': 'OS', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function', 'vector': '0, 1'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'vector': '0, 1', 'dataType': 'default', 'connectTo': ['Consumer', 'Producer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inheritance_example3app\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example3App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inheritance_example3app.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inheritance_example3App definitions' algorithm generated code\n\n//End of 'Inheritance_example3App definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inheritance_example3app ::cfm_inheritance_example3app() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQ(\"MsgQ\"){\ncf_application::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_consumer* module = new cfm_consumer(\n\t\t\t\tcf_string(\"Consumer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tConsumer_vec.push_back(module);\n\t}\nOS = new cfm_os(\"OS\");\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_producer* module = new cfm_producer(\n\t\t\t\tcf_string(\"Producer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tProducer_vec.push_back(module);\n\t}\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tmq_MsgQ_t* module = new mq_MsgQ_t(\n\t\t\t\tcf_string(\"MsgQ[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQ_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_consumer* module = Consumer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( 1 + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_producer* module = Producer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( 1 + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inheritance_example3app::~cfm_inheritance_example3app(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inheritance_example3App destructor' algorithm generated code\n\n//End of 'Inheritance_example3App destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_consumer*>::const_iterator vi = Consumer_vec.begin();\n\t\t\tvi != Consumer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete OS;\nfor (vector<cfm_producer*>::const_iterator vi = Producer_vec.begin();\n\t\t\tvi != Producer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n//deconstructor for vector relation\nfor (vector<mq_MsgQ_t*>::const_iterator vi = mq_MsgQ_vec.begin();\n\t\t\tvi != mq_MsgQ_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_inheritance_example3app::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inheritance_example3app::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'Inheritance_example3App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'Inheritance_example3App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example3App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OS', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example3App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OS\n#define COFS_MODEL_OS\n\n\n#include \"cfm_os_global.h\"\n#include \"cfm_os_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_os : public cf_core::cf_function {\npublic:\n\n/// constructor\ncfm_os(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_os(void);\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OS', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example3App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_os\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example3App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_os.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OS definitions' algorithm generated code\n\n//End of 'OS definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_os ::cfm_os() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_os::~cfm_os(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OS destructor' algorithm generated code\ndelete sel_processor;\n//End of 'OS destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_os::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_os::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'Inheritance_example3App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'Inheritance_example3App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example3App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'datacenter', 'models': [{'name': 'DataCenterSwitch', 'type': 'cofluent:Function'}, {'name': 'ServerRoom', 'type': 'cofluent:Function', 'vector': '0, dpServerRoomNb'}], 'relations': [{'name': 'MsgQToDataCenterSwitch', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['ServerRoom', 'DataCenterSwitch']}, {'name': 'MsgQToServerRoom', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['ServerRoom', 'DataCenterSwitch']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_DATACENTER\n#define COFS_MODEL_DATACENTER\n\n\n#include \"cfm_datacenter_global.h\"\n#include \"cfm_datacenter_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_datacenterswitch.h\"\n#include \"cfm_serverroom.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_datacenter : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQToDataCenterSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQToServerRoom_t;\n\n/// constructor\ncfm_datacenter(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_datacenter(void);\n\ncfm_datacenterswitch *DataCenterSwitch;\nstd::vector<cfm_serverroom *> datacenter_vec;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_MsgQToDataCenterSwitch_t *> mq_MsgQToDataCenterSwitch_vec;\nstd::vector<mq_MsgQToServerRoom_t *> mq_MsgQToServerRoom_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'datacenter', 'models': [{'name': 'DataCenterSwitch', 'type': 'cofluent:Function'}, {'name': 'ServerRoom', 'type': 'cofluent:Function', 'vector': '0, dpServerRoomNb'}], 'relations': [{'name': 'MsgQToDataCenterSwitch', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['ServerRoom', 'DataCenterSwitch']}, {'name': 'MsgQToServerRoom', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['ServerRoom', 'DataCenterSwitch']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_datacenter\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_datacenter.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'datacenter definitions' algorithm generated code\nvoid merge_and_sort_vector(std::vector<cf_dt::cf_time>& vect1,\nstd::vector<cf_dt::cf_time>& vect2) {\nvect1.insert(vect1.begin(), vect2.begin(), vect2.end());\n}\n//End of 'datacenter definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_datacenter ::cfm_datacenter() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQToDataCenterSwitch(\"MsgQToDataCenterSwitch\"),mq_MsgQToServerRoom(\"MsgQToServerRoom\"){\ncf_application::init();\n//instantiation of models\nDataCenterSwitch = new cfm_datacenterswitch(\"DataCenterSwitch\");\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tcfm_serverroom* module = new cfm_serverroom(\n\t\t\t\tcf_string(\"ServerRoom[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tServerRoom_vec.push_back(module);\n\t}\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tmq_MsgQToDataCenterSwitch_t* module = new mq_MsgQToDataCenterSwitch_t(\n\t\t\t\tcf_string(\"MsgQToDataCenterSwitch[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQToDataCenterSwitch_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tmq_MsgQToServerRoom_t* module = new mq_MsgQToServerRoom_t(\n\t\t\t\tcf_string(\"MsgQToServerRoom[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQToServerRoom_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tDataCenterSwitch->p_mq_MsgQToDataCenterSwitch(mq_MsgQToDataCenterSwitch_vec[i]->p_target_socket);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tDataCenterSwitch->p_mq_MsgQToServerRoom(mq_MsgQToServerRoom_vec[i]->p_target_socket);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tcfm_serverroom* module = ServerRoom_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQToDataCenterSwitch(mq_MsgQToDataCenterSwitch_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQToServerRoom(mq_MsgQToServerRoom_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_datacenter::~cfm_datacenter(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'datacenter destructor' algorithm generated code\n\n//End of 'datacenter destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete DataCenterSwitch;\nfor (vector<cfm_serverroom*>::const_iterator vi = ServerRoom_vec.begin();\n\t\t\tvi != ServerRoom_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n//deconstructor for vector relation\nfor (vector<mq_MsgQToDataCenterSwitch_t*>::const_iterator vi = mq_MsgQToDataCenterSwitch_vec.begin();\n\t\t\tvi != mq_MsgQToDataCenterSwitch_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_MsgQToServerRoom_t*>::const_iterator vi = mq_MsgQToServerRoom_vec.begin();\n\t\t\tvi != mq_MsgQToServerRoom_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_datacenter::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_datacenter::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ServerRoom', 'type': 'cofluent:Function', 'models': [{'name': 'AGGSwitch', 'type': 'cofluent:Function'}, {'name': 'Rack', 'type': 'cofluent:Function', 'vector': '0, dpRackNb'}], 'ports': [{'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch']}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch']}], 'relations': [{'name': 'MsgQToAggSwitch', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch', 'Rack']}, {'name': 'MsgQToRack', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch', 'Rack']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SERVERROOM\n#define COFS_MODEL_SERVERROOM\n\n\n#include \"cfm_serverroom_global.h\"\n#include \"cfm_serverroom_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_aggswitch.h\"\n#include \"cfm_rack.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_serverroom : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQToAggSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQToRack_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_serverroom, cft_defpacket> p_mq_MsgQToDataCenterSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_serverroom, cft_defpacket> p_mq_MsgQToServerRoom_t;\n\n/// constructor\ncfm_serverroom(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_serverroom(void);\n\np_mq_MsgQToDataCenterSwitch_t p_mq_MsgQToDataCenterSwitch;\np_mq_MsgQToServerRoom_t p_mq_MsgQToServerRoom;\n\ncfm_aggswitch *AGGSwitch;\nstd::vector<cfm_rack *> ServerRoom_vec;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_MsgQToAggSwitch_t *> mq_MsgQToAggSwitch_vec;\nstd::vector<mq_MsgQToRack_t *> mq_MsgQToRack_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ServerRoom', 'type': 'cofluent:Function', 'models': [{'name': 'AGGSwitch', 'type': 'cofluent:Function'}, {'name': 'Rack', 'type': 'cofluent:Function', 'vector': '0, dpRackNb'}], 'ports': [{'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch']}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch']}], 'relations': [{'name': 'MsgQToAggSwitch', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch', 'Rack']}, {'name': 'MsgQToRack', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['AGGSwitch', 'Rack']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_serverroom\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_serverroom.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ServerRoom definitions' algorithm generated code\n\n//End of 'ServerRoom definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_serverroom ::cfm_serverroom() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_MsgQToAggSwitch(\"MsgQToAggSwitch\"),mq_MsgQToRack(\"MsgQToRack\"),p_mq_MsgQToDataCenterSwitch(\"p_mq_MsgQToDataCenterSwitch\"),p_mq_MsgQToServerRoom(\"p_mq_MsgQToServerRoom\"){\ncf_function_container::init();\n//instantiation of models\nAGGSwitch = new cfm_aggswitch(\"AGGSwitch\");\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tcfm_rack* module = new cfm_rack(\n\t\t\t\tcf_string(\"Rack[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tRack_vec.push_back(module);\n\t}\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tmq_MsgQToAggSwitch_t* module = new mq_MsgQToAggSwitch_t(\n\t\t\t\tcf_string(\"MsgQToAggSwitch[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQToAggSwitch_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tmq_MsgQToRack_t* module = new mq_MsgQToRack_t(\n\t\t\t\tcf_string(\"MsgQToRack[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQToRack_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tAGGSwitch->p_mq_MsgQToAggSwitch(mq_MsgQToAggSwitch_vec[i]->p_target_socket);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tAGGSwitch->p_mq_MsgQToRack(mq_MsgQToRack_vec[i]->p_target_socket);\n\t}\n//model connect to port\nAGGSwitch->p_mq_MsgQToDataCenterSwitch(p_mq_MsgQToDataCenterSwitch);\nAGGSwitch->p_mq_MsgQToServerRoom(p_mq_MsgQToServerRoom);\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tcfm_rack* module = Rack_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQToAggSwitch(mq_MsgQToAggSwitch_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQToRack(mq_MsgQToRack_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_serverroom::~cfm_serverroom(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ServerRoom destructor' algorithm generated code\n\n//End of 'ServerRoom destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete AGGSwitch;\nfor (vector<cfm_rack*>::const_iterator vi = Rack_vec.begin();\n\t\t\tvi != Rack_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n//deconstructor for vector relation\nfor (vector<mq_MsgQToAggSwitch_t*>::const_iterator vi = mq_MsgQToAggSwitch_vec.begin();\n\t\t\tvi != mq_MsgQToAggSwitch_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_MsgQToRack_t*>::const_iterator vi = mq_MsgQToRack_vec.begin();\n\t\t\tvi != mq_MsgQToRack_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_serverroom::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_serverroom::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'DataCenterSwitch', 'type': 'cofluent:Function', 'models': [{'name': 'Inbound', 'type': 'cofluent:Function', 'vector': '0, dpServerRoomNb'}, {'name': 'Outbound', 'type': 'cofluent:Function', 'vector': '0, dpServerRoomNb'}, {'name': 'RoutingFunction', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['Inbound']}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['Outbound']}], 'relations': [{'name': 'MsgQRouting_in', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['Inbound', 'RoutingFunction']}, {'name': 'MsgQRouting_out', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['Outbound', 'RoutingFunction']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_DATACENTERSWITCH\n#define COFS_MODEL_DATACENTERSWITCH\n\n\n#include \"cfm_datacenterswitch_global.h\"\n#include \"cfm_datacenterswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_inbound.h\"\n#include \"cfm_outbound.h\"\n#include \"cfm_routingfunction.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_datacenterswitch : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQRouting_in_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQRouting_out_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_datacenterswitch, cft_defpacket> p_mq_MsgQToDataCenterSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_datacenterswitch, cft_defpacket> p_mq_MsgQToServerRoom_t;\n\n/// constructor\ncfm_datacenterswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_datacenterswitch(void);\n\np_mq_MsgQToDataCenterSwitch_t p_mq_MsgQToDataCenterSwitch;\np_mq_MsgQToServerRoom_t p_mq_MsgQToServerRoom;\n\nstd::vector<cfm_inbound *> DataCenterSwitch_vec;\nstd::vector<cfm_outbound *> DataCenterSwitch_vec;\ncfm_routingfunction *RoutingFunction;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_MsgQRouting_in_t *> mq_MsgQRouting_in_vec;\nstd::vector<mq_MsgQRouting_out_t *> mq_MsgQRouting_out_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'DataCenterSwitch', 'type': 'cofluent:Function', 'models': [{'name': 'Inbound', 'type': 'cofluent:Function', 'vector': '0, dpServerRoomNb'}, {'name': 'Outbound', 'type': 'cofluent:Function', 'vector': '0, dpServerRoomNb'}, {'name': 'RoutingFunction', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['Inbound']}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['Outbound']}], 'relations': [{'name': 'MsgQRouting_in', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['Inbound', 'RoutingFunction']}, {'name': 'MsgQRouting_out', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerRoomNb', 'dataType': 'DefPacket', 'connectTo': ['Outbound', 'RoutingFunction']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_datacenterswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_datacenterswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'DataCenterSwitch definitions' algorithm generated code\n\n//End of 'DataCenterSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_datacenterswitch ::cfm_datacenterswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_MsgQRouting_in(\"MsgQRouting_in\"),mq_MsgQRouting_out(\"MsgQRouting_out\"),p_mq_MsgQToDataCenterSwitch(\"p_mq_MsgQToDataCenterSwitch\"),p_mq_MsgQToServerRoom(\"p_mq_MsgQToServerRoom\"){\ncf_function_container::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tcfm_inbound* module = new cfm_inbound(\n\t\t\t\tcf_string(\"Inbound[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tInbound_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tcfm_outbound* module = new cfm_outbound(\n\t\t\t\tcf_string(\"Outbound[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tOutbound_vec.push_back(module);\n\t}\nRoutingFunction = new cfm_routingfunction(\"RoutingFunction\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tmq_MsgQRouting_in_t* module = new mq_MsgQRouting_in_t(\n\t\t\t\tcf_string(\"MsgQRouting_in[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQRouting_in_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tmq_MsgQRouting_out_t* module = new mq_MsgQRouting_out_t(\n\t\t\t\tcf_string(\"MsgQRouting_out[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQRouting_out_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tcfm_inbound* module = Inbound_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQRouting_in(mq_MsgQRouting_in_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_MsgQToDataCenterSwitch(p_mq_MsgQToDataCenterSwitch);\n}\n}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tcfm_outbound* module = Outbound_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpServerRoomNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQRouting_out(mq_MsgQRouting_out_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_MsgQToServerRoom(p_mq_MsgQToServerRoom);\n}\n}\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tRoutingFunction->p_mq_MsgQRouting_in(mq_MsgQRouting_in_vec[i]->p_target_socket);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerRoomNb + 1); i++) {\n\t\tRoutingFunction->p_mq_MsgQRouting_out(mq_MsgQRouting_out_vec[i]->p_target_socket);\n\t}\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_datacenterswitch::~cfm_datacenterswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'DataCenterSwitch destructor' algorithm generated code\n\n//End of 'DataCenterSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_inbound*>::const_iterator vi = Inbound_vec.begin();\n\t\t\tvi != Inbound_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<cfm_outbound*>::const_iterator vi = Outbound_vec.begin();\n\t\t\tvi != Outbound_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete RoutingFunction;\n//deconstructor for vector relation\nfor (vector<mq_MsgQRouting_in_t*>::const_iterator vi = mq_MsgQRouting_in_vec.begin();\n\t\t\tvi != mq_MsgQRouting_in_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_MsgQRouting_out_t*>::const_iterator vi = mq_MsgQRouting_out_vec.begin();\n\t\t\tvi != mq_MsgQRouting_out_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_datacenterswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_datacenterswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'AGGSwitch', 'type': 'cofluent:Function', 'models': [{'name': 'InboundDataCenterSwitch', 'type': 'cofluent:Function'}, {'name': 'InboundRack', 'type': 'cofluent:Function', 'vector': '0, dpRackNb'}, {'name': 'OutboundDataCenterSwitch', 'type': 'cofluent:Function'}, {'name': 'OutboundRack', 'type': 'cofluent:Function', 'vector': '0, dpRackNb'}, {'name': 'RoutingFunction', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundRack']}, {'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundDataCenterSwitch']}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundRack']}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundDataCenterSwitch']}], 'relations': [{'name': 'MsgQInboundDataCenterSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'InboundDataCenterSwitch']}, {'name': 'MsgQInboundRack', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'InboundRack']}, {'name': 'MsgQOutboundDataCenterSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundDataCenterSwitch']}, {'name': 'MsgQOutboundRack', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundRack']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_AGGSWITCH\n#define COFS_MODEL_AGGSWITCH\n\n\n#include \"cfm_aggswitch_global.h\"\n#include \"cfm_aggswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_inbounddatacenterswitch.h\"\n#include \"cfm_inboundrack.h\"\n#include \"cfm_outbounddatacenterswitch.h\"\n#include \"cfm_outboundrack.h\"\n#include \"cfm_routingfunction.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_aggswitch : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQInboundDataCenterSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQInboundRack_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQOutboundDataCenterSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQOutboundRack_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_aggswitch, cft_defpacket> p_mq_MsgQToAggSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_aggswitch, cft_defpacket> p_mq_MsgQToDataCenterSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_aggswitch, cft_defpacket> p_mq_MsgQToRack_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_aggswitch, cft_defpacket> p_mq_MsgQToServerRoom_t;\n\n/// constructor\ncfm_aggswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_aggswitch(void);\n\np_mq_MsgQToAggSwitch_t p_mq_MsgQToAggSwitch;\np_mq_MsgQToDataCenterSwitch_t p_mq_MsgQToDataCenterSwitch;\np_mq_MsgQToRack_t p_mq_MsgQToRack;\np_mq_MsgQToServerRoom_t p_mq_MsgQToServerRoom;\n\ncfm_inbounddatacenterswitch *InboundDataCenterSwitch;\nstd::vector<cfm_inboundrack *> AGGSwitch_vec;\ncfm_outbounddatacenterswitch *OutboundDataCenterSwitch;\nstd::vector<cfm_outboundrack *> AGGSwitch_vec;\ncfm_routingfunction *RoutingFunction;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQInboundDataCenterSwitch_t mq_MsgQInboundDataCenterSwitch;\nstd::vector<mq_MsgQInboundRack_t *> mq_MsgQInboundRack_vec;\nmq_MsgQOutboundDataCenterSwitch_t mq_MsgQOutboundDataCenterSwitch;\nstd::vector<mq_MsgQOutboundRack_t *> mq_MsgQOutboundRack_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'AGGSwitch', 'type': 'cofluent:Function', 'models': [{'name': 'InboundDataCenterSwitch', 'type': 'cofluent:Function'}, {'name': 'InboundRack', 'type': 'cofluent:Function', 'vector': '0, dpRackNb'}, {'name': 'OutboundDataCenterSwitch', 'type': 'cofluent:Function'}, {'name': 'OutboundRack', 'type': 'cofluent:Function', 'vector': '0, dpRackNb'}, {'name': 'RoutingFunction', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundRack']}, {'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundDataCenterSwitch']}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundRack']}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundDataCenterSwitch']}], 'relations': [{'name': 'MsgQInboundDataCenterSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'InboundDataCenterSwitch']}, {'name': 'MsgQInboundRack', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'InboundRack']}, {'name': 'MsgQOutboundDataCenterSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundDataCenterSwitch']}, {'name': 'MsgQOutboundRack', 'type': 'cofluent:MessageQueue', 'vector': '0, dpRackNb', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundRack']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_aggswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_aggswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'AGGSwitch definitions' algorithm generated code\n\n//End of 'AGGSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_aggswitch ::cfm_aggswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_MsgQInboundDataCenterSwitch(\"MsgQInboundDataCenterSwitch\"),mq_MsgQInboundRack(\"MsgQInboundRack\"),mq_MsgQOutboundDataCenterSwitch(\"MsgQOutboundDataCenterSwitch\"),mq_MsgQOutboundRack(\"MsgQOutboundRack\"),p_mq_MsgQToAggSwitch(\"p_mq_MsgQToAggSwitch\"),p_mq_MsgQToDataCenterSwitch(\"p_mq_MsgQToDataCenterSwitch\"),p_mq_MsgQToRack(\"p_mq_MsgQToRack\"),p_mq_MsgQToServerRoom(\"p_mq_MsgQToServerRoom\"){\ncf_function_container::init();\n//instantiation of models\nInboundDataCenterSwitch = new cfm_inbounddatacenterswitch(\"InboundDataCenterSwitch\");\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tcfm_inboundrack* module = new cfm_inboundrack(\n\t\t\t\tcf_string(\"InboundRack[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tInboundRack_vec.push_back(module);\n\t}\nOutboundDataCenterSwitch = new cfm_outbounddatacenterswitch(\"OutboundDataCenterSwitch\");\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tcfm_outboundrack* module = new cfm_outboundrack(\n\t\t\t\tcf_string(\"OutboundRack[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tOutboundRack_vec.push_back(module);\n\t}\nRoutingFunction = new cfm_routingfunction(\"RoutingFunction\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tmq_MsgQInboundRack_t* module = new mq_MsgQInboundRack_t(\n\t\t\t\tcf_string(\"MsgQInboundRack[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQInboundRack_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tmq_MsgQOutboundRack_t* module = new mq_MsgQOutboundRack_t(\n\t\t\t\tcf_string(\"MsgQOutboundRack[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQOutboundRack_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nInboundDataCenterSwitch->p_mq_MsgQInboundDataCenterSwitch(mq_MsgQInboundDataCenterSwitch.p_target_socket);\n//model connect to port\nInboundDataCenterSwitch->p_mq_MsgQToServerRoom(p_mq_MsgQToServerRoom);\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tcfm_inboundrack* module = InboundRack_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQInboundRack(mq_MsgQInboundRack_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);\n}\n}\n//model connect to relation\nOutboundDataCenterSwitch->p_mq_MsgQOutboundDataCenterSwitch(mq_MsgQOutboundDataCenterSwitch.p_target_socket);\n//model connect to port\nOutboundDataCenterSwitch->p_mq_MsgQToDataCenterSwitch(p_mq_MsgQToDataCenterSwitch);\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tcfm_outboundrack* module = OutboundRack_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQOutboundRack(mq_MsgQOutboundRack_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_MsgQToRack(p_mq_MsgQToRack);\n}\n}\n//model connect to relation\nRoutingFunction->p_mq_MsgQInboundDataCenterSwitch(mq_MsgQInboundDataCenterSwitch.p_target_socket);\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tRoutingFunction->p_mq_MsgQInboundRack(mq_MsgQInboundRack_vec[i]->p_target_socket);\n\t}\nRoutingFunction->p_mq_MsgQOutboundDataCenterSwitch(mq_MsgQOutboundDataCenterSwitch.p_target_socket);\nfor (cf_count i = 0; i < (cf_count)( dpRackNb + 1); i++) {\n\t\tRoutingFunction->p_mq_MsgQOutboundRack(mq_MsgQOutboundRack_vec[i]->p_target_socket);\n\t}\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_aggswitch::~cfm_aggswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'AGGSwitch destructor' algorithm generated code\n\n//End of 'AGGSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete InboundDataCenterSwitch;\nfor (vector<cfm_inboundrack*>::const_iterator vi = InboundRack_vec.begin();\n\t\t\tvi != InboundRack_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete OutboundDataCenterSwitch;\nfor (vector<cfm_outboundrack*>::const_iterator vi = OutboundRack_vec.begin();\n\t\t\tvi != OutboundRack_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete RoutingFunction;\n//deconstructor for vector relation\nfor (vector<mq_MsgQInboundRack_t*>::const_iterator vi = mq_MsgQInboundRack_vec.begin();\n\t\t\tvi != mq_MsgQInboundRack_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_MsgQOutboundRack_t*>::const_iterator vi = mq_MsgQOutboundRack_vec.begin();\n\t\t\tvi != mq_MsgQOutboundRack_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_aggswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_aggswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Rack', 'type': 'cofluent:Function', 'models': [{'name': 'Server', 'type': 'cofluent:Function', 'vector': '0, dpServerPerRackNb'}, {'name': 'ToRSwitch', 'type': 'cofluent:Function'}], 'ports': [{'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['ToRSwitch']}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['ToRSwitch']}], 'relations': [{'name': 'MsgQServerToToRSwitch', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['Server', 'ToRSwitch']}, {'name': 'MsgQToServer', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['Server', 'ToRSwitch']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RACK\n#define COFS_MODEL_RACK\n\n\n#include \"cfm_rack_global.h\"\n#include \"cfm_rack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_server.h\"\n#include \"cfm_torswitch.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_rack : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQServerToToRSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQToServer_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_rack, cft_defpacket> p_mq_MsgQToAggSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_rack, cft_defpacket> p_mq_MsgQToRack_t;\n\n/// constructor\ncfm_rack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rack(void);\n\np_mq_MsgQToAggSwitch_t p_mq_MsgQToAggSwitch;\np_mq_MsgQToRack_t p_mq_MsgQToRack;\n\nstd::vector<cfm_server *> Rack_vec;\ncfm_torswitch *ToRSwitch;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_MsgQServerToToRSwitch_t *> mq_MsgQServerToToRSwitch_vec;\nstd::vector<mq_MsgQToServer_t *> mq_MsgQToServer_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Rack', 'type': 'cofluent:Function', 'models': [{'name': 'Server', 'type': 'cofluent:Function', 'vector': '0, dpServerPerRackNb'}, {'name': 'ToRSwitch', 'type': 'cofluent:Function'}], 'ports': [{'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['ToRSwitch']}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['ToRSwitch']}], 'relations': [{'name': 'MsgQServerToToRSwitch', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['Server', 'ToRSwitch']}, {'name': 'MsgQToServer', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['Server', 'ToRSwitch']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Rack definitions' algorithm generated code\n\n//End of 'Rack definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rack ::cfm_rack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_MsgQServerToToRSwitch(\"MsgQServerToToRSwitch\"),mq_MsgQToServer(\"MsgQToServer\"),p_mq_MsgQToAggSwitch(\"p_mq_MsgQToAggSwitch\"),p_mq_MsgQToRack(\"p_mq_MsgQToRack\"){\ncf_function_container::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tcfm_server* module = new cfm_server(\n\t\t\t\tcf_string(\"Server[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tServer_vec.push_back(module);\n\t}\nToRSwitch = new cfm_torswitch(\"ToRSwitch\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tmq_MsgQServerToToRSwitch_t* module = new mq_MsgQServerToToRSwitch_t(\n\t\t\t\tcf_string(\"MsgQServerToToRSwitch[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQServerToToRSwitch_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tmq_MsgQToServer_t* module = new mq_MsgQToServer_t(\n\t\t\t\tcf_string(\"MsgQToServer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQToServer_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tcfm_server* module = Server_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpServerPerRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQServerToToRSwitch(mq_MsgQServerToToRSwitch_vec[j]->p_target_socket);\n\t\t\t}\nfor (cf_count j = 0; j < (cf_count)( dpServerPerRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQToServer(mq_MsgQToServer_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\n//model connect to relation\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tToRSwitch->p_mq_MsgQServerToToRSwitch(mq_MsgQServerToToRSwitch_vec[i]->p_target_socket);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tToRSwitch->p_mq_MsgQToServer(mq_MsgQToServer_vec[i]->p_target_socket);\n\t}\n//model connect to port\nToRSwitch->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);\nToRSwitch->p_mq_MsgQToRack(p_mq_MsgQToRack);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rack::~cfm_rack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Rack destructor' algorithm generated code\n\n//End of 'Rack destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_server*>::const_iterator vi = Server_vec.begin();\n\t\t\tvi != Server_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete ToRSwitch;\n//deconstructor for vector relation\nfor (vector<mq_MsgQServerToToRSwitch_t*>::const_iterator vi = mq_MsgQServerToToRSwitch_vec.begin();\n\t\t\tvi != mq_MsgQServerToToRSwitch_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_MsgQToServer_t*>::const_iterator vi = mq_MsgQToServer_vec.begin();\n\t\t\tvi != mq_MsgQToServer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_rack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Inbound', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQRouting_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INBOUND\n#define COFS_MODEL_INBOUND\n\n\n#include \"cfm_inbound_global.h\"\n#include \"cfm_inbound_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_inbound : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_inbound(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inbound(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Inbound', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQRouting_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inbound\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inbound.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inbound definitions' algorithm generated code\n\n//End of 'Inbound definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inbound ::cfm_inbound() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inbound::~cfm_inbound(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inbound destructor' algorithm generated code\n\n//End of 'Inbound destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_inbound::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inbound::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Outbound', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQRouting_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OUTBOUND\n#define COFS_MODEL_OUTBOUND\n\n\n#include \"cfm_outbound_global.h\"\n#include \"cfm_outbound_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_outbound : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_outbound(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_outbound(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Outbound', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQRouting_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_outbound\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_outbound.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Outbound definitions' algorithm generated code\n\n//End of 'Outbound definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_outbound ::cfm_outbound() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_outbound::~cfm_outbound(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Outbound destructor' algorithm generated code\n\n//End of 'Outbound destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_outbound::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_outbound::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OutboundDataCenterSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OUTBOUNDDATACENTERSWITCH\n#define COFS_MODEL_OUTBOUNDDATACENTERSWITCH\n\n\n#include \"cfm_outbounddatacenterswitch_global.h\"\n#include \"cfm_outbounddatacenterswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_outbounddatacenterswitch : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_outbounddatacenterswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_outbounddatacenterswitch(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OutboundDataCenterSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_outbounddatacenterswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_outbounddatacenterswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundDataCenterSwitch definitions' algorithm generated code\n\n//End of 'OutboundDataCenterSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_outbounddatacenterswitch ::cfm_outbounddatacenterswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_outbounddatacenterswitch::~cfm_outbounddatacenterswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundDataCenterSwitch destructor' algorithm generated code\n\n//End of 'OutboundDataCenterSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_outbounddatacenterswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_outbounddatacenterswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'InboundDataCenterSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INBOUNDDATACENTERSWITCH\n#define COFS_MODEL_INBOUNDDATACENTERSWITCH\n\n\n#include \"cfm_inbounddatacenterswitch_global.h\"\n#include \"cfm_inbounddatacenterswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_inbounddatacenterswitch : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_inbounddatacenterswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inbounddatacenterswitch(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'InboundDataCenterSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundDataCenterSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToServerRoom', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inbounddatacenterswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inbounddatacenterswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundDataCenterSwitch definitions' algorithm generated code\n\n//End of 'InboundDataCenterSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inbounddatacenterswitch ::cfm_inbounddatacenterswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inbounddatacenterswitch::~cfm_inbounddatacenterswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundDataCenterSwitch destructor' algorithm generated code\n\n//End of 'InboundDataCenterSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_inbounddatacenterswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inbounddatacenterswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'InboundRack', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundRack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INBOUNDRACK\n#define COFS_MODEL_INBOUNDRACK\n\n\n#include \"cfm_inboundrack_global.h\"\n#include \"cfm_inboundrack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_inboundrack : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_inboundrack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inboundrack(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'InboundRack', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundRack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inboundrack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inboundrack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundRack definitions' algorithm generated code\n\n//End of 'InboundRack definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inboundrack ::cfm_inboundrack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inboundrack::~cfm_inboundrack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundRack destructor' algorithm generated code\n\n//End of 'InboundRack destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_inboundrack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inboundrack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OutboundRack', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OUTBOUNDRACK\n#define COFS_MODEL_OUTBOUNDRACK\n\n\n#include \"cfm_outboundrack_global.h\"\n#include \"cfm_outboundrack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_outboundrack : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_outboundrack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_outboundrack(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OutboundRack', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_outboundrack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_outboundrack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundRack definitions' algorithm generated code\n\n//End of 'OutboundRack definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_outboundrack ::cfm_outboundrack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_outboundrack::~cfm_outboundrack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundRack destructor' algorithm generated code\n\n//End of 'OutboundRack destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_outboundrack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_outboundrack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Server', 'type': 'cofluent:Function', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'ports': [{'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['Producer']}, {'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['Consumer']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SERVER\n#define COFS_MODEL_SERVER\n\n\n#include \"cfm_server_global.h\"\n#include \"cfm_server_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_server : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_server, cft_defpacket> p_mq_MsgQServerToToRSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_server, cft_defpacket> p_mq_MsgQToServer_t;\n\n/// constructor\ncfm_server(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_server(void);\n\np_mq_MsgQServerToToRSwitch_t p_mq_MsgQServerToToRSwitch;\np_mq_MsgQToServer_t p_mq_MsgQToServer;\n\ncfm_consumer *Consumer;\ncfm_producer *Producer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Server', 'type': 'cofluent:Function', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'ports': [{'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['Producer']}, {'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['Consumer']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_server\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_server.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Server definitions' algorithm generated code\n\n//End of 'Server definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_server ::cfm_server() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_MsgQServerToToRSwitch(\"p_mq_MsgQServerToToRSwitch\"),p_mq_MsgQToServer(\"p_mq_MsgQToServer\"){\ncf_function_container::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nProducer = new cfm_producer(\"Producer\");\n//connections\n//model connect to port\nConsumer->p_mq_MsgQToServer(p_mq_MsgQToServer);\n//model connect to port\nProducer->p_mq_MsgQServerToToRSwitch(p_mq_MsgQServerToToRSwitch);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_server::~cfm_server(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Server destructor' algorithm generated code\n\n//End of 'Server destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete Producer;\n}\n\n\n//@{\nvoid cfm_server::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_server::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ToRSwitch', 'type': 'cofluent:Function', 'models': [{'name': 'InboundAGGSwitch', 'type': 'cofluent:Function'}, {'name': 'InboundServer', 'type': 'cofluent:Function', 'vector': '0, dpServerPerRackNb'}, {'name': 'OutboundAGGSwitch', 'type': 'cofluent:Function'}, {'name': 'OutboundServer', 'type': 'cofluent:Function', 'vector': '0, dpServerPerRackNb'}, {'name': 'RoutingFunction', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundServer']}, {'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundAGGSwitch']}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundAGGSwitch']}, {'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundServer']}], 'relations': [{'name': 'MsgQInboundAGGSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'InboundAGGSwitch']}, {'name': 'MsgQInboundServer', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['InboundServer', 'RoutingFunction']}, {'name': 'MsgQOutboundAGGSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundAGGSwitch']}, {'name': 'MsgQOutboundServer', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundServer']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TORSWITCH\n#define COFS_MODEL_TORSWITCH\n\n\n#include \"cfm_torswitch_global.h\"\n#include \"cfm_torswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_inboundaggswitch.h\"\n#include \"cfm_inboundserver.h\"\n#include \"cfm_outboundaggswitch.h\"\n#include \"cfm_outboundserver.h\"\n#include \"cfm_routingfunction.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_torswitch : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQInboundAGGSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQInboundServer_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQOutboundAGGSwitch_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_MsgQOutboundServer_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_torswitch, cft_defpacket> p_mq_MsgQServerToToRSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_torswitch, cft_defpacket> p_mq_MsgQToAggSwitch_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_torswitch, cft_defpacket> p_mq_MsgQToRack_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_torswitch, cft_defpacket> p_mq_MsgQToServer_t;\n\n/// constructor\ncfm_torswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_torswitch(void);\n\np_mq_MsgQServerToToRSwitch_t p_mq_MsgQServerToToRSwitch;\np_mq_MsgQToAggSwitch_t p_mq_MsgQToAggSwitch;\np_mq_MsgQToRack_t p_mq_MsgQToRack;\np_mq_MsgQToServer_t p_mq_MsgQToServer;\n\ncfm_inboundaggswitch *InboundAGGSwitch;\nstd::vector<cfm_inboundserver *> ToRSwitch_vec;\ncfm_outboundaggswitch *OutboundAGGSwitch;\nstd::vector<cfm_outboundserver *> ToRSwitch_vec;\ncfm_routingfunction *RoutingFunction;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQInboundAGGSwitch_t mq_MsgQInboundAGGSwitch;\nstd::vector<mq_MsgQInboundServer_t *> mq_MsgQInboundServer_vec;\nmq_MsgQOutboundAGGSwitch_t mq_MsgQOutboundAGGSwitch;\nstd::vector<mq_MsgQOutboundServer_t *> mq_MsgQOutboundServer_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ToRSwitch', 'type': 'cofluent:Function', 'models': [{'name': 'InboundAGGSwitch', 'type': 'cofluent:Function'}, {'name': 'InboundServer', 'type': 'cofluent:Function', 'vector': '0, dpServerPerRackNb'}, {'name': 'OutboundAGGSwitch', 'type': 'cofluent:Function'}, {'name': 'OutboundServer', 'type': 'cofluent:Function', 'vector': '0, dpServerPerRackNb'}, {'name': 'RoutingFunction', 'type': 'cofluent:RoutingFunction'}], 'ports': [{'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundServer']}, {'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundAGGSwitch']}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket', 'connectTo': ['InboundAGGSwitch']}, {'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket', 'connectTo': ['OutboundServer']}], 'relations': [{'name': 'MsgQInboundAGGSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'InboundAGGSwitch']}, {'name': 'MsgQInboundServer', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['InboundServer', 'RoutingFunction']}, {'name': 'MsgQOutboundAGGSwitch', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundAGGSwitch']}, {'name': 'MsgQOutboundServer', 'type': 'cofluent:MessageQueue', 'vector': '0, dpServerPerRackNb', 'dataType': 'DefPacket', 'connectTo': ['RoutingFunction', 'OutboundServer']}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_torswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_torswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ToRSwitch definitions' algorithm generated code\n\n//End of 'ToRSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_torswitch ::cfm_torswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_MsgQInboundAGGSwitch(\"MsgQInboundAGGSwitch\"),mq_MsgQInboundServer(\"MsgQInboundServer\"),mq_MsgQOutboundAGGSwitch(\"MsgQOutboundAGGSwitch\"),mq_MsgQOutboundServer(\"MsgQOutboundServer\"),p_mq_MsgQServerToToRSwitch(\"p_mq_MsgQServerToToRSwitch\"),p_mq_MsgQToAggSwitch(\"p_mq_MsgQToAggSwitch\"),p_mq_MsgQToRack(\"p_mq_MsgQToRack\"),p_mq_MsgQToServer(\"p_mq_MsgQToServer\"){\ncf_function_container::init();\n//instantiation of models\nInboundAGGSwitch = new cfm_inboundaggswitch(\"InboundAGGSwitch\");\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tcfm_inboundserver* module = new cfm_inboundserver(\n\t\t\t\tcf_string(\"InboundServer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tInboundServer_vec.push_back(module);\n\t}\nOutboundAGGSwitch = new cfm_outboundaggswitch(\"OutboundAGGSwitch\");\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tcfm_outboundserver* module = new cfm_outboundserver(\n\t\t\t\tcf_string(\"OutboundServer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tOutboundServer_vec.push_back(module);\n\t}\nRoutingFunction = new cfm_routingfunction(\"RoutingFunction\");\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tmq_MsgQInboundServer_t* module = new mq_MsgQInboundServer_t(\n\t\t\t\tcf_string(\"MsgQInboundServer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQInboundServer_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tmq_MsgQOutboundServer_t* module = new mq_MsgQOutboundServer_t(\n\t\t\t\tcf_string(\"MsgQOutboundServer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQOutboundServer_vec.push_back(module);\n\t}\n//connections\n//model connect to relation\nInboundAGGSwitch->p_mq_MsgQInboundAGGSwitch(mq_MsgQInboundAGGSwitch.p_target_socket);\n//model connect to port\nInboundAGGSwitch->p_mq_MsgQToRack(p_mq_MsgQToRack);\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tcfm_inboundserver* module = InboundServer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpServerPerRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQInboundServer(mq_MsgQInboundServer_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_MsgQServerToToRSwitch(p_mq_MsgQServerToToRSwitch);\n}\n}\n//model connect to relation\nOutboundAGGSwitch->p_mq_MsgQOutboundAGGSwitch(mq_MsgQOutboundAGGSwitch.p_target_socket);\n//model connect to port\nOutboundAGGSwitch->p_mq_MsgQToAggSwitch(p_mq_MsgQToAggSwitch);\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tcfm_outboundserver* module = OutboundServer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( dpServerPerRackNb + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQOutboundServer(mq_MsgQOutboundServer_vec[j]->p_target_socket);\n\t\t\t}\n//model connect to port\nmodule->p_mq_MsgQToServer(p_mq_MsgQToServer);\n}\n}\n//model connect to relation\nRoutingFunction->p_mq_MsgQInboundAGGSwitch(mq_MsgQInboundAGGSwitch.p_target_socket);\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tRoutingFunction->p_mq_MsgQInboundServer(mq_MsgQInboundServer_vec[i]->p_target_socket);\n\t}\nRoutingFunction->p_mq_MsgQOutboundAGGSwitch(mq_MsgQOutboundAGGSwitch.p_target_socket);\nfor (cf_count i = 0; i < (cf_count)( dpServerPerRackNb + 1); i++) {\n\t\tRoutingFunction->p_mq_MsgQOutboundServer(mq_MsgQOutboundServer_vec[i]->p_target_socket);\n\t}\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_torswitch::~cfm_torswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ToRSwitch destructor' algorithm generated code\n\n//End of 'ToRSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete InboundAGGSwitch;\nfor (vector<cfm_inboundserver*>::const_iterator vi = InboundServer_vec.begin();\n\t\t\tvi != InboundServer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete OutboundAGGSwitch;\nfor (vector<cfm_outboundserver*>::const_iterator vi = OutboundServer_vec.begin();\n\t\t\tvi != OutboundServer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\ndelete RoutingFunction;\n//deconstructor for vector relation\nfor (vector<mq_MsgQInboundServer_t*>::const_iterator vi = mq_MsgQInboundServer_vec.begin();\n\t\t\tvi != mq_MsgQInboundServer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<mq_MsgQOutboundServer_t*>::const_iterator vi = mq_MsgQOutboundServer_vec.begin();\n\t\t\tvi != mq_MsgQOutboundServer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_torswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_torswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'InboundServer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundServer', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INBOUNDSERVER\n#define COFS_MODEL_INBOUNDSERVER\n\n\n#include \"cfm_inboundserver_global.h\"\n#include \"cfm_inboundserver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_inboundserver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_inboundserver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inboundserver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'InboundServer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundServer', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQServerToToRSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inboundserver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inboundserver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundServer definitions' algorithm generated code\n\n//End of 'InboundServer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inboundserver ::cfm_inboundserver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inboundserver::~cfm_inboundserver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundServer destructor' algorithm generated code\n\n//End of 'InboundServer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_inboundserver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inboundserver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OutboundServer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundServer', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OUTBOUNDSERVER\n#define COFS_MODEL_OUTBOUNDSERVER\n\n\n#include \"cfm_outboundserver_global.h\"\n#include \"cfm_outboundserver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_outboundserver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_outboundserver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_outboundserver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OutboundServer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundServer', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToServer', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_outboundserver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_outboundserver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundServer definitions' algorithm generated code\n\n//End of 'OutboundServer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_outboundserver ::cfm_outboundserver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_outboundserver::~cfm_outboundserver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundServer destructor' algorithm generated code\n\n//End of 'OutboundServer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_outboundserver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_outboundserver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'InboundAGGSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundAGGSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INBOUNDAGGSWITCH\n#define COFS_MODEL_INBOUNDAGGSWITCH\n\n\n#include \"cfm_inboundaggswitch_global.h\"\n#include \"cfm_inboundaggswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_inboundaggswitch : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_inboundaggswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inboundaggswitch(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'InboundAGGSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQInboundAGGSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}, {'name': 'MsgQToRack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inboundaggswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inboundaggswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundAGGSwitch definitions' algorithm generated code\n\n//End of 'InboundAGGSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inboundaggswitch ::cfm_inboundaggswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inboundaggswitch::~cfm_inboundaggswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'InboundAGGSwitch destructor' algorithm generated code\n\n//End of 'InboundAGGSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_inboundaggswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inboundaggswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OutboundAGGSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundAGGSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OUTBOUNDAGGSWITCH\n#define COFS_MODEL_OUTBOUNDAGGSWITCH\n\n\n#include \"cfm_outboundaggswitch_global.h\"\n#include \"cfm_outboundaggswitch_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_outboundaggswitch : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_outboundaggswitch(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_outboundaggswitch(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OutboundAGGSwitch', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQOutboundAGGSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'MsgQToAggSwitch', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'datacenter'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_outboundaggswitch\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of datacenter generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_outboundaggswitch.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundAGGSwitch definitions' algorithm generated code\n\n//End of 'OutboundAGGSwitch definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_outboundaggswitch ::cfm_outboundaggswitch() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_outboundaggswitch::~cfm_outboundaggswitch(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OutboundAGGSwitch destructor' algorithm generated code\n\n//End of 'OutboundAGGSwitch destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_outboundaggswitch::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_outboundaggswitch::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ApplicationModel', 'models': [{'name': 'Producer', 'type': 'cofluent:Function'}, {'name': 'Receiver', 'type': 'cofluent:Function'}], 'relations': [{'name': 'Ack', 'type': 'cofluent:MessageQueue', 'dataType': 'DefAck', 'connectTo': ['Producer', 'Receiver']}, {'name': 'Msg', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsg', 'connectTo': ['Producer', 'Receiver']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_APPLICATIONMODEL\n#define COFS_MODEL_APPLICATIONMODEL\n\n\n#include \"cfm_applicationmodel_global.h\"\n#include \"cfm_applicationmodel_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_producer.h\"\n#include \"cfm_receiver.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n\nclass cfm_applicationmodel : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefAck> mq_Ack_t;\ntypedef cf_core::cf_message_queue<cft_DefMsg> mq_Msg_t;\n\n/// constructor\ncfm_applicationmodel(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_applicationmodel(void);\n\ncfm_producer *Producer;\ncfm_receiver *Receiver;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_Ack_t mq_Ack;\nmq_Msg_t mq_Msg;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ApplicationModel', 'models': [{'name': 'Producer', 'type': 'cofluent:Function'}, {'name': 'Receiver', 'type': 'cofluent:Function'}], 'relations': [{'name': 'Ack', 'type': 'cofluent:MessageQueue', 'dataType': 'DefAck', 'connectTo': ['Producer', 'Receiver']}, {'name': 'Msg', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsg', 'connectTo': ['Producer', 'Receiver']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_applicationmodel\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_applicationmodel.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationModel definitions' algorithm generated code\n\n//End of 'ApplicationModel definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_applicationmodel ::cfm_applicationmodel() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_Ack(\"Ack\"),mq_Msg(\"Msg\"){\ncf_application::init();\n//instantiation of models\nProducer = new cfm_producer(\"Producer\");\nReceiver = new cfm_receiver(\"Receiver\");\n//connections\n//model connect to relation\nProducer->p_mq_Ack(mq_Ack.p_target_socket);\nProducer->p_mq_Msg(mq_Msg.p_target_socket);\n//model connect to relation\nReceiver->p_mq_Ack(mq_Ack.p_target_socket);\nReceiver->p_mq_Msg(mq_Msg.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_applicationmodel::~cfm_applicationmodel(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationModel destructor' algorithm generated code\n\n//End of 'ApplicationModel destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Producer;\ndelete Receiver;\n}\n\n\n//@{\nvoid cfm_applicationmodel::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_applicationmodel::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'models': [{'name': 'Generator', 'type': 'cofluent:Function'}, {'name': 'Sender', 'type': 'cofluent:Function'}], 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck', 'connectTo': ['Sender']}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg', 'connectTo': ['Sender']}], 'relations': [{'name': 'DataVar', 'type': 'cofluent:SharedVariable', 'dataType': 'DefDataVar', 'connectTo': ['Generator', 'Sender']}, {'name': 'Req', 'type': 'cofluent:Event', 'connectTo': ['Generator', 'Sender']}, {'name': 'TestProd', 'type': 'cofluent:SharedVariable', 'dataType': 'DefTestProd', 'connectTo': ['Generator']}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_generator.h\"\n#include \"cfm_sender.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defdatavar_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n#include \"dt/cft_deftestprod_in.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_shared_variable<cft_DefDataVar> sv_DataVar_t;\ntypedef cf_core::cf_event ev_Req_t;\ntypedef cf_core::cf_shared_variable<cft_DefTestProd> sv_TestProd_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_producer, cft_defack> p_mq_Ack_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_producer, cft_defmsg> p_mq_Msg_t;\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\np_mq_Ack_t p_mq_Ack;\np_mq_Msg_t p_mq_Msg;\n\ncfm_generator *Generator;\ncfm_sender *Sender;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nsv_DataVar_t sv_DataVar;\nev_Req_t ev_Req;\nsv_TestProd_t sv_TestProd;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'models': [{'name': 'Generator', 'type': 'cofluent:Function'}, {'name': 'Sender', 'type': 'cofluent:Function'}], 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck', 'connectTo': ['Sender']}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg', 'connectTo': ['Sender']}], 'relations': [{'name': 'DataVar', 'type': 'cofluent:SharedVariable', 'dataType': 'DefDataVar', 'connectTo': ['Generator', 'Sender']}, {'name': 'Req', 'type': 'cofluent:Event', 'connectTo': ['Generator', 'Sender']}, {'name': 'TestProd', 'type': 'cofluent:SharedVariable', 'dataType': 'DefTestProd', 'connectTo': ['Generator']}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_Req(\"Req\"),p_mq_Ack(\"p_mq_Ack\"),p_mq_Msg(\"p_mq_Msg\"),sv_DataVar(\"DataVar\"),sv_TestProd(\"TestProd\"){\ncf_function_container::init();\n//instantiation of models\nGenerator = new cfm_generator(\"Generator\");\nSender = new cfm_sender(\"Sender\");\n//connections\n//model connect to relation\nGenerator->p_sv_DataVar(sv_DataVar.p_target_socket);\nGenerator->p_ev_Req(ev_Req.p_target_socket);\nGenerator->p_sv_TestProd(sv_TestProd.p_target_socket);\n//model connect to relation\nSender->p_sv_DataVar(sv_DataVar.p_target_socket);\nSender->p_ev_Req(ev_Req.p_target_socket);\n//model connect to port\nSender->p_mq_Ack(p_mq_Ack);\nSender->p_mq_Msg(p_mq_Msg);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Generator;\ndelete Sender;\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Receiver', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAck'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsg'}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RECEIVER\n#define COFS_MODEL_RECEIVER\n\n\n#include \"cfm_receiver_global.h\"\n#include \"cfm_receiver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n\nclass cfm_receiver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_receiver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_receiver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Receiver', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAck'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsg'}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_receiver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_receiver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Receiver definitions' algorithm generated code\n\n//End of 'Receiver definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_receiver ::cfm_receiver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_receiver::~cfm_receiver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Receiver destructor' algorithm generated code\n\n//End of 'Receiver destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_receiver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_receiver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Generator', 'type': 'cofluent:Function', 'ports': [{'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefDataVar'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TestProd', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefTestProd'}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_GENERATOR\n#define COFS_MODEL_GENERATOR\n\n\n#include \"cfm_generator_global.h\"\n#include \"cfm_generator_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdatavar_in.h\"\n#include \"dt/cft_deftestprod_in.h\"\n\nclass cfm_generator : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_generator(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_generator(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Generator', 'type': 'cofluent:Function', 'ports': [{'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefDataVar'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TestProd', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefTestProd'}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_generator\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_generator.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Generator definitions' algorithm generated code\n\n//End of 'Generator definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_generator ::cfm_generator() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_generator::~cfm_generator(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Generator destructor' algorithm generated code\n\n//End of 'Generator destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_generator::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_generator::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Sender', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck'}, {'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefDataVar'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SENDER\n#define COFS_MODEL_SENDER\n\n\n#include \"cfm_sender_global.h\"\n#include \"cfm_sender_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defdatavar_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n\nclass cfm_sender : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_sender(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_sender(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Sender', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck'}, {'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefDataVar'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'ApplicationModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_sender\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_sender.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Sender definitions' algorithm generated code\n\n//End of 'Sender definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_sender ::cfm_sender() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_sender::~cfm_sender(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Sender destructor' algorithm generated code\n\n//End of 'Sender destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_sender::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_sender::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'ApplicationModelRefinement', 'models': [{'name': 'Producer', 'type': 'cofluent:Function'}, {'name': 'Receiver', 'type': 'cofluent:Function'}], 'relations': [{'name': 'Ack', 'type': 'cofluent:MessageQueue', 'dataType': 'DefAck', 'connectTo': ['Producer', 'Receiver']}, {'name': 'Msg', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsg', 'connectTo': ['Producer', 'Receiver']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_APPLICATIONMODELREFINEMENT\n#define COFS_MODEL_APPLICATIONMODELREFINEMENT\n\n\n#include \"cfm_applicationmodelrefinement_global.h\"\n#include \"cfm_applicationmodelrefinement_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_producer.h\"\n#include \"cfm_receiver.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n\nclass cfm_applicationmodelrefinement : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefAck> mq_Ack_t;\ntypedef cf_core::cf_message_queue<cft_DefMsg> mq_Msg_t;\n\n/// constructor\ncfm_applicationmodelrefinement(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_applicationmodelrefinement(void);\n\ncfm_producer *Producer;\ncfm_receiver *Receiver;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_Ack_t mq_Ack;\nmq_Msg_t mq_Msg;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'ApplicationModelRefinement', 'models': [{'name': 'Producer', 'type': 'cofluent:Function'}, {'name': 'Receiver', 'type': 'cofluent:Function'}], 'relations': [{'name': 'Ack', 'type': 'cofluent:MessageQueue', 'dataType': 'DefAck', 'connectTo': ['Producer', 'Receiver']}, {'name': 'Msg', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsg', 'connectTo': ['Producer', 'Receiver']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_applicationmodelrefinement\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModelRefinement generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_applicationmodelrefinement.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationModelRefinement definitions' algorithm generated code\n\n//End of 'ApplicationModelRefinement definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_applicationmodelrefinement ::cfm_applicationmodelrefinement() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_Ack(\"Ack\"),mq_Msg(\"Msg\"){\ncf_application::init();\n//instantiation of models\nProducer = new cfm_producer(\"Producer\");\nReceiver = new cfm_receiver(\"Receiver\");\n//connections\n//model connect to relation\nProducer->p_mq_Ack(mq_Ack.p_target_socket);\nProducer->p_mq_Msg(mq_Msg.p_target_socket);\n//model connect to relation\nReceiver->p_mq_Ack(mq_Ack.p_target_socket);\nReceiver->p_mq_Msg(mq_Msg.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_applicationmodelrefinement::~cfm_applicationmodelrefinement(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'ApplicationModelRefinement destructor' algorithm generated code\n\n//End of 'ApplicationModelRefinement destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Producer;\ndelete Receiver;\n}\n\n\n//@{\nvoid cfm_applicationmodelrefinement::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_applicationmodelrefinement::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'models': [{'name': 'Generator', 'type': 'cofluent:Function'}, {'name': 'Sender', 'type': 'cofluent:Function'}], 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck', 'connectTo': ['Sender']}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg', 'connectTo': ['Sender']}], 'relations': [{'name': 'DataVar', 'type': 'cofluent:SharedVariable', 'dataType': 'DefDataVar', 'connectTo': ['Sender', 'Generator']}, {'name': 'Req', 'type': 'cofluent:Event', 'connectTo': ['Sender', 'Generator']}, {'name': 'TestProd', 'type': 'cofluent:SharedVariable', 'dataType': 'DefTestProd', 'connectTo': ['Generator']}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_generator.h\"\n#include \"cfm_sender.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defdatavar_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n#include \"dt/cft_deftestprod_in.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_shared_variable<cft_DefDataVar> sv_DataVar_t;\ntypedef cf_core::cf_event ev_Req_t;\ntypedef cf_core::cf_shared_variable<cft_DefTestProd> sv_TestProd_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_producer, cft_defack> p_mq_Ack_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_producer, cft_defmsg> p_mq_Msg_t;\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\np_mq_Ack_t p_mq_Ack;\np_mq_Msg_t p_mq_Msg;\n\ncfm_generator *Generator;\ncfm_sender *Sender;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nsv_DataVar_t sv_DataVar;\nev_Req_t ev_Req;\nsv_TestProd_t sv_TestProd;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'models': [{'name': 'Generator', 'type': 'cofluent:Function'}, {'name': 'Sender', 'type': 'cofluent:Function'}], 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck', 'connectTo': ['Sender']}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg', 'connectTo': ['Sender']}], 'relations': [{'name': 'DataVar', 'type': 'cofluent:SharedVariable', 'dataType': 'DefDataVar', 'connectTo': ['Sender', 'Generator']}, {'name': 'Req', 'type': 'cofluent:Event', 'connectTo': ['Sender', 'Generator']}, {'name': 'TestProd', 'type': 'cofluent:SharedVariable', 'dataType': 'DefTestProd', 'connectTo': ['Generator']}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModelRefinement generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_Req(\"Req\"),p_mq_Ack(\"p_mq_Ack\"),p_mq_Msg(\"p_mq_Msg\"),sv_DataVar(\"DataVar\"),sv_TestProd(\"TestProd\"){\ncf_function_container::init();\n//instantiation of models\nGenerator = new cfm_generator(\"Generator\");\nSender = new cfm_sender(\"Sender\");\n//connections\n//model connect to relation\nGenerator->p_sv_DataVar(sv_DataVar.p_target_socket);\nGenerator->p_ev_Req(ev_Req.p_target_socket);\nGenerator->p_sv_TestProd(sv_TestProd.p_target_socket);\n//model connect to relation\nSender->p_sv_DataVar(sv_DataVar.p_target_socket);\nSender->p_ev_Req(ev_Req.p_target_socket);\n//model connect to port\nSender->p_mq_Ack(p_mq_Ack);\nSender->p_mq_Msg(p_mq_Msg);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Generator;\ndelete Sender;\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Receiver', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAck'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsg'}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RECEIVER\n#define COFS_MODEL_RECEIVER\n\n\n#include \"cfm_receiver_global.h\"\n#include \"cfm_receiver_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n\nclass cfm_receiver : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_receiver(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_receiver(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Receiver', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefAck'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsg'}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_receiver\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModelRefinement generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_receiver.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Receiver definitions' algorithm generated code\n\n//End of 'Receiver definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_receiver ::cfm_receiver() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_receiver::~cfm_receiver(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Receiver destructor' algorithm generated code\n\n//End of 'Receiver destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_receiver::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_receiver::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Sender', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck'}, {'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefDataVar'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SENDER\n#define COFS_MODEL_SENDER\n\n\n#include \"cfm_sender_global.h\"\n#include \"cfm_sender_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defack_in.h\"\n#include \"dt/cft_defdatavar_in.h\"\n#include \"dt/cft_defmsg_in.h\"\n\nclass cfm_sender : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_sender(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_sender(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Sender', 'type': 'cofluent:Function', 'ports': [{'name': 'Ack', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefAck'}, {'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefDataVar'}, {'name': 'Msg', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsg'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_sender\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModelRefinement generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_sender.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Sender definitions' algorithm generated code\n\n//End of 'Sender definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_sender ::cfm_sender() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_sender::~cfm_sender(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Sender destructor' algorithm generated code\n\n//End of 'Sender destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_sender::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_sender::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Generator', 'type': 'cofluent:Function', 'ports': [{'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefDataVar'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TestProd', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefTestProd'}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_GENERATOR\n#define COFS_MODEL_GENERATOR\n\n\n#include \"cfm_generator_global.h\"\n#include \"cfm_generator_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdatavar_in.h\"\n#include \"dt/cft_deftestprod_in.h\"\n\nclass cfm_generator : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_generator(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_generator(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Generator', 'type': 'cofluent:Function', 'ports': [{'name': 'DataVar', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefDataVar'}, {'name': 'Req', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TestProd', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefTestProd'}], 'globalName': 'ApplicationModelRefinement'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_generator\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of ApplicationModelRefinement generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_generator.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//Start of 'Generator definitions' algorithm generated code\n\n//End of 'Generator definitions' algorithm generated code\n\n/// \\name constructor\n//@{\ncfm_generator ::cfm_generator() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_generator::~cfm_generator(void) {\n//Start of 'Generator destructor' algorithm generated code\n\n//End of 'Generator destructor' algorithm generated code\n}\n}\n\n\n//@{\nvoid cfm_generator::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_generator::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'HybridSchedulingApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Controller', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HYBRIDSCHEDULINGAPP\n#define COFS_MODEL_HYBRIDSCHEDULINGAPP\n\n\n#include \"cfm_hybridschedulingapp_global.h\"\n#include \"cfm_hybridschedulingapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_controller.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_hybridschedulingapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQ_t;\n\n/// constructor\ncfm_hybridschedulingapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_hybridschedulingapp(void);\n\ncfm_consumer *Consumer;\ncfm_controller *Controller;\ncfm_producer *Producer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQ_t mq_MsgQ;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'HybridSchedulingApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function'}, {'name': 'Controller', 'type': 'cofluent:Function'}, {'name': 'Producer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_hybridschedulingapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HybridSchedulingApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_hybridschedulingapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HybridSchedulingApp definitions' algorithm generated code\n\n//End of 'HybridSchedulingApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_hybridschedulingapp ::cfm_hybridschedulingapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQ(\"MsgQ\"){\ncf_application::init();\n//instantiation of models\nConsumer = new cfm_consumer(\"Consumer\");\nController = new cfm_controller(\"Controller\");\nProducer = new cfm_producer(\"Producer\");\n//connections\n//model connect to relation\nConsumer->p_mq_MsgQ(mq_MsgQ.p_target_socket);\n//model connect to relation\nProducer->p_mq_MsgQ(mq_MsgQ.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_hybridschedulingapp::~cfm_hybridschedulingapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HybridSchedulingApp destructor' algorithm generated code\n\n//End of 'HybridSchedulingApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Consumer;\ndelete Controller;\ndelete Producer;\n}\n\n\n//@{\nvoid cfm_hybridschedulingapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_hybridschedulingapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'HybridSchedulingApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'HybridSchedulingApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HybridSchedulingApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'HybridSchedulingApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'HybridSchedulingApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HybridSchedulingApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Controller', 'type': 'cofluent:Function', 'globalName': 'HybridSchedulingApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONTROLLER\n#define COFS_MODEL_CONTROLLER\n\n\n#include \"cfm_controller_global.h\"\n#include \"cfm_controller_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_controller : public cf_core::cf_function {\npublic:\n\n/// constructor\ncfm_controller(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_controller(void);\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Controller', 'type': 'cofluent:Function', 'globalName': 'HybridSchedulingApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_controller\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HybridSchedulingApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_controller.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Controller definitions' algorithm generated code\n\n//End of 'Controller definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_controller ::cfm_controller() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_controller::~cfm_controller(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Controller destructor' algorithm generated code\n\n//End of 'Controller destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_controller::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_controller::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Inheritance_example2App', 'models': [{'name': 'F1', 'type': 'cofluent:Function'}, {'name': 'F2', 'type': 'cofluent:Function'}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_INHERITANCE_EXAMPLE2APP\n#define COFS_MODEL_INHERITANCE_EXAMPLE2APP\n\n\n#include \"cfm_inheritance_example2app_global.h\"\n#include \"cfm_inheritance_example2app_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_f1.h\"\n#include \"cfm_f2.h\"\n\nclass cfm_inheritance_example2app : public cf_core::cf_application {\npublic:\n\n/// constructor\ncfm_inheritance_example2app(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_inheritance_example2app(void);\n\ncfm_f1 *F1;\ncfm_f2 *F2;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Inheritance_example2App', 'models': [{'name': 'F1', 'type': 'cofluent:Function'}, {'name': 'F2', 'type': 'cofluent:Function'}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_inheritance_example2app\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example2App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_inheritance_example2app.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inheritance_example2App definitions' algorithm generated code\n\n//End of 'Inheritance_example2App definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_inheritance_example2app ::cfm_inheritance_example2app() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(){\ncf_application::init();\n//instantiation of models\nF1 = new cfm_f1(\"F1\");\nF2 = new cfm_f2(\"F2\");\n//connections\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_inheritance_example2app::~cfm_inheritance_example2app(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Inheritance_example2App destructor' algorithm generated code\n\n//End of 'Inheritance_example2App destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete F1;\ndelete F2;\n}\n\n\n//@{\nvoid cfm_inheritance_example2app::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_inheritance_example2app::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'F1', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example2App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_F1\n#define COFS_MODEL_F1\n\n\n#include \"cfm_f1_global.h\"\n#include \"cfm_f1_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_f1 : public cf_core::cf_function {\npublic:\n\n/// constructor\ncfm_f1(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_f1(void);\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'F1', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example2App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_f1\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example2App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_f1.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F1 definitions' algorithm generated code\n\n//End of 'F1 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_f1 ::cfm_f1() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_f1::~cfm_f1(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F1 destructor' algorithm generated code\n\n//End of 'F1 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_f1::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_f1::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'F2', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example2App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_F2\n#define COFS_MODEL_F2\n\n\n#include \"cfm_f2_global.h\"\n#include \"cfm_f2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_f2 : public cf_core::cf_function {\npublic:\n\n/// constructor\ncfm_f2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_f2(void);\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'F2', 'type': 'cofluent:Function', 'globalName': 'Inheritance_example2App'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_f2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Inheritance_example2App generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_f2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F2 definitions' algorithm generated code\n\n//End of 'F2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_f2 ::cfm_f2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_f2::~cfm_f2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'F2 destructor' algorithm generated code\n\n//End of 'F2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_f2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_f2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CustomizedDispatcherApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function', 'vector': '0, 1'}, {'name': 'Producer', 'type': 'cofluent:Function', 'vector': '0, 1'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'vector': '0, 1', 'dataType': 'default', 'connectTo': ['Producer', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CUSTOMIZEDDISPATCHERAPP\n#define COFS_MODEL_CUSTOMIZEDDISPATCHERAPP\n\n\n#include \"cfm_customizeddispatcherapp_global.h\"\n#include \"cfm_customizeddispatcherapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_customizeddispatcherapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQ_t;\n\n/// constructor\ncfm_customizeddispatcherapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_customizeddispatcherapp(void);\n\nstd::vector<cfm_consumer *> CustomizedDispatcherApp_vec;\nstd::vector<cfm_producer *> CustomizedDispatcherApp_vec;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nstd::vector<mq_MsgQ_t *> mq_MsgQ_vec;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CustomizedDispatcherApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function', 'vector': '0, 1'}, {'name': 'Producer', 'type': 'cofluent:Function', 'vector': '0, 1'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'vector': '0, 1', 'dataType': 'default', 'connectTo': ['Producer', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_customizeddispatcherapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CustomizedDispatcherApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_customizeddispatcherapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CustomizedDispatcherApp definitions' algorithm generated code\n\n//End of 'CustomizedDispatcherApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_customizeddispatcherapp ::cfm_customizeddispatcherapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQ(\"MsgQ\"){\ncf_application::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_consumer* module = new cfm_consumer(\n\t\t\t\tcf_string(\"Consumer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tConsumer_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_producer* module = new cfm_producer(\n\t\t\t\tcf_string(\"Producer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tProducer_vec.push_back(module);\n\t}\n//instantiation of relations\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tmq_MsgQ_t* module = new mq_MsgQ_t(\n\t\t\t\tcf_string(\"MsgQ[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tmq_MsgQ_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_consumer* module = Consumer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( 1 + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_producer* module = Producer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nfor (cf_count j = 0; j < (cf_count)( 1 + 1); j++) {\n\t\t\t\tmodule->p_mq_MsgQ(mq_MsgQ_vec[j]->p_target_socket);\n\t\t\t}\n}\n}\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_customizeddispatcherapp::~cfm_customizeddispatcherapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CustomizedDispatcherApp destructor' algorithm generated code\n\n//End of 'CustomizedDispatcherApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_consumer*>::const_iterator vi = Consumer_vec.begin();\n\t\t\tvi != Consumer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<cfm_producer*>::const_iterator vi = Producer_vec.begin();\n\t\t\tvi != Producer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n//deconstructor for vector relation\nfor (vector<mq_MsgQ_t*>::const_iterator vi = mq_MsgQ_vec.begin();\n\t\t\tvi != mq_MsgQ_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_customizeddispatcherapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_customizeddispatcherapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'CustomizedDispatcherApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'CustomizedDispatcherApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CustomizedDispatcherApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'CustomizedDispatcherApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'CustomizedDispatcherApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CustomizedDispatcherApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CustomizedSchedulerApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function', 'vector': '0, 1'}, {'name': 'Producer', 'type': 'cofluent:Function', 'vector': '0, 1'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CUSTOMIZEDSCHEDULERAPP\n#define COFS_MODEL_CUSTOMIZEDSCHEDULERAPP\n\n\n#include \"cfm_customizedschedulerapp_global.h\"\n#include \"cfm_customizedschedulerapp_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_consumer.h\"\n#include \"cfm_producer.h\"\n#include \"dt/cft_default_in.h\"\n\nclass cfm_customizedschedulerapp : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cf_core::cf_payload_int> mq_MsgQ_t;\n\n/// constructor\ncfm_customizedschedulerapp(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_customizedschedulerapp(void);\n\nstd::vector<cfm_consumer *> CustomizedSchedulerApp_vec;\nstd::vector<cfm_producer *> CustomizedSchedulerApp_vec;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_MsgQ_t mq_MsgQ;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CustomizedSchedulerApp', 'models': [{'name': 'Consumer', 'type': 'cofluent:Function', 'vector': '0, 1'}, {'name': 'Producer', 'type': 'cofluent:Function', 'vector': '0, 1'}], 'relations': [{'name': 'MsgQ', 'type': 'cofluent:MessageQueue', 'dataType': 'default', 'connectTo': ['Producer', 'Consumer']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_customizedschedulerapp\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CustomizedSchedulerApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_customizedschedulerapp.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CustomizedSchedulerApp definitions' algorithm generated code\n\n//End of 'CustomizedSchedulerApp definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_customizedschedulerapp ::cfm_customizedschedulerapp() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_MsgQ(\"MsgQ\"){\ncf_application::init();\n//instantiation of models\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_consumer* module = new cfm_consumer(\n\t\t\t\tcf_string(\"Consumer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tConsumer_vec.push_back(module);\n\t}\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_producer* module = new cfm_producer(\n\t\t\t\tcf_string(\"Producer[%d]\", i).c_str());\n\t\tCF_ASSERT (module)\n\t\tProducer_vec.push_back(module);\n\t}\n//connections\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_consumer* module = Consumer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nmodule->p_mq_MsgQ(mq_MemReadRequest.p_target_socket);\n}\n}\nfor (cf_count i = 0; i < (cf_count)( 1 + 1); i++) {\n\t\tcfm_producer* module = Producer_vec[i];\n\t\tif (module != nullptr) {\n//model connect to relation\nmodule->p_mq_MsgQ(mq_MemReadRequest.p_target_socket);\n}\n}\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_customizedschedulerapp::~cfm_customizedschedulerapp(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CustomizedSchedulerApp destructor' algorithm generated code\n\n//End of 'CustomizedSchedulerApp destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\nfor (vector<cfm_consumer*>::const_iterator vi = Consumer_vec.begin();\n\t\t\tvi != Consumer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\nfor (vector<cfm_producer*>::const_iterator vi = Producer_vec.begin();\n\t\t\tvi != Producer_vec.end(); vi++) {\n\t\tdelete (*vi);\n\t}\n}\n\n\n//@{\nvoid cfm_customizedschedulerapp::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_customizedschedulerapp::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'CustomizedSchedulerApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PRODUCER\n#define COFS_MODEL_PRODUCER\n\n\n#include \"cfm_producer_global.h\"\n#include \"cfm_producer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_producer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_producer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_producer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Producer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'default'}], 'globalName': 'CustomizedSchedulerApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_producer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CustomizedSchedulerApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_producer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer definitions' algorithm generated code\n\n//End of 'Producer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_producer ::cfm_producer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_producer::~cfm_producer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Producer destructor' algorithm generated code\n\n//End of 'Producer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_producer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_producer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'CustomizedSchedulerApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CONSUMER\n#define COFS_MODEL_CONSUMER\n\n\n#include \"cfm_consumer_global.h\"\n#include \"cfm_consumer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_consumer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_consumer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_consumer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Consumer', 'type': 'cofluent:Function', 'ports': [{'name': 'MsgQ', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'default'}], 'globalName': 'CustomizedSchedulerApp'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_consumer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of CustomizedSchedulerApp generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_consumer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer definitions' algorithm generated code\n\n//End of 'Consumer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_consumer ::cfm_consumer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_consumer::~cfm_consumer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Consumer destructor' algorithm generated code\n\n//End of 'Consumer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_consumer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_consumer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'MyModel', 'models': [{'name': 'packet_in', 'type': 'cofluent:Function'}, {'name': 'packet_out', 'type': 'cofluent:Function'}, {'name': 'packet_process', 'type': 'cofluent:Function'}], 'relations': [{'name': 'p_in', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['packet_in', 'packet_process']}, {'name': 'p_out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['packet_out', 'packet_process']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_MYMODEL\n#define COFS_MODEL_MYMODEL\n\n\n#include \"cfm_mymodel_global.h\"\n#include \"cfm_mymodel_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_packet_in.h\"\n#include \"cfm_packet_out.h\"\n#include \"cfm_packet_process.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_mymodel : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_p_in_t;\ntypedef cf_core::cf_message_queue<cft_DefPacket> mq_p_out_t;\n\n/// constructor\ncfm_mymodel(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_mymodel(void);\n\ncfm_packet_in *packet_in;\ncfm_packet_out *packet_out;\ncfm_packet_process *packet_process;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_p_in_t mq_p_in;\nmq_p_out_t mq_p_out;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'MyModel', 'models': [{'name': 'packet_in', 'type': 'cofluent:Function'}, {'name': 'packet_out', 'type': 'cofluent:Function'}, {'name': 'packet_process', 'type': 'cofluent:Function'}], 'relations': [{'name': 'p_in', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['packet_in', 'packet_process']}, {'name': 'p_out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefPacket', 'connectTo': ['packet_out', 'packet_process']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_mymodel\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MyModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_mymodel.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MyModel definitions' algorithm generated code\n\n//End of 'MyModel definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_mymodel ::cfm_mymodel() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),mq_p_in(\"p_in\"),mq_p_out(\"p_out\"){\ncf_application::init();\n//instantiation of models\npacket_in = new cfm_packet_in(\"packet_in\");\npacket_out = new cfm_packet_out(\"packet_out\");\npacket_process = new cfm_packet_process(\"packet_process\");\n//connections\n//model connect to relation\npacket_in->p_mq_p_in(mq_p_in.p_target_socket);\n//model connect to relation\npacket_out->p_mq_p_out(mq_p_out.p_target_socket);\n//model connect to relation\npacket_process->p_mq_p_in(mq_p_in.p_target_socket);\npacket_process->p_mq_p_out(mq_p_out.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_mymodel::~cfm_mymodel(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'MyModel destructor' algorithm generated code\n\n//End of 'MyModel destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete packet_in;\ndelete packet_out;\ndelete packet_process;\n}\n\n\n//@{\nvoid cfm_mymodel::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_mymodel::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'packet_in', 'type': 'cofluent:Function', 'ports': [{'name': 'p_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'MyModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PACKET_IN\n#define COFS_MODEL_PACKET_IN\n\n\n#include \"cfm_packet_in_global.h\"\n#include \"cfm_packet_in_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_packet_in : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_packet_in(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_packet_in(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'packet_in', 'type': 'cofluent:Function', 'ports': [{'name': 'p_in', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'MyModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_packet_in\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MyModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_packet_in.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'packet_in definitions' algorithm generated code\n// synchronization event callback definition\nvoid cfm_packet_in::my_callback() {\n// notify internal synchronization event\nCF_CSL_NOTIFY_SYNC_EV\n}\n//End of 'packet_in definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_packet_in ::cfm_packet_in() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_packet_in::~cfm_packet_in(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'packet_in destructor' algorithm generated code\n\n//End of 'packet_in destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_packet_in::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_packet_in::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'packet_out', 'type': 'cofluent:Function', 'ports': [{'name': 'p_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'MyModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PACKET_OUT\n#define COFS_MODEL_PACKET_OUT\n\n\n#include \"cfm_packet_out_global.h\"\n#include \"cfm_packet_out_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_packet_out : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_packet_out(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_packet_out(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'packet_out', 'type': 'cofluent:Function', 'ports': [{'name': 'p_out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}], 'globalName': 'MyModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_packet_out\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MyModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_packet_out.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'packet_out definitions' algorithm generated code\n\n//End of 'packet_out definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_packet_out ::cfm_packet_out() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_packet_out::~cfm_packet_out(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'packet_out destructor' algorithm generated code\n\n//End of 'packet_out destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_packet_out::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_packet_out::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'packet_process', 'type': 'cofluent:Function', 'ports': [{'name': 'p_in', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'p_out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'MyModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_PACKET_PROCESS\n#define COFS_MODEL_PACKET_PROCESS\n\n\n#include \"cfm_packet_process_global.h\"\n#include \"cfm_packet_process_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defpacket_in.h\"\n\nclass cfm_packet_process : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_packet_process(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_packet_process(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'packet_process', 'type': 'cofluent:Function', 'ports': [{'name': 'p_in', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefPacket'}, {'name': 'p_out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefPacket'}], 'globalName': 'MyModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_packet_process\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of MyModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_packet_process.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'packet_process definitions' algorithm generated code\n\n//End of 'packet_process definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_packet_process ::cfm_packet_process() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_packet_process::~cfm_packet_process(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'packet_process destructor' algorithm generated code\n\n//End of 'packet_process destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_packet_process::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_packet_process::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'TLM2AT', 'models': [{'name': 'Reader', 'type': 'cofluent:Function'}, {'name': 'TLM2Platfom', 'type': 'cofluent:SystemCIP'}, {'name': 'Target', 'type': 'cofluent:Function'}, {'name': 'Target_2', 'type': 'cofluent:Function'}, {'name': 'Writer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'InitiatorReader', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Reader']}, {'name': 'InitiatorWriter', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Writer']}, {'name': 'ReaderResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Reader']}, {'name': 'ReferenceQueue', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target_2']}, {'name': 'ReferenceQueue2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target']}, {'name': 'ReferenceQueue3', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync2', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target']}, {'name': 'Sync3', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target_2']}, {'name': 'TargetRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetWrapper', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TLM2AT\n#define COFS_MODEL_TLM2AT\n\n\n#include \"cfm_tlm2at_global.h\"\n#include \"cfm_tlm2at_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_reader.h\"\n#include \"cfm_tlm2platfom.h\"\n#include \"cfm_target.h\"\n#include \"cfm_target_2.h\"\n#include \"cfm_writer.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_defmsgq_in.h\"\n#include \"dt/cft_initiator_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_tlm2at : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_Initiator> mq_InitiatorReader_t;\ntypedef cf_core::cf_message_queue<cft_Initiator> mq_InitiatorWriter_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_ReaderResponse_t;\ntypedef cf_core::cf_message_queue<cft_DefData> mq_ReferenceQueue_t;\ntypedef cf_core::cf_message_queue<cft_DefData> mq_ReferenceQueue2_t;\ntypedef cf_core::cf_message_queue<cft_DefMsgQ> mq_ReferenceQueue3_t;\ntypedef cf_core::cf_event ev_Sync_t;\ntypedef cf_core::cf_event ev_Sync2_t;\ntypedef cf_core::cf_event ev_Sync3_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_TargetRequest_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_TargetResponse_t;\ntypedef cf_core::cf_message_queue<cft_Target> mq_TargetWrapper_t;\n\n/// constructor\ncfm_tlm2at(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_tlm2at(void);\n\ncfm_reader *Reader;\ncfm_tlm2platfom *TLM2Platfom;\ncfm_target *Target;\ncfm_target_2 *Target_2;\ncfm_writer *Writer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_InitiatorReader_t mq_InitiatorReader;\nmq_InitiatorWriter_t mq_InitiatorWriter;\nmq_ReaderResponse_t mq_ReaderResponse;\nmq_ReferenceQueue_t mq_ReferenceQueue;\nmq_ReferenceQueue2_t mq_ReferenceQueue2;\nmq_ReferenceQueue3_t mq_ReferenceQueue3;\nev_Sync_t ev_Sync;\nev_Sync2_t ev_Sync2;\nev_Sync3_t ev_Sync3;\nmq_TargetRequest_t mq_TargetRequest;\nmq_TargetResponse_t mq_TargetResponse;\nmq_TargetWrapper_t mq_TargetWrapper;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'TLM2AT', 'models': [{'name': 'Reader', 'type': 'cofluent:Function'}, {'name': 'TLM2Platfom', 'type': 'cofluent:SystemCIP'}, {'name': 'Target', 'type': 'cofluent:Function'}, {'name': 'Target_2', 'type': 'cofluent:Function'}, {'name': 'Writer', 'type': 'cofluent:Function'}], 'relations': [{'name': 'InitiatorReader', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Reader']}, {'name': 'InitiatorWriter', 'type': 'cofluent:MessageQueue', 'dataType': 'Initiator', 'connectTo': ['Writer']}, {'name': 'ReaderResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Reader']}, {'name': 'ReferenceQueue', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target_2']}, {'name': 'ReferenceQueue2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefData', 'connectTo': ['Writer', 'Target']}, {'name': 'ReferenceQueue3', 'type': 'cofluent:MessageQueue', 'dataType': 'DefMsgQ', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Reader']}, {'name': 'Sync2', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target']}, {'name': 'Sync3', 'type': 'cofluent:Event', 'connectTo': ['Writer', 'Target_2']}, {'name': 'TargetRequest', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetResponse', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target_2']}, {'name': 'TargetWrapper', 'type': 'cofluent:MessageQueue', 'dataType': 'Target', 'connectTo': ['Target']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_tlm2at\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2AT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_tlm2at.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'TLM2AT definitions' algorithm generated code\n\n//End of 'TLM2AT definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_tlm2at ::cfm_tlm2at() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),ev_Sync(\"Sync\"),ev_Sync2(\"Sync2\"),ev_Sync3(\"Sync3\"),mq_InitiatorReader(\"InitiatorReader\"),mq_InitiatorWriter(\"InitiatorWriter\"),mq_ReaderResponse(\"ReaderResponse\"),mq_ReferenceQueue(\"ReferenceQueue\"),mq_ReferenceQueue2(\"ReferenceQueue2\"),mq_ReferenceQueue3(\"ReferenceQueue3\"),mq_TargetRequest(\"TargetRequest\"),mq_TargetResponse(\"TargetResponse\"),mq_TargetWrapper(\"TargetWrapper\"){\ncf_application::init();\n//instantiation of models\nReader = new cfm_reader(\"Reader\");\nTLM2Platfom = new cfm_tlm2platfom(\"TLM2Platfom\");\nTarget = new cfm_target(\"Target\");\nTarget_2 = new cfm_target_2(\"Target_2\");\nWriter = new cfm_writer(\"Writer\");\n//connections\n//model connect to relation\nReader->p_mq_InitiatorReader(mq_InitiatorReader.p_target_socket);\nReader->p_mq_ReaderResponse(mq_ReaderResponse.p_target_socket);\nReader->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);\nReader->p_ev_Sync(ev_Sync.p_target_socket);\n//model connect to relation\nTarget->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);\nTarget->p_ev_Sync2(ev_Sync2.p_target_socket);\nTarget->p_mq_TargetWrapper(mq_TargetWrapper.p_target_socket);\n//model connect to relation\nTarget_2->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);\nTarget_2->p_ev_Sync3(ev_Sync3.p_target_socket);\nTarget_2->p_mq_TargetRequest(mq_TargetRequest.p_target_socket);\nTarget_2->p_mq_TargetResponse(mq_TargetResponse.p_target_socket);\n//model connect to relation\nWriter->p_mq_InitiatorWriter(mq_InitiatorWriter.p_target_socket);\nWriter->p_mq_ReferenceQueue(mq_ReferenceQueue.p_target_socket);\nWriter->p_mq_ReferenceQueue2(mq_ReferenceQueue2.p_target_socket);\nWriter->p_mq_ReferenceQueue3(mq_ReferenceQueue3.p_target_socket);\nWriter->p_ev_Sync(ev_Sync.p_target_socket);\nWriter->p_ev_Sync2(ev_Sync2.p_target_socket);\nWriter->p_ev_Sync3(ev_Sync3.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_tlm2at::~cfm_tlm2at(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'TLM2AT destructor' algorithm generated code\n\n//End of 'TLM2AT destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Reader;\ndelete TLM2Platfom;\ndelete Target;\ndelete Target_2;\ndelete Writer;\n}\n\n\n//@{\nvoid cfm_tlm2at::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_tlm2at::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Writer', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorWriter', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_WRITER\n#define COFS_MODEL_WRITER\n\n\n#include \"cfm_writer_global.h\"\n#include \"cfm_writer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_defmsgq_in.h\"\n#include \"dt/cft_initiator_in.h\"\n\nclass cfm_writer : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_writer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_writer(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Writer', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorWriter', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefData'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_writer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2AT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_writer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Writer definitions' algorithm generated code\n\n//End of 'Writer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_writer ::cfm_writer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_writer::~cfm_writer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Writer destructor' algorithm generated code\n\n//End of 'Writer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_writer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_writer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Target', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetWrapper', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TARGET\n#define COFS_MODEL_TARGET\n\n\n#include \"cfm_target_global.h\"\n#include \"cfm_target_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_target : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_target(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_target(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Target', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync2', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetWrapper', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_target\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2AT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_target.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target definitions' algorithm generated code\n\n//End of 'Target definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_target ::cfm_target() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_target::~cfm_target(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target destructor' algorithm generated code\n\n//End of 'Target destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_target::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_target::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Reader', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorReader', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReaderResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_READER\n#define COFS_MODEL_READER\n\n\n#include \"cfm_reader_global.h\"\n#include \"cfm_reader_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defmsgq_in.h\"\n#include \"dt/cft_initiator_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_reader : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_reader(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_reader(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Reader', 'type': 'cofluent:Function', 'ports': [{'name': 'InitiatorReader', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Initiator'}, {'name': 'ReaderResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'ReferenceQueue3', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefMsgQ'}, {'name': 'Sync', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_reader\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2AT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_reader.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Reader definitions' algorithm generated code\n\n//End of 'Reader definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_reader ::cfm_reader() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_reader::~cfm_reader(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Reader destructor' algorithm generated code\n\n//End of 'Reader destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_reader::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_reader::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Target_2', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'TargetResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Target'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_TARGET_2\n#define COFS_MODEL_TARGET_2\n\n\n#include \"cfm_target_2_global.h\"\n#include \"cfm_target_2_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_target_in.h\"\n\nclass cfm_target_2 : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_target_2(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_target_2(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Target_2', 'type': 'cofluent:Function', 'ports': [{'name': 'ReferenceQueue', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefData'}, {'name': 'Sync3', 'type': 'EVENT', 'direction': 'OUT'}, {'name': 'TargetRequest', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'Target'}, {'name': 'TargetResponse', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'Target'}], 'globalName': 'TLM2AT'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_target_2\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of TLM2AT generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_target_2.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target_2 definitions' algorithm generated code\n\n//End of 'Target_2 definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_target_2 ::cfm_target_2() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_target_2::~cfm_target_2(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Target_2 destructor' algorithm generated code\n\n//End of 'Target_2 destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_target_2::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_target_2::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'HwDeviceModel', 'models': [{'name': 'hwDeviceTest', 'type': 'cofluent:Function'}], 'relations': [{'name': 'inputStream', 'type': 'cofluent:SharedVariable', 'dataType': 'DefFrame', 'connectTo': ['hwDeviceTest']}, {'name': 'outputStream', 'type': 'cofluent:SharedVariable', 'dataType': 'DefFrame', 'connectTo': ['hwDeviceTest']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HWDEVICEMODEL\n#define COFS_MODEL_HWDEVICEMODEL\n\n\n#include \"cfm_hwdevicemodel_global.h\"\n#include \"cfm_hwdevicemodel_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_hwdevicetest.h\"\n#include \"dt/cft_defframe_in.h\"\n\nclass cfm_hwdevicemodel : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_shared_variable<cft_DefFrame> sv_inputStream_t;\ntypedef cf_core::cf_shared_variable<cft_DefFrame> sv_outputStream_t;\n\n/// constructor\ncfm_hwdevicemodel(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_hwdevicemodel(void);\n\ncfm_hwdevicetest *hwDeviceTest;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nsv_inputStream_t sv_inputStream;\nsv_outputStream_t sv_outputStream;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'HwDeviceModel', 'models': [{'name': 'hwDeviceTest', 'type': 'cofluent:Function'}], 'relations': [{'name': 'inputStream', 'type': 'cofluent:SharedVariable', 'dataType': 'DefFrame', 'connectTo': ['hwDeviceTest']}, {'name': 'outputStream', 'type': 'cofluent:SharedVariable', 'dataType': 'DefFrame', 'connectTo': ['hwDeviceTest']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_hwdevicemodel\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HwDeviceModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_hwdevicemodel.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HwDeviceModel definitions' algorithm generated code\n\n//End of 'HwDeviceModel definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_hwdevicemodel ::cfm_hwdevicemodel() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),sv_inputStream(\"inputStream\"),sv_outputStream(\"outputStream\"){\ncf_application::init();\n//instantiation of models\nhwDeviceTest = new cfm_hwdevicetest(\"hwDeviceTest\");\n//connections\n//model connect to relation\nhwDeviceTest->p_sv_inputStream(sv_inputStream.p_target_socket);\nhwDeviceTest->p_sv_outputStream(sv_outputStream.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_hwdevicemodel::~cfm_hwdevicemodel(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'HwDeviceModel destructor' algorithm generated code\n\n//End of 'HwDeviceModel destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete hwDeviceTest;\n}\n\n\n//@{\nvoid cfm_hwdevicemodel::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_hwdevicemodel::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'hwDeviceTest', 'type': 'cofluent:Function', 'models': [{'name': 'hwModel', 'type': 'cofluent:Function'}, {'name': 'hwTestBench', 'type': 'cofluent:Function'}], 'ports': [{'name': 'inputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame', 'connectTo': ['hwTestBench']}, {'name': 'outputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame', 'connectTo': ['hwTestBench']}], 'relations': [{'name': 'inputFrame', 'type': 'cofluent:MessageQueue', 'dataType': 'DefFrame', 'connectTo': ['hwModel', 'hwTestBench']}, {'name': 'outputFrame', 'type': 'cofluent:MessageQueue', 'dataType': 'DefFrame', 'connectTo': ['hwModel', 'hwTestBench']}, {'name': 'processingMode', 'type': 'cofluent:SharedVariable', 'dataType': 'DefProcessingMode', 'connectTo': ['hwModel', 'hwTestBench']}, {'name': 'startProcess', 'type': 'cofluent:Event', 'connectTo': ['hwModel', 'hwTestBench']}], 'globalName': 'HwDeviceModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HWDEVICETEST\n#define COFS_MODEL_HWDEVICETEST\n\n\n#include \"cfm_hwdevicetest_global.h\"\n#include \"cfm_hwdevicetest_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_hwmodel.h\"\n#include \"cfm_hwtestbench.h\"\n#include \"dt/cft_defframe_in.h\"\n#include \"dt/cft_defprocessingmode_in.h\"\n\nclass cfm_hwdevicetest : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefFrame> mq_inputFrame_t;\ntypedef cf_core::cf_message_queue<cft_DefFrame> mq_outputFrame_t;\ntypedef cf_core::cf_shared_variable<cft_DefProcessingMode> sv_processingMode_t;\ntypedef cf_core::cf_event ev_startProcess_t;\n\ntypedef cf_core::cf_sv_initiator_socket<cfm_hwdevicetest, cft_defframe> p_sv_inputStream_t;typedef cf_core::cf_sv_initiator_socket<cfm_hwdevicetest, cft_defframe> p_sv_outputStream_t;\n/// constructor\ncfm_hwdevicetest(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_hwdevicetest(void);\n\np_sv_inputStream_t p_sv_inputStream;\np_sv_outputStream_t p_sv_outputStream;\n\ncfm_hwmodel *hwModel;\ncfm_hwtestbench *hwTestBench;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_inputFrame_t mq_inputFrame;\nmq_outputFrame_t mq_outputFrame;\nsv_processingMode_t sv_processingMode;\nev_startProcess_t ev_startProcess;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'hwDeviceTest', 'type': 'cofluent:Function', 'models': [{'name': 'hwModel', 'type': 'cofluent:Function'}, {'name': 'hwTestBench', 'type': 'cofluent:Function'}], 'ports': [{'name': 'inputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame', 'connectTo': ['hwTestBench']}, {'name': 'outputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame', 'connectTo': ['hwTestBench']}], 'relations': [{'name': 'inputFrame', 'type': 'cofluent:MessageQueue', 'dataType': 'DefFrame', 'connectTo': ['hwModel', 'hwTestBench']}, {'name': 'outputFrame', 'type': 'cofluent:MessageQueue', 'dataType': 'DefFrame', 'connectTo': ['hwModel', 'hwTestBench']}, {'name': 'processingMode', 'type': 'cofluent:SharedVariable', 'dataType': 'DefProcessingMode', 'connectTo': ['hwModel', 'hwTestBench']}, {'name': 'startProcess', 'type': 'cofluent:Event', 'connectTo': ['hwModel', 'hwTestBench']}], 'globalName': 'HwDeviceModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_hwdevicetest\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HwDeviceModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_hwdevicetest.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'hwDeviceTest definitions' algorithm generated code\n\n//End of 'hwDeviceTest definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_hwdevicetest ::cfm_hwdevicetest() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_startProcess(\"startProcess\"),mq_inputFrame(\"inputFrame\"),mq_outputFrame(\"outputFrame\"),p_sv_inputStream(\"p_sv_inputStream\"),p_sv_outputStream(\"p_sv_outputStream\"),sv_processingMode(\"processingMode\"){\ncf_function_container::init();\n//instantiation of models\nhwModel = new cfm_hwmodel(\"hwModel\");\nhwTestBench = new cfm_hwtestbench(\"hwTestBench\");\n//connections\n//model connect to relation\nhwModel->p_mq_inputFrame(mq_inputFrame.p_target_socket);\nhwModel->p_mq_outputFrame(mq_outputFrame.p_target_socket);\nhwModel->p_sv_processingMode(sv_processingMode.p_target_socket);\nhwModel->p_ev_startProcess(ev_startProcess.p_target_socket);\n//model connect to relation\nhwTestBench->p_mq_inputFrame(mq_inputFrame.p_target_socket);\nhwTestBench->p_mq_outputFrame(mq_outputFrame.p_target_socket);\nhwTestBench->p_sv_processingMode(sv_processingMode.p_target_socket);\nhwTestBench->p_ev_startProcess(ev_startProcess.p_target_socket);\n//model connect to port\nhwTestBench->p_mq_inputStream(p_mq_inputStream);\nhwTestBench->p_mq_outputStream(p_mq_outputStream);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_hwdevicetest::~cfm_hwdevicetest(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'hwDeviceTest destructor' algorithm generated code\n\n//End of 'hwDeviceTest destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete hwModel;\ndelete hwTestBench;\n}\n\n\n//@{\nvoid cfm_hwdevicetest::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_hwdevicetest::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'hwModel', 'type': 'cofluent:Function', 'ports': [{'name': 'inputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefFrame'}, {'name': 'outputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'processingMode', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefProcessingMode'}, {'name': 'startProcess', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'HwDeviceModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HWMODEL\n#define COFS_MODEL_HWMODEL\n\n\n#include \"cfm_hwmodel_global.h\"\n#include \"cfm_hwmodel_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defframe_in.h\"\n#include \"dt/cft_defprocessingmode_in.h\"\n\nclass cfm_hwmodel : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_hwmodel(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_hwmodel(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'hwModel', 'type': 'cofluent:Function', 'ports': [{'name': 'inputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefFrame'}, {'name': 'outputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'processingMode', 'type': 'SHARED_VARIABLE', 'direction': 'IN', 'dataType': 'DefProcessingMode'}, {'name': 'startProcess', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'HwDeviceModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_hwmodel\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HwDeviceModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_hwmodel.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'hwModel definitions' algorithm generated code\nvoid cfm_hwmodel::revert_frame() {\n\n/* Reverting the image means that Pixel 0 becomes Pixel N-1, where N is the frame size (in Pixels)\n* In YUV 422 format, it implies to:\n*   - Revert the Y table, located at offset 0\n*   - Revert the U table, located at offset N\n*   - Revert the V table, located at offset N*1.5\n*/\nunsigned char* outpayload = outputFrame.payload;\nunsigned char* inpayload = inputFrame.payload;\n\n// 'U' table Offset\nint offsetU = (int) (NbPixelsPerLineMax * NbLinesMax);\n// 'V' table offset\nint offsetV = (int) (NbPixelsPerLineMax * NbLinesMax * 1.5);\n\n// 4-Pixel block index in a line\nint pixel_block_idx = 0;\n\n// Line index\nint line_idx;\n\n// 4-Pixel block offset, from the beginning of the frame\nint current_block_ofs = 0;\n\n// For each frame line\nfor (line_idx = 0; line_idx < NbLinesMax; line_idx++) {\n// For each pixel block\nfor (pixel_block_idx = 0; pixel_block_idx < NbPixelsPerLineMax / 4;\npixel_block_idx++) {\n\n// Revert the Y table\noutpayload[offsetU - 1 - current_block_ofs] =\ninpayload[current_block_ofs + 0];\noutpayload[offsetU - 1 - current_block_ofs - 1] =\ninpayload[current_block_ofs + 1];\noutpayload[offsetU - 1 - current_block_ofs - 2] =\ninpayload[current_block_ofs + 2];\noutpayload[offsetU - 1 - current_block_ofs - 3] =\ninpayload[current_block_ofs + 3];\n\n// Revert the U table\noutpayload[offsetV - 1 - current_block_ofs / 2 - 0] =\ninpayload[offsetU + current_block_ofs / 2 + 0];\noutpayload[offsetV - 1 - current_block_ofs / 2 - 1] =\ninpayload[offsetU + current_block_ofs / 2 + 1];\n\n// Revert the V table\noutpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1\n- current_block_ofs / 2 - 0] = inpayload[offsetV\n+ current_block_ofs / 2 + 0];\noutpayload[NbPixelsPerLineMax * NbLinesMax * 2 - 1\n- current_block_ofs / 2 - 1] = inpayload[offsetV\n+ current_block_ofs / 2 + 1];\n\ncurrent_block_ofs += 4;\n\n}\n}\n}\n//End of 'hwModel definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_hwmodel ::cfm_hwmodel() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_hwmodel::~cfm_hwmodel(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'hwModel destructor' algorithm generated code\n\n//End of 'hwModel destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_hwmodel::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_hwmodel::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'hwTestBench', 'type': 'cofluent:Function', 'ports': [{'name': 'inputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'inputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'outputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefFrame'}, {'name': 'outputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'processingMode', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefProcessingMode'}, {'name': 'startProcess', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'HwDeviceModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_HWTESTBENCH\n#define COFS_MODEL_HWTESTBENCH\n\n\n#include \"cfm_hwtestbench_global.h\"\n#include \"cfm_hwtestbench_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defframe_in.h\"\n#include \"dt/cft_defprocessingmode_in.h\"\n\nclass cfm_hwtestbench : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_hwtestbench(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_hwtestbench(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'hwTestBench', 'type': 'cofluent:Function', 'ports': [{'name': 'inputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'inputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'outputFrame', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefFrame'}, {'name': 'outputStream', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefFrame'}, {'name': 'processingMode', 'type': 'SHARED_VARIABLE', 'direction': 'OUT', 'dataType': 'DefProcessingMode'}, {'name': 'startProcess', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'HwDeviceModel'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_hwtestbench\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of HwDeviceModel generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_hwtestbench.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'hwTestBench definitions' algorithm generated code\n\n//End of 'hwTestBench definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_hwtestbench ::cfm_hwtestbench() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_hwtestbench::~cfm_hwtestbench(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'hwTestBench destructor' algorithm generated code\n\n//End of 'hwTestBench destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_hwtestbench::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_hwtestbench::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Bluetooth_IPs', 'models': [{'name': 'BT_System', 'type': 'cofluent:Function'}, {'name': 'Slave_Stub', 'type': 'cofluent:Function'}, {'name': 'Start', 'type': 'cofluent:Function'}], 'relations': [{'name': 'BaseBand_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand', 'connectTo': ['Slave_Stub', 'BT_System']}, {'name': 'BaseBand_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand', 'connectTo': ['Slave_Stub', 'BT_System']}, {'name': 'startEv', 'type': 'cofluent:Event', 'connectTo': ['BT_System', 'Start']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BLUETOOTH_IPS\n#define COFS_MODEL_BLUETOOTH_IPS\n\n\n#include \"cfm_bluetooth_ips_global.h\"\n#include \"cfm_bluetooth_ips_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_bt_system.h\"\n#include \"cfm_slave_stub.h\"\n#include \"cfm_start.h\"\n#include \"dt/cft_defbaseband_in.h\"\n\nclass cfm_bluetooth_ips : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefBaseBand> mq_BaseBand_In_t;\ntypedef cf_core::cf_message_queue<cft_DefBaseBand> mq_BaseBand_Out_t;\ntypedef cf_core::cf_event ev_startEv_t;\n\n/// constructor\ncfm_bluetooth_ips(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_bluetooth_ips(void);\n\ncfm_bt_system *BT_System;\ncfm_slave_stub *Slave_Stub;\ncfm_start *Start;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_BaseBand_In_t mq_BaseBand_In;\nmq_BaseBand_Out_t mq_BaseBand_Out;\nev_startEv_t ev_startEv;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Bluetooth_IPs', 'models': [{'name': 'BT_System', 'type': 'cofluent:Function'}, {'name': 'Slave_Stub', 'type': 'cofluent:Function'}, {'name': 'Start', 'type': 'cofluent:Function'}], 'relations': [{'name': 'BaseBand_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand', 'connectTo': ['Slave_Stub', 'BT_System']}, {'name': 'BaseBand_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand', 'connectTo': ['Slave_Stub', 'BT_System']}, {'name': 'startEv', 'type': 'cofluent:Event', 'connectTo': ['BT_System', 'Start']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_bluetooth_ips\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_bluetooth_ips.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Bluetooth_IPs definitions' algorithm generated code\n\n//End of 'Bluetooth_IPs definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_bluetooth_ips ::cfm_bluetooth_ips() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),ev_startEv(\"startEv\"),mq_BaseBand_In(\"BaseBand_In\"),mq_BaseBand_Out(\"BaseBand_Out\"){\ncf_application::init();\n//instantiation of models\nBT_System = new cfm_bt_system(\"BT_System\");\nSlave_Stub = new cfm_slave_stub(\"Slave_Stub\");\nStart = new cfm_start(\"Start\");\n//connections\n//model connect to relation\nBT_System->p_mq_BaseBand_In(mq_BaseBand_In.p_target_socket);\nBT_System->p_mq_BaseBand_Out(mq_BaseBand_Out.p_target_socket);\nBT_System->p_ev_startEv(ev_startEv.p_target_socket);\n//model connect to relation\nSlave_Stub->p_mq_BaseBand_In(mq_BaseBand_In.p_target_socket);\nSlave_Stub->p_mq_BaseBand_Out(mq_BaseBand_Out.p_target_socket);\n//model connect to relation\nStart->p_ev_startEv(ev_startEv.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_bluetooth_ips::~cfm_bluetooth_ips(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Bluetooth_IPs destructor' algorithm generated code\n\n//End of 'Bluetooth_IPs destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BT_System;\ndelete Slave_Stub;\ndelete Start;\n}\n\n\n//@{\nvoid cfm_bluetooth_ips::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_bluetooth_ips::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Slave_Stub', 'type': 'cofluent:Function', 'models': [{'name': 'In_Stub', 'type': 'cofluent:Function'}, {'name': 'Out_Stub', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['In_Stub']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['Out_Stub']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_SLAVE_STUB\n#define COFS_MODEL_SLAVE_STUB\n\n\n#include \"cfm_slave_stub_global.h\"\n#include \"cfm_slave_stub_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_in_stub.h\"\n#include \"cfm_out_stub.h\"\n#include \"dt/cft_defbaseband_in.h\"\n\nclass cfm_slave_stub : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_slave_stub, cft_defbaseband> p_mq_BaseBand_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_slave_stub, cft_defbaseband> p_mq_BaseBand_Out_t;\n\n/// constructor\ncfm_slave_stub(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_slave_stub(void);\n\np_mq_BaseBand_In_t p_mq_BaseBand_In;\np_mq_BaseBand_Out_t p_mq_BaseBand_Out;\n\ncfm_in_stub *In_Stub;\ncfm_out_stub *Out_Stub;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Slave_Stub', 'type': 'cofluent:Function', 'models': [{'name': 'In_Stub', 'type': 'cofluent:Function'}, {'name': 'Out_Stub', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['In_Stub']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['Out_Stub']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_slave_stub\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_slave_stub.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Slave_Stub definitions' algorithm generated code\n\n//End of 'Slave_Stub definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_slave_stub ::cfm_slave_stub() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_BaseBand_In(\"p_mq_BaseBand_In\"),p_mq_BaseBand_Out(\"p_mq_BaseBand_Out\"){\ncf_function_container::init();\n//instantiation of models\nIn_Stub = new cfm_in_stub(\"In_Stub\");\nOut_Stub = new cfm_out_stub(\"Out_Stub\");\n//connections\n//model connect to port\nIn_Stub->p_mq_BaseBand_In(p_mq_BaseBand_In);\n//model connect to port\nOut_Stub->p_mq_BaseBand_Out(p_mq_BaseBand_Out);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_slave_stub::~cfm_slave_stub(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Slave_Stub destructor' algorithm generated code\n\n//End of 'Slave_Stub destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete In_Stub;\ndelete Out_Stub;\n}\n\n\n//@{\nvoid cfm_slave_stub::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_slave_stub::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BT_System', 'type': 'cofluent:Function', 'models': [{'name': 'BT_Stack', 'type': 'cofluent:Function'}, {'name': 'FileSystem', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['BT_Stack']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['BT_Stack']}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['BT_Stack']}], 'relations': [{'name': 'Data', 'type': 'cofluent:SharedVariable', 'dataType': 'DefData', 'connectTo': ['FileSystem']}, {'name': 'DataIn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefDataIn', 'connectTo': ['FileSystem', 'BT_Stack']}, {'name': 'DataOut', 'type': 'cofluent:MessageQueue', 'dataType': 'DefDataOut', 'connectTo': ['FileSystem', 'BT_Stack']}, {'name': 'ReadWrite', 'type': 'cofluent:MessageQueue', 'dataType': 'DefReadWrite', 'connectTo': ['FileSystem', 'BT_Stack']}, {'name': 'WrOK', 'type': 'cofluent:Event', 'connectTo': ['FileSystem', 'BT_Stack']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BT_SYSTEM\n#define COFS_MODEL_BT_SYSTEM\n\n\n#include \"cfm_bt_system_global.h\"\n#include \"cfm_bt_system_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_bt_stack.h\"\n#include \"cfm_filesystem.h\"\n#include \"dt/cft_defbaseband_in.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_defdatain_in.h\"\n#include \"dt/cft_defdataout_in.h\"\n#include \"dt/cft_defreadwrite_in.h\"\n\nclass cfm_bt_system : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_shared_variable<cft_DefData> sv_Data_t;\ntypedef cf_core::cf_message_queue<cft_DefDataIn> mq_DataIn_t;\ntypedef cf_core::cf_message_queue<cft_DefDataOut> mq_DataOut_t;\ntypedef cf_core::cf_message_queue<cft_DefReadWrite> mq_ReadWrite_t;\ntypedef cf_core::cf_event ev_WrOK_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_system, cft_defbaseband> p_mq_BaseBand_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_system, cft_defbaseband> p_mq_BaseBand_Out_t;\ntypedef cf_core::cf_ev_initiator_socket<cfm_bt_system> p_ev_startEv_t;\n\n/// constructor\ncfm_bt_system(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_bt_system(void);\n\np_mq_BaseBand_In_t p_mq_BaseBand_In;\np_mq_BaseBand_Out_t p_mq_BaseBand_Out;\np_ev_startEv_t p_ev_startEv;\n\ncfm_bt_stack *BT_Stack;\ncfm_filesystem *FileSystem;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nsv_Data_t sv_Data;\nmq_DataIn_t mq_DataIn;\nmq_DataOut_t mq_DataOut;\nmq_ReadWrite_t mq_ReadWrite;\nev_WrOK_t ev_WrOK;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BT_System', 'type': 'cofluent:Function', 'models': [{'name': 'BT_Stack', 'type': 'cofluent:Function'}, {'name': 'FileSystem', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['BT_Stack']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['BT_Stack']}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['BT_Stack']}], 'relations': [{'name': 'Data', 'type': 'cofluent:SharedVariable', 'dataType': 'DefData', 'connectTo': ['FileSystem']}, {'name': 'DataIn', 'type': 'cofluent:MessageQueue', 'dataType': 'DefDataIn', 'connectTo': ['FileSystem', 'BT_Stack']}, {'name': 'DataOut', 'type': 'cofluent:MessageQueue', 'dataType': 'DefDataOut', 'connectTo': ['FileSystem', 'BT_Stack']}, {'name': 'ReadWrite', 'type': 'cofluent:MessageQueue', 'dataType': 'DefReadWrite', 'connectTo': ['FileSystem', 'BT_Stack']}, {'name': 'WrOK', 'type': 'cofluent:Event', 'connectTo': ['FileSystem', 'BT_Stack']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_bt_system\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_bt_system.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BT_System definitions' algorithm generated code\n\n//End of 'BT_System definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_bt_system ::cfm_bt_system() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_WrOK(\"WrOK\"),mq_DataIn(\"DataIn\"),mq_DataOut(\"DataOut\"),mq_ReadWrite(\"ReadWrite\"),p_ev_startEv(\"p_ev_startEv\"),p_mq_BaseBand_In(\"p_mq_BaseBand_In\"),p_mq_BaseBand_Out(\"p_mq_BaseBand_Out\"),sv_Data(\"Data\"){\ncf_function_container::init();\n//instantiation of models\nBT_Stack = new cfm_bt_stack(\"BT_Stack\");\nFileSystem = new cfm_filesystem(\"FileSystem\");\n//connections\n//model connect to relation\nBT_Stack->p_mq_DataIn(mq_DataIn.p_target_socket);\nBT_Stack->p_mq_DataOut(mq_DataOut.p_target_socket);\nBT_Stack->p_mq_ReadWrite(mq_ReadWrite.p_target_socket);\nBT_Stack->p_ev_WrOK(ev_WrOK.p_target_socket);\n//model connect to port\nBT_Stack->p_mq_BaseBand_In(p_mq_BaseBand_In);\nBT_Stack->p_mq_BaseBand_Out(p_mq_BaseBand_Out);\nBT_Stack->p_mq_startEv(p_mq_startEv);\n//model connect to relation\nFileSystem->p_sv_Data(sv_Data.p_target_socket);\nFileSystem->p_mq_DataIn(mq_DataIn.p_target_socket);\nFileSystem->p_mq_DataOut(mq_DataOut.p_target_socket);\nFileSystem->p_mq_ReadWrite(mq_ReadWrite.p_target_socket);\nFileSystem->p_ev_WrOK(ev_WrOK.p_target_socket);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_bt_system::~cfm_bt_system(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BT_System destructor' algorithm generated code\n\n//End of 'BT_System destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BT_Stack;\ndelete FileSystem;\n}\n\n\n//@{\nvoid cfm_bt_system::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_bt_system::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Start', 'type': 'cofluent:Function', 'ports': [{'name': 'startEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_START\n#define COFS_MODEL_START\n\n\n#include \"cfm_start_global.h\"\n#include \"cfm_start_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_start : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_start(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_start(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Start', 'type': 'cofluent:Function', 'ports': [{'name': 'startEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_start\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_start.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Start definitions' algorithm generated code\n\n//End of 'Start definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_start ::cfm_start() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_start::~cfm_start(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Start destructor' algorithm generated code\n\n//End of 'Start destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_start::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_start::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'In_Stub', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_IN_STUB\n#define COFS_MODEL_IN_STUB\n\n\n#include \"cfm_in_stub_global.h\"\n#include \"cfm_in_stub_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbaseband_in.h\"\n\nclass cfm_in_stub : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_in_stub(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_in_stub(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'In_Stub', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_in_stub\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_in_stub.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'In_Stub definitions' algorithm generated code\n\n//End of 'In_Stub definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_in_stub ::cfm_in_stub() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_in_stub::~cfm_in_stub(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'In_Stub destructor' algorithm generated code\n\n//End of 'In_Stub destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_in_stub::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_in_stub::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'Out_Stub', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OUT_STUB\n#define COFS_MODEL_OUT_STUB\n\n\n#include \"cfm_out_stub_global.h\"\n#include \"cfm_out_stub_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbaseband_in.h\"\n\nclass cfm_out_stub : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_out_stub(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_out_stub(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'Out_Stub', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_out_stub\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_out_stub.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Out_Stub definitions' algorithm generated code\n\n//End of 'Out_Stub definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_out_stub ::cfm_out_stub() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_out_stub::~cfm_out_stub(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'Out_Stub destructor' algorithm generated code\n\n//End of 'Out_Stub destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_out_stub::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_out_stub::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'FileSystem', 'type': 'cofluent:Function', 'ports': [{'name': 'Data', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefData'}, {'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataIn'}, {'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataOut'}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefReadWrite'}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_FILESYSTEM\n#define COFS_MODEL_FILESYSTEM\n\n\n#include \"cfm_filesystem_global.h\"\n#include \"cfm_filesystem_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdata_in.h\"\n#include \"dt/cft_defdatain_in.h\"\n#include \"dt/cft_defdataout_in.h\"\n#include \"dt/cft_defreadwrite_in.h\"\n\nclass cfm_filesystem : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_filesystem(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_filesystem(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'FileSystem', 'type': 'cofluent:Function', 'ports': [{'name': 'Data', 'type': 'SHARED_VARIABLE', 'direction': 'IN_OUT', 'dataType': 'DefData'}, {'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataIn'}, {'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataOut'}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefReadWrite'}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_filesystem\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_filesystem.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'FileSystem definitions' algorithm generated code\n\n//End of 'FileSystem definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_filesystem ::cfm_filesystem() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_filesystem::~cfm_filesystem(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'FileSystem destructor' algorithm generated code\n\n//End of 'FileSystem destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_filesystem::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_filesystem::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BT_Stack', 'type': 'cofluent:Function', 'models': [{'name': 'BaseBand_Layer', 'type': 'cofluent:Function'}, {'name': 'L2CAP_Layer', 'type': 'cofluent:Function'}, {'name': 'OBEX_Layer', 'type': 'cofluent:Function'}, {'name': 'RFCOMM_Layer', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['BaseBand_Layer']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['BaseBand_Layer']}, {'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataIn', 'connectTo': ['OBEX_Layer']}, {'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataOut', 'connectTo': ['OBEX_Layer']}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite', 'connectTo': ['OBEX_Layer']}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Layer']}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Layer']}], 'relations': [{'name': 'L2CAP_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefL2CAP_In', 'connectTo': ['BaseBand_Layer', 'L2CAP_Layer']}, {'name': 'L2CAP_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefL2CAP_Out', 'connectTo': ['BaseBand_Layer', 'L2CAP_Layer']}, {'name': 'OBEX_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_In', 'connectTo': ['OBEX_Layer', 'RFCOMM_Layer']}, {'name': 'OBEX_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_Out', 'connectTo': ['OBEX_Layer', 'RFCOMM_Layer']}, {'name': 'RFCOMM_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_In', 'connectTo': ['RFCOMM_Layer', 'L2CAP_Layer']}, {'name': 'RFCOMM_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFCOMM_Layer', 'L2CAP_Layer']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BT_STACK\n#define COFS_MODEL_BT_STACK\n\n\n#include \"cfm_bt_stack_global.h\"\n#include \"cfm_bt_stack_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_baseband_layer.h\"\n#include \"cfm_l2cap_layer.h\"\n#include \"cfm_obex_layer.h\"\n#include \"cfm_rfcomm_layer.h\"\n#include \"dt/cft_defbaseband_in.h\"\n#include \"dt/cft_defdatain_in.h\"\n#include \"dt/cft_defdataout_in.h\"\n#include \"dt/cft_defl2cap_in_in.h\"\n#include \"dt/cft_defl2cap_out_in.h\"\n#include \"dt/cft_defobex_in_in.h\"\n#include \"dt/cft_defobex_out_in.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n#include \"dt/cft_defreadwrite_in.h\"\n\nclass cfm_bt_stack : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefL2CAP_In> mq_L2CAP_In_t;\ntypedef cf_core::cf_message_queue<cft_DefL2CAP_Out> mq_L2CAP_Out_t;\ntypedef cf_core::cf_message_queue<cft_DefOBEX_In> mq_OBEX_In_t;\ntypedef cf_core::cf_message_queue<cft_DefOBEX_Out> mq_OBEX_Out_t;\ntypedef cf_core::cf_message_queue<cft_DefRFCOMM_In> mq_RFCOMM_In_t;\ntypedef cf_core::cf_message_queue<cft_DefRFCOMM_Out> mq_RFCOMM_Out_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_stack, cft_defbaseband> p_mq_BaseBand_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_stack, cft_defbaseband> p_mq_BaseBand_Out_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_stack, cft_defdatain> p_mq_DataIn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_stack, cft_defdataout> p_mq_DataOut_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_bt_stack, cft_defreadwrite> p_mq_ReadWrite_t;\ntypedef cf_core::cf_ev_initiator_socket<cfm_bt_stack> p_ev_WrOK_t;\ntypedef cf_core::cf_ev_initiator_socket<cfm_bt_stack> p_ev_startEv_t;\n\n/// constructor\ncfm_bt_stack(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_bt_stack(void);\n\np_mq_BaseBand_In_t p_mq_BaseBand_In;\np_mq_BaseBand_Out_t p_mq_BaseBand_Out;\np_mq_DataIn_t p_mq_DataIn;\np_mq_DataOut_t p_mq_DataOut;\np_mq_ReadWrite_t p_mq_ReadWrite;\np_ev_WrOK_t p_ev_WrOK;\np_ev_startEv_t p_ev_startEv;\n\ncfm_baseband_layer *BaseBand_Layer;\ncfm_l2cap_layer *L2CAP_Layer;\ncfm_obex_layer *OBEX_Layer;\ncfm_rfcomm_layer *RFCOMM_Layer;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_L2CAP_In_t mq_L2CAP_In;\nmq_L2CAP_Out_t mq_L2CAP_Out;\nmq_OBEX_In_t mq_OBEX_In;\nmq_OBEX_Out_t mq_OBEX_Out;\nmq_RFCOMM_In_t mq_RFCOMM_In;\nmq_RFCOMM_Out_t mq_RFCOMM_Out;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BT_Stack', 'type': 'cofluent:Function', 'models': [{'name': 'BaseBand_Layer', 'type': 'cofluent:Function'}, {'name': 'L2CAP_Layer', 'type': 'cofluent:Function'}, {'name': 'OBEX_Layer', 'type': 'cofluent:Function'}, {'name': 'RFCOMM_Layer', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['BaseBand_Layer']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['BaseBand_Layer']}, {'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataIn', 'connectTo': ['OBEX_Layer']}, {'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataOut', 'connectTo': ['OBEX_Layer']}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite', 'connectTo': ['OBEX_Layer']}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Layer']}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Layer']}], 'relations': [{'name': 'L2CAP_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefL2CAP_In', 'connectTo': ['BaseBand_Layer', 'L2CAP_Layer']}, {'name': 'L2CAP_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefL2CAP_Out', 'connectTo': ['BaseBand_Layer', 'L2CAP_Layer']}, {'name': 'OBEX_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_In', 'connectTo': ['OBEX_Layer', 'RFCOMM_Layer']}, {'name': 'OBEX_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_Out', 'connectTo': ['OBEX_Layer', 'RFCOMM_Layer']}, {'name': 'RFCOMM_In', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_In', 'connectTo': ['RFCOMM_Layer', 'L2CAP_Layer']}, {'name': 'RFCOMM_Out', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFCOMM_Layer', 'L2CAP_Layer']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_bt_stack\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_bt_stack.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BT_Stack definitions' algorithm generated code\n\n//End of 'BT_Stack definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_bt_stack ::cfm_bt_stack() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_L2CAP_In(\"L2CAP_In\"),mq_L2CAP_Out(\"L2CAP_Out\"),mq_OBEX_In(\"OBEX_In\"),mq_OBEX_Out(\"OBEX_Out\"),mq_RFCOMM_In(\"RFCOMM_In\"),mq_RFCOMM_Out(\"RFCOMM_Out\"),p_ev_WrOK(\"p_ev_WrOK\"),p_ev_startEv(\"p_ev_startEv\"),p_mq_BaseBand_In(\"p_mq_BaseBand_In\"),p_mq_BaseBand_Out(\"p_mq_BaseBand_Out\"),p_mq_DataIn(\"p_mq_DataIn\"),p_mq_DataOut(\"p_mq_DataOut\"),p_mq_ReadWrite(\"p_mq_ReadWrite\"){\ncf_function_container::init();\n//instantiation of models\nBaseBand_Layer = new cfm_baseband_layer(\"BaseBand_Layer\");\nL2CAP_Layer = new cfm_l2cap_layer(\"L2CAP_Layer\");\nOBEX_Layer = new cfm_obex_layer(\"OBEX_Layer\");\nRFCOMM_Layer = new cfm_rfcomm_layer(\"RFCOMM_Layer\");\n//connections\n//model connect to relation\nBaseBand_Layer->p_mq_L2CAP_In(mq_L2CAP_In.p_target_socket);\nBaseBand_Layer->p_mq_L2CAP_Out(mq_L2CAP_Out.p_target_socket);\n//model connect to port\nBaseBand_Layer->p_mq_BaseBand_In(p_mq_BaseBand_In);\nBaseBand_Layer->p_mq_BaseBand_Out(p_mq_BaseBand_Out);\n//model connect to relation\nL2CAP_Layer->p_mq_L2CAP_In(mq_L2CAP_In.p_target_socket);\nL2CAP_Layer->p_mq_L2CAP_Out(mq_L2CAP_Out.p_target_socket);\nL2CAP_Layer->p_mq_RFCOMM_In(mq_RFCOMM_In.p_target_socket);\nL2CAP_Layer->p_mq_RFCOMM_Out(mq_RFCOMM_Out.p_target_socket);\n//model connect to relation\nOBEX_Layer->p_mq_OBEX_In(mq_OBEX_In.p_target_socket);\nOBEX_Layer->p_mq_OBEX_Out(mq_OBEX_Out.p_target_socket);\n//model connect to port\nOBEX_Layer->p_mq_DataIn(p_mq_DataIn);\nOBEX_Layer->p_mq_DataOut(p_mq_DataOut);\nOBEX_Layer->p_mq_ReadWrite(p_mq_ReadWrite);\nOBEX_Layer->p_mq_WrOK(p_mq_WrOK);\nOBEX_Layer->p_mq_startEv(p_mq_startEv);\n//model connect to relation\nRFCOMM_Layer->p_mq_OBEX_In(mq_OBEX_In.p_target_socket);\nRFCOMM_Layer->p_mq_OBEX_Out(mq_OBEX_Out.p_target_socket);\nRFCOMM_Layer->p_mq_RFCOMM_In(mq_RFCOMM_In.p_target_socket);\nRFCOMM_Layer->p_mq_RFCOMM_Out(mq_RFCOMM_Out.p_target_socket);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_bt_stack::~cfm_bt_stack(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BT_Stack destructor' algorithm generated code\n\n//End of 'BT_Stack destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BaseBand_Layer;\ndelete L2CAP_Layer;\ndelete OBEX_Layer;\ndelete RFCOMM_Layer;\n}\n\n\n//@{\nvoid cfm_bt_stack::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_bt_stack::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OBEX_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'OBEX_Receive', 'type': 'cofluent:Function'}, {'name': 'OBEX_Send', 'type': 'cofluent:Function'}, {'name': 'OB_Out', 'type': 'cofluent:Function'}], 'ports': [{'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataIn', 'connectTo': ['OBEX_Receive']}, {'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataOut', 'connectTo': ['OBEX_Send']}, {'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_In', 'connectTo': ['OBEX_Receive']}, {'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out', 'connectTo': ['OB_Out']}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite', 'connectTo': ['OBEX_Send', 'OBEX_Receive']}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Receive']}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Send']}], 'relations': [{'name': 'OB_Out1', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_Out', 'connectTo': ['OBEX_Receive', 'OB_Out']}, {'name': 'OB_Out2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_Out', 'connectTo': ['OBEX_Send', 'OB_Out']}, {'name': 'continueEv', 'type': 'cofluent:Event', 'connectTo': ['OBEX_Send', 'OBEX_Receive']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OBEX_LAYER\n#define COFS_MODEL_OBEX_LAYER\n\n\n#include \"cfm_obex_layer_global.h\"\n#include \"cfm_obex_layer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_obex_receive.h\"\n#include \"cfm_obex_send.h\"\n#include \"cfm_ob_out.h\"\n#include \"dt/cft_defdatain_in.h\"\n#include \"dt/cft_defdataout_in.h\"\n#include \"dt/cft_defobex_in_in.h\"\n#include \"dt/cft_defobex_out_in.h\"\n#include \"dt/cft_defreadwrite_in.h\"\n\nclass cfm_obex_layer : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefOBEX_Out> mq_OB_Out1_t;\ntypedef cf_core::cf_message_queue<cft_DefOBEX_Out> mq_OB_Out2_t;\ntypedef cf_core::cf_event ev_continueEv_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_obex_layer, cft_defdatain> p_mq_DataIn_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_obex_layer, cft_defdataout> p_mq_DataOut_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_obex_layer, cft_defobex_in> p_mq_OBEX_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_obex_layer, cft_defobex_out> p_mq_OBEX_Out_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_obex_layer, cft_defreadwrite> p_mq_ReadWrite_t;\ntypedef cf_core::cf_ev_initiator_socket<cfm_obex_layer> p_ev_WrOK_t;\ntypedef cf_core::cf_ev_initiator_socket<cfm_obex_layer> p_ev_startEv_t;\n\n/// constructor\ncfm_obex_layer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_obex_layer(void);\n\np_mq_DataIn_t p_mq_DataIn;\np_mq_DataOut_t p_mq_DataOut;\np_mq_OBEX_In_t p_mq_OBEX_In;\np_mq_OBEX_Out_t p_mq_OBEX_Out;\np_mq_ReadWrite_t p_mq_ReadWrite;\np_ev_WrOK_t p_ev_WrOK;\np_ev_startEv_t p_ev_startEv;\n\ncfm_obex_receive *OBEX_Receive;\ncfm_obex_send *OBEX_Send;\ncfm_ob_out *OB_Out;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_OB_Out1_t mq_OB_Out1;\nmq_OB_Out2_t mq_OB_Out2;\nev_continueEv_t ev_continueEv;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OBEX_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'OBEX_Receive', 'type': 'cofluent:Function'}, {'name': 'OBEX_Send', 'type': 'cofluent:Function'}, {'name': 'OB_Out', 'type': 'cofluent:Function'}], 'ports': [{'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataIn', 'connectTo': ['OBEX_Receive']}, {'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataOut', 'connectTo': ['OBEX_Send']}, {'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_In', 'connectTo': ['OBEX_Receive']}, {'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out', 'connectTo': ['OB_Out']}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite', 'connectTo': ['OBEX_Send', 'OBEX_Receive']}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Receive']}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN', 'connectTo': ['OBEX_Send']}], 'relations': [{'name': 'OB_Out1', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_Out', 'connectTo': ['OBEX_Receive', 'OB_Out']}, {'name': 'OB_Out2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefOBEX_Out', 'connectTo': ['OBEX_Send', 'OB_Out']}, {'name': 'continueEv', 'type': 'cofluent:Event', 'connectTo': ['OBEX_Send', 'OBEX_Receive']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_obex_layer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_obex_layer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OBEX_Layer definitions' algorithm generated code\n\n//End of 'OBEX_Layer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_obex_layer ::cfm_obex_layer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),ev_continueEv(\"continueEv\"),mq_OB_Out1(\"OB_Out1\"),mq_OB_Out2(\"OB_Out2\"),p_ev_WrOK(\"p_ev_WrOK\"),p_ev_startEv(\"p_ev_startEv\"),p_mq_DataIn(\"p_mq_DataIn\"),p_mq_DataOut(\"p_mq_DataOut\"),p_mq_OBEX_In(\"p_mq_OBEX_In\"),p_mq_OBEX_Out(\"p_mq_OBEX_Out\"),p_mq_ReadWrite(\"p_mq_ReadWrite\"){\ncf_function_container::init();\n//instantiation of models\nOBEX_Receive = new cfm_obex_receive(\"OBEX_Receive\");\nOBEX_Send = new cfm_obex_send(\"OBEX_Send\");\nOB_Out = new cfm_ob_out(\"OB_Out\");\n//connections\n//model connect to relation\nOBEX_Receive->p_mq_OB_Out1(mq_OB_Out1.p_target_socket);\nOBEX_Receive->p_ev_continueEv(ev_continueEv.p_target_socket);\n//model connect to port\nOBEX_Receive->p_mq_DataIn(p_mq_DataIn);\nOBEX_Receive->p_mq_OBEX_In(p_mq_OBEX_In);\nOBEX_Receive->p_mq_ReadWrite(p_mq_ReadWrite);\nOBEX_Receive->p_mq_WrOK(p_mq_WrOK);\n//model connect to relation\nOBEX_Send->p_mq_OB_Out2(mq_OB_Out2.p_target_socket);\nOBEX_Send->p_ev_continueEv(ev_continueEv.p_target_socket);\n//model connect to port\nOBEX_Send->p_mq_DataOut(p_mq_DataOut);\nOBEX_Send->p_mq_ReadWrite(p_mq_ReadWrite);\nOBEX_Send->p_mq_startEv(p_mq_startEv);\n//model connect to relation\nOB_Out->p_mq_OB_Out1(mq_OB_Out1.p_target_socket);\nOB_Out->p_mq_OB_Out2(mq_OB_Out2.p_target_socket);\n//model connect to port\nOB_Out->p_mq_OBEX_Out(p_mq_OBEX_Out);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_obex_layer::~cfm_obex_layer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OBEX_Layer destructor' algorithm generated code\n\n//End of 'OBEX_Layer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete OBEX_Receive;\ndelete OBEX_Send;\ndelete OB_Out;\n}\n\n\n//@{\nvoid cfm_obex_layer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_obex_layer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RFCOMM_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'CreditsOrData', 'type': 'cofluent:Function'}, {'name': 'RFCOMM_Receive', 'type': 'cofluent:Function'}, {'name': 'RFCOMM_Send', 'type': 'cofluent:Function'}, {'name': 'RFC_Out', 'type': 'cofluent:Function'}], 'ports': [{'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_In', 'connectTo': ['RFCOMM_Receive']}, {'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out', 'connectTo': ['RFCOMM_Send']}, {'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In', 'connectTo': ['CreditsOrData']}, {'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFC_Out']}], 'relations': [{'name': 'RFC_Cdts', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_In', 'connectTo': ['RFCOMM_Send', 'CreditsOrData']}, {'name': 'RFC_Data', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_In', 'connectTo': ['RFCOMM_Receive', 'CreditsOrData']}, {'name': 'RFC_Out1', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFCOMM_Receive', 'RFC_Out']}, {'name': 'RFC_Out2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFCOMM_Send', 'RFC_Out']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RFCOMM_LAYER\n#define COFS_MODEL_RFCOMM_LAYER\n\n\n#include \"cfm_rfcomm_layer_global.h\"\n#include \"cfm_rfcomm_layer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_creditsordata.h\"\n#include \"cfm_rfcomm_receive.h\"\n#include \"cfm_rfcomm_send.h\"\n#include \"cfm_rfc_out.h\"\n#include \"dt/cft_defobex_in_in.h\"\n#include \"dt/cft_defobex_out_in.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n\nclass cfm_rfcomm_layer : public cf_core::cf_function {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefRFCOMM_In> mq_RFC_Cdts_t;\ntypedef cf_core::cf_message_queue<cft_DefRFCOMM_In> mq_RFC_Data_t;\ntypedef cf_core::cf_message_queue<cft_DefRFCOMM_Out> mq_RFC_Out1_t;\ntypedef cf_core::cf_message_queue<cft_DefRFCOMM_Out> mq_RFC_Out2_t;\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_rfcomm_layer, cft_defobex_in> p_mq_OBEX_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_rfcomm_layer, cft_defobex_out> p_mq_OBEX_Out_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_rfcomm_layer, cft_defrfcomm_in> p_mq_RFCOMM_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_rfcomm_layer, cft_defrfcomm_out> p_mq_RFCOMM_Out_t;\n\n/// constructor\ncfm_rfcomm_layer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rfcomm_layer(void);\n\np_mq_OBEX_In_t p_mq_OBEX_In;\np_mq_OBEX_Out_t p_mq_OBEX_Out;\np_mq_RFCOMM_In_t p_mq_RFCOMM_In;\np_mq_RFCOMM_Out_t p_mq_RFCOMM_Out;\n\ncfm_creditsordata *CreditsOrData;\ncfm_rfcomm_receive *RFCOMM_Receive;\ncfm_rfcomm_send *RFCOMM_Send;\ncfm_rfc_out *RFC_Out;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_RFC_Cdts_t mq_RFC_Cdts;\nmq_RFC_Data_t mq_RFC_Data;\nmq_RFC_Out1_t mq_RFC_Out1;\nmq_RFC_Out2_t mq_RFC_Out2;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RFCOMM_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'CreditsOrData', 'type': 'cofluent:Function'}, {'name': 'RFCOMM_Receive', 'type': 'cofluent:Function'}, {'name': 'RFCOMM_Send', 'type': 'cofluent:Function'}, {'name': 'RFC_Out', 'type': 'cofluent:Function'}], 'ports': [{'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_In', 'connectTo': ['RFCOMM_Receive']}, {'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out', 'connectTo': ['RFCOMM_Send']}, {'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In', 'connectTo': ['CreditsOrData']}, {'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFC_Out']}], 'relations': [{'name': 'RFC_Cdts', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_In', 'connectTo': ['RFCOMM_Send', 'CreditsOrData']}, {'name': 'RFC_Data', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_In', 'connectTo': ['RFCOMM_Receive', 'CreditsOrData']}, {'name': 'RFC_Out1', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFCOMM_Receive', 'RFC_Out']}, {'name': 'RFC_Out2', 'type': 'cofluent:MessageQueue', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['RFCOMM_Send', 'RFC_Out']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rfcomm_layer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rfcomm_layer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFCOMM_Layer definitions' algorithm generated code\n\n//End of 'RFCOMM_Layer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rfcomm_layer ::cfm_rfcomm_layer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),mq_RFC_Cdts(\"RFC_Cdts\"),mq_RFC_Data(\"RFC_Data\"),mq_RFC_Out1(\"RFC_Out1\"),mq_RFC_Out2(\"RFC_Out2\"),p_mq_OBEX_In(\"p_mq_OBEX_In\"),p_mq_OBEX_Out(\"p_mq_OBEX_Out\"),p_mq_RFCOMM_In(\"p_mq_RFCOMM_In\"),p_mq_RFCOMM_Out(\"p_mq_RFCOMM_Out\"){\ncf_function_container::init();\n//instantiation of models\nCreditsOrData = new cfm_creditsordata(\"CreditsOrData\");\nRFCOMM_Receive = new cfm_rfcomm_receive(\"RFCOMM_Receive\");\nRFCOMM_Send = new cfm_rfcomm_send(\"RFCOMM_Send\");\nRFC_Out = new cfm_rfc_out(\"RFC_Out\");\n//connections\n//model connect to relation\nCreditsOrData->p_mq_RFC_Cdts(mq_RFC_Cdts.p_target_socket);\nCreditsOrData->p_mq_RFC_Data(mq_RFC_Data.p_target_socket);\n//model connect to port\nCreditsOrData->p_mq_RFCOMM_In(p_mq_RFCOMM_In);\n//model connect to relation\nRFCOMM_Receive->p_mq_RFC_Data(mq_RFC_Data.p_target_socket);\nRFCOMM_Receive->p_mq_RFC_Out1(mq_RFC_Out1.p_target_socket);\n//model connect to port\nRFCOMM_Receive->p_mq_OBEX_In(p_mq_OBEX_In);\n//model connect to relation\nRFCOMM_Send->p_mq_RFC_Cdts(mq_RFC_Cdts.p_target_socket);\nRFCOMM_Send->p_mq_RFC_Out2(mq_RFC_Out2.p_target_socket);\n//model connect to port\nRFCOMM_Send->p_mq_OBEX_Out(p_mq_OBEX_Out);\n//model connect to relation\nRFC_Out->p_mq_RFC_Out1(mq_RFC_Out1.p_target_socket);\nRFC_Out->p_mq_RFC_Out2(mq_RFC_Out2.p_target_socket);\n//model connect to port\nRFC_Out->p_mq_RFCOMM_Out(p_mq_RFCOMM_Out);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rfcomm_layer::~cfm_rfcomm_layer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFCOMM_Layer destructor' algorithm generated code\n\n//End of 'RFCOMM_Layer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete CreditsOrData;\ndelete RFCOMM_Receive;\ndelete RFCOMM_Send;\ndelete RFC_Out;\n}\n\n\n//@{\nvoid cfm_rfcomm_layer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rfcomm_layer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BaseBand_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'BB_Receive', 'type': 'cofluent:Function'}, {'name': 'BB_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['BB_Receive']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['BB_Send']}, {'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_In', 'connectTo': ['BB_Receive']}, {'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_Out', 'connectTo': ['BB_Send']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BASEBAND_LAYER\n#define COFS_MODEL_BASEBAND_LAYER\n\n\n#include \"cfm_baseband_layer_global.h\"\n#include \"cfm_baseband_layer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_bb_receive.h\"\n#include \"cfm_bb_send.h\"\n#include \"dt/cft_defbaseband_in.h\"\n#include \"dt/cft_defl2cap_in_in.h\"\n#include \"dt/cft_defl2cap_out_in.h\"\n\nclass cfm_baseband_layer : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_baseband_layer, cft_defbaseband> p_mq_BaseBand_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_baseband_layer, cft_defbaseband> p_mq_BaseBand_Out_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_baseband_layer, cft_defl2cap_in> p_mq_L2CAP_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_baseband_layer, cft_defl2cap_out> p_mq_L2CAP_Out_t;\n\n/// constructor\ncfm_baseband_layer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_baseband_layer(void);\n\np_mq_BaseBand_In_t p_mq_BaseBand_In;\np_mq_BaseBand_Out_t p_mq_BaseBand_Out;\np_mq_L2CAP_In_t p_mq_L2CAP_In;\np_mq_L2CAP_Out_t p_mq_L2CAP_Out;\n\ncfm_bb_receive *BB_Receive;\ncfm_bb_send *BB_Send;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BaseBand_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'BB_Receive', 'type': 'cofluent:Function'}, {'name': 'BB_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand', 'connectTo': ['BB_Receive']}, {'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand', 'connectTo': ['BB_Send']}, {'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_In', 'connectTo': ['BB_Receive']}, {'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_Out', 'connectTo': ['BB_Send']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_baseband_layer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_baseband_layer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BaseBand_Layer definitions' algorithm generated code\n\n//End of 'BaseBand_Layer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_baseband_layer ::cfm_baseband_layer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_BaseBand_In(\"p_mq_BaseBand_In\"),p_mq_BaseBand_Out(\"p_mq_BaseBand_Out\"),p_mq_L2CAP_In(\"p_mq_L2CAP_In\"),p_mq_L2CAP_Out(\"p_mq_L2CAP_Out\"){\ncf_function_container::init();\n//instantiation of models\nBB_Receive = new cfm_bb_receive(\"BB_Receive\");\nBB_Send = new cfm_bb_send(\"BB_Send\");\n//connections\n//model connect to port\nBB_Receive->p_mq_BaseBand_In(p_mq_BaseBand_In);\nBB_Receive->p_mq_L2CAP_In(p_mq_L2CAP_In);\n//model connect to port\nBB_Send->p_mq_BaseBand_Out(p_mq_BaseBand_Out);\nBB_Send->p_mq_L2CAP_Out(p_mq_L2CAP_Out);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_baseband_layer::~cfm_baseband_layer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BaseBand_Layer destructor' algorithm generated code\n\n//End of 'BaseBand_Layer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete BB_Receive;\ndelete BB_Send;\n}\n\n\n//@{\nvoid cfm_baseband_layer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_baseband_layer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'L2CAP_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'L2CAP_Receive', 'type': 'cofluent:Function'}, {'name': 'L2CAP_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_In', 'connectTo': ['L2CAP_Receive']}, {'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_Out', 'connectTo': ['L2CAP_Send']}, {'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In', 'connectTo': ['L2CAP_Receive']}, {'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['L2CAP_Send']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_L2CAP_LAYER\n#define COFS_MODEL_L2CAP_LAYER\n\n\n#include \"cfm_l2cap_layer_global.h\"\n#include \"cfm_l2cap_layer_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_l2cap_receive.h\"\n#include \"cfm_l2cap_send.h\"\n#include \"dt/cft_defl2cap_in_in.h\"\n#include \"dt/cft_defl2cap_out_in.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n\nclass cfm_l2cap_layer : public cf_core::cf_function {\npublic:\n\ntypedef cf_core::cf_mq_initiator_socket<cfm_l2cap_layer, cft_defl2cap_in> p_mq_L2CAP_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_l2cap_layer, cft_defl2cap_out> p_mq_L2CAP_Out_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_l2cap_layer, cft_defrfcomm_in> p_mq_RFCOMM_In_t;\ntypedef cf_core::cf_mq_initiator_socket<cfm_l2cap_layer, cft_defrfcomm_out> p_mq_RFCOMM_Out_t;\n\n/// constructor\ncfm_l2cap_layer(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_l2cap_layer(void);\n\np_mq_L2CAP_In_t p_mq_L2CAP_In;\np_mq_L2CAP_Out_t p_mq_L2CAP_Out;\np_mq_RFCOMM_In_t p_mq_RFCOMM_In;\np_mq_RFCOMM_Out_t p_mq_RFCOMM_Out;\n\ncfm_l2cap_receive *L2CAP_Receive;\ncfm_l2cap_send *L2CAP_Send;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'L2CAP_Layer', 'type': 'cofluent:Function', 'models': [{'name': 'L2CAP_Receive', 'type': 'cofluent:Function'}, {'name': 'L2CAP_Send', 'type': 'cofluent:Function'}], 'ports': [{'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_In', 'connectTo': ['L2CAP_Receive']}, {'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_Out', 'connectTo': ['L2CAP_Send']}, {'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In', 'connectTo': ['L2CAP_Receive']}, {'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out', 'connectTo': ['L2CAP_Send']}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_l2cap_layer\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_l2cap_layer.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'L2CAP_Layer definitions' algorithm generated code\n\n//End of 'L2CAP_Layer definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_l2cap_layer ::cfm_l2cap_layer() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(),p_mq_L2CAP_In(\"p_mq_L2CAP_In\"),p_mq_L2CAP_Out(\"p_mq_L2CAP_Out\"),p_mq_RFCOMM_In(\"p_mq_RFCOMM_In\"),p_mq_RFCOMM_Out(\"p_mq_RFCOMM_Out\"){\ncf_function_container::init();\n//instantiation of models\nL2CAP_Receive = new cfm_l2cap_receive(\"L2CAP_Receive\");\nL2CAP_Send = new cfm_l2cap_send(\"L2CAP_Send\");\n//connections\n//model connect to port\nL2CAP_Receive->p_mq_L2CAP_In(p_mq_L2CAP_In);\nL2CAP_Receive->p_mq_RFCOMM_In(p_mq_RFCOMM_In);\n//model connect to port\nL2CAP_Send->p_mq_L2CAP_Out(p_mq_L2CAP_Out);\nL2CAP_Send->p_mq_RFCOMM_Out(p_mq_RFCOMM_Out);\ncf_function_container::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_l2cap_layer::~cfm_l2cap_layer(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'L2CAP_Layer destructor' algorithm generated code\n\n//End of 'L2CAP_Layer destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete L2CAP_Receive;\ndelete L2CAP_Send;\n}\n\n\n//@{\nvoid cfm_l2cap_layer::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_l2cap_layer::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OBEX_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataOut'}, {'name': 'OB_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out'}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite'}, {'name': 'continueEv', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OBEX_SEND\n#define COFS_MODEL_OBEX_SEND\n\n\n#include \"cfm_obex_send_global.h\"\n#include \"cfm_obex_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdataout_in.h\"\n#include \"dt/cft_defobex_out_in.h\"\n#include \"dt/cft_defreadwrite_in.h\"\n\nclass cfm_obex_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_obex_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_obex_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OBEX_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'DataOut', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefDataOut'}, {'name': 'OB_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out'}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite'}, {'name': 'continueEv', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'startEv', 'type': 'EVENT', 'direction': 'IN'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_obex_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_obex_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OBEX_Send definitions' algorithm generated code\n\n//End of 'OBEX_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_obex_send ::cfm_obex_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_obex_send::~cfm_obex_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OBEX_Send destructor' algorithm generated code\n\n//End of 'OBEX_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_obex_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_obex_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OBEX_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataIn'}, {'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_In'}, {'name': 'OB_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out'}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite'}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'continueEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OBEX_RECEIVE\n#define COFS_MODEL_OBEX_RECEIVE\n\n\n#include \"cfm_obex_receive_global.h\"\n#include \"cfm_obex_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defdatain_in.h\"\n#include \"dt/cft_defobex_in_in.h\"\n#include \"dt/cft_defobex_out_in.h\"\n#include \"dt/cft_defreadwrite_in.h\"\n\nclass cfm_obex_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_obex_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_obex_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OBEX_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'DataIn', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefDataIn'}, {'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_In'}, {'name': 'OB_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out'}, {'name': 'ReadWrite', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefReadWrite'}, {'name': 'WrOK', 'type': 'EVENT', 'direction': 'IN'}, {'name': 'continueEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_obex_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_obex_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OBEX_Receive definitions' algorithm generated code\n\n//End of 'OBEX_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_obex_receive ::cfm_obex_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_obex_receive::~cfm_obex_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OBEX_Receive destructor' algorithm generated code\n\n//End of 'OBEX_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_obex_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_obex_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OB_Out', 'type': 'cofluent:Function', 'ports': [{'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out'}, {'name': 'OB_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out'}, {'name': 'OB_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OB_OUT\n#define COFS_MODEL_OB_OUT\n\n\n#include \"cfm_ob_out_global.h\"\n#include \"cfm_ob_out_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defobex_out_in.h\"\n\nclass cfm_ob_out : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_ob_out(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_ob_out(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OB_Out', 'type': 'cofluent:Function', 'ports': [{'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_Out'}, {'name': 'OB_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out'}, {'name': 'OB_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_ob_out\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_ob_out.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OB_Out definitions' algorithm generated code\n\n//End of 'OB_Out definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_ob_out ::cfm_ob_out() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_ob_out::~cfm_ob_out(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OB_Out destructor' algorithm generated code\n\n//End of 'OB_Out destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_ob_out::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_ob_out::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RFCOMM_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_In'}, {'name': 'RFC_Data', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RFCOMM_RECEIVE\n#define COFS_MODEL_RFCOMM_RECEIVE\n\n\n#include \"cfm_rfcomm_receive_global.h\"\n#include \"cfm_rfcomm_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defobex_in_in.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n\nclass cfm_rfcomm_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_rfcomm_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rfcomm_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RFCOMM_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'OBEX_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefOBEX_In'}, {'name': 'RFC_Data', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rfcomm_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rfcomm_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFCOMM_Receive definitions' algorithm generated code\n\n//End of 'RFCOMM_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rfcomm_receive ::cfm_rfcomm_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rfcomm_receive::~cfm_rfcomm_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFCOMM_Receive destructor' algorithm generated code\n\n//End of 'RFCOMM_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_rfcomm_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rfcomm_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RFCOMM_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out'}, {'name': 'RFC_Cdts', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RFCOMM_SEND\n#define COFS_MODEL_RFCOMM_SEND\n\n\n#include \"cfm_rfcomm_send_global.h\"\n#include \"cfm_rfcomm_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defobex_out_in.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n\nclass cfm_rfcomm_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_rfcomm_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rfcomm_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RFCOMM_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'OBEX_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefOBEX_Out'}, {'name': 'RFC_Cdts', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rfcomm_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rfcomm_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFCOMM_Send definitions' algorithm generated code\n\n//End of 'RFCOMM_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rfcomm_send ::cfm_rfcomm_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rfcomm_send::~cfm_rfcomm_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFCOMM_Send destructor' algorithm generated code\n\n//End of 'RFCOMM_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_rfcomm_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rfcomm_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'CreditsOrData', 'type': 'cofluent:Function', 'ports': [{'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Cdts', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Data', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_CREDITSORDATA\n#define COFS_MODEL_CREDITSORDATA\n\n\n#include \"cfm_creditsordata_global.h\"\n#include \"cfm_creditsordata_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n\nclass cfm_creditsordata : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_creditsordata(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_creditsordata(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'CreditsOrData', 'type': 'cofluent:Function', 'ports': [{'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Cdts', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In'}, {'name': 'RFC_Data', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_creditsordata\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_creditsordata.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CreditsOrData definitions' algorithm generated code\n\n//End of 'CreditsOrData definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_creditsordata ::cfm_creditsordata() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_creditsordata::~cfm_creditsordata(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'CreditsOrData destructor' algorithm generated code\n\n//End of 'CreditsOrData destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_creditsordata::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_creditsordata::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'RFC_Out', 'type': 'cofluent:Function', 'ports': [{'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out'}, {'name': 'RFC_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out'}, {'name': 'RFC_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_RFC_OUT\n#define COFS_MODEL_RFC_OUT\n\n\n#include \"cfm_rfc_out_global.h\"\n#include \"cfm_rfc_out_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n\nclass cfm_rfc_out : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_rfc_out(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_rfc_out(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'RFC_Out', 'type': 'cofluent:Function', 'ports': [{'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_Out'}, {'name': 'RFC_Out1', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out'}, {'name': 'RFC_Out2', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_rfc_out\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_rfc_out.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFC_Out definitions' algorithm generated code\n\n//End of 'RFC_Out definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_rfc_out ::cfm_rfc_out() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_rfc_out::~cfm_rfc_out(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'RFC_Out destructor' algorithm generated code\n\n//End of 'RFC_Out destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_rfc_out::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_rfc_out::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BB_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand'}, {'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_In'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BB_RECEIVE\n#define COFS_MODEL_BB_RECEIVE\n\n\n#include \"cfm_bb_receive_global.h\"\n#include \"cfm_bb_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbaseband_in.h\"\n#include \"dt/cft_defl2cap_in_in.h\"\n\nclass cfm_bb_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_bb_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_bb_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BB_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefBaseBand'}, {'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_In'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_bb_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_bb_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BB_Receive definitions' algorithm generated code\n\n//End of 'BB_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_bb_receive ::cfm_bb_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_bb_receive::~cfm_bb_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BB_Receive destructor' algorithm generated code\n\n//End of 'BB_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_bb_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_bb_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'BB_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand'}, {'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_BB_SEND\n#define COFS_MODEL_BB_SEND\n\n\n#include \"cfm_bb_send_global.h\"\n#include \"cfm_bb_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defbaseband_in.h\"\n#include \"dt/cft_defl2cap_out_in.h\"\n\nclass cfm_bb_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_bb_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_bb_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'BB_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'BaseBand_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefBaseBand'}, {'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_bb_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_bb_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BB_Send definitions' algorithm generated code\n\n//End of 'BB_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_bb_send ::cfm_bb_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_bb_send::~cfm_bb_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'BB_Send destructor' algorithm generated code\n\n//End of 'BB_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_bb_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_bb_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'L2CAP_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_In'}, {'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_L2CAP_RECEIVE\n#define COFS_MODEL_L2CAP_RECEIVE\n\n\n#include \"cfm_l2cap_receive_global.h\"\n#include \"cfm_l2cap_receive_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defl2cap_in_in.h\"\n#include \"dt/cft_defrfcomm_in_in.h\"\n\nclass cfm_l2cap_receive : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_l2cap_receive(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_l2cap_receive(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'L2CAP_Receive', 'type': 'cofluent:Function', 'ports': [{'name': 'L2CAP_In', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefL2CAP_In'}, {'name': 'RFCOMM_In', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefRFCOMM_In'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_l2cap_receive\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_l2cap_receive.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'L2CAP_Receive definitions' algorithm generated code\n\n//End of 'L2CAP_Receive definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_l2cap_receive ::cfm_l2cap_receive() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_l2cap_receive::~cfm_l2cap_receive(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'L2CAP_Receive destructor' algorithm generated code\n\n//End of 'L2CAP_Receive destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_l2cap_receive::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_l2cap_receive::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'L2CAP_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_Out'}, {'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_L2CAP_SEND\n#define COFS_MODEL_L2CAP_SEND\n\n\n#include \"cfm_l2cap_send_global.h\"\n#include \"cfm_l2cap_send_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"dt/cft_defl2cap_out_in.h\"\n#include \"dt/cft_defrfcomm_out_in.h\"\n\nclass cfm_l2cap_send : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_l2cap_send(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_l2cap_send(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'L2CAP_Send', 'type': 'cofluent:Function', 'ports': [{'name': 'L2CAP_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'OUT', 'dataType': 'DefL2CAP_Out'}, {'name': 'RFCOMM_Out', 'type': 'MESSAGE_QUEUE', 'direction': 'IN', 'dataType': 'DefRFCOMM_Out'}], 'globalName': 'Bluetooth_IPs'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_l2cap_send\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of Bluetooth_IPs generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_l2cap_send.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'L2CAP_Send definitions' algorithm generated code\n\n//End of 'L2CAP_Send definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_l2cap_send ::cfm_l2cap_send() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_l2cap_send::~cfm_l2cap_send(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'L2CAP_Send destructor' algorithm generated code\n\n//End of 'L2CAP_Send destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_l2cap_send::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_l2cap_send::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'OPP_UseCase', 'models': [{'name': 'Master', 'type': 'cofluent:Function'}, {'name': 'Slave', 'type': 'cofluent:Function'}, {'name': 'StartFunc', 'type': 'cofluent:Function'}, {'name': 'UnusedFunc', 'type': 'cofluent:Function'}], 'relations': [{'name': 'M2S', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand'}, {'name': 'S2M', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand'}, {'name': 'StartEv', 'type': 'cofluent:Event', 'connectTo': ['StartFunc']}, {'name': 'UnusedEv', 'type': 'cofluent:Event', 'connectTo': ['UnusedFunc']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_OPP_USECASE\n#define COFS_MODEL_OPP_USECASE\n\n\n#include \"cfm_opp_usecase_global.h\"\n#include \"cfm_opp_usecase_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n#include \"cfm_master.h\"\n#include \"cfm_slave.h\"\n#include \"cfm_startfunc.h\"\n#include \"cfm_unusedfunc.h\"\n#include \"dt/cft_defbaseband_in.h\"\n\nclass cfm_opp_usecase : public cf_core::cf_application {\npublic:\ntypedef cf_core::cf_message_queue<cft_DefBaseBand> mq_M2S_t;\ntypedef cf_core::cf_message_queue<cft_DefBaseBand> mq_S2M_t;\ntypedef cf_core::cf_event ev_StartEv_t;\ntypedef cf_core::cf_event ev_UnusedEv_t;\n\n/// constructor\ncfm_opp_usecase(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_opp_usecase(void);\n\ncfm_master *Master;\ncfm_slave *Slave;\ncfm_startfunc *StartFunc;\ncfm_unusedfunc *UnusedFunc;\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\nmq_M2S_t mq_M2S;\nmq_S2M_t mq_S2M;\nev_StartEv_t ev_StartEv;\nev_UnusedEv_t ev_UnusedEv;\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'OPP_UseCase', 'models': [{'name': 'Master', 'type': 'cofluent:Function'}, {'name': 'Slave', 'type': 'cofluent:Function'}, {'name': 'StartFunc', 'type': 'cofluent:Function'}, {'name': 'UnusedFunc', 'type': 'cofluent:Function'}], 'relations': [{'name': 'M2S', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand'}, {'name': 'S2M', 'type': 'cofluent:MessageQueue', 'dataType': 'DefBaseBand'}, {'name': 'StartEv', 'type': 'cofluent:Event', 'connectTo': ['StartFunc']}, {'name': 'UnusedEv', 'type': 'cofluent:Event', 'connectTo': ['UnusedFunc']}], 'type': 'cofluent:Application'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_opp_usecase\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_opp_usecase.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OPP_UseCase definitions' algorithm generated code\n\n//End of 'OPP_UseCase definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_opp_usecase ::cfm_opp_usecase() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_application(),ev_StartEv(\"StartEv\"),ev_UnusedEv(\"UnusedEv\"),mq_M2S(\"M2S\"),mq_S2M(\"S2M\"){\ncf_application::init();\n//instantiation of models\nMaster = new cfm_master(\"Master\");\nSlave = new cfm_slave(\"Slave\");\nStartFunc = new cfm_startfunc(\"StartFunc\");\nUnusedFunc = new cfm_unusedfunc(\"UnusedFunc\");\n//connections\n//model connect to relation\nStartFunc->p_ev_StartEv(ev_StartEv.p_target_socket);\n//model connect to relation\nUnusedFunc->p_ev_UnusedEv(ev_UnusedEv.p_target_socket);\ncf_application::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_opp_usecase::~cfm_opp_usecase(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'OPP_UseCase destructor' algorithm generated code\n\n//End of 'OPP_UseCase destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n//deconstruct for models\ndelete Master;\ndelete Slave;\ndelete StartFunc;\ndelete UnusedFunc;\n}\n\n\n//@{\nvoid cfm_opp_usecase::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_opp_usecase::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'StartFunc', 'type': 'cofluent:Function', 'ports': [{'name': 'StartEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'OPP_UseCase'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_STARTFUNC\n#define COFS_MODEL_STARTFUNC\n\n\n#include \"cfm_startfunc_global.h\"\n#include \"cfm_startfunc_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_startfunc : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_startfunc(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_startfunc(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'StartFunc', 'type': 'cofluent:Function', 'ports': [{'name': 'StartEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'OPP_UseCase'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_startfunc\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_startfunc.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'StartFunc definitions' algorithm generated code\n\n//End of 'StartFunc definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_startfunc ::cfm_startfunc() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_startfunc::~cfm_startfunc(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'StartFunc destructor' algorithm generated code\n\n//End of 'StartFunc destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_startfunc::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_startfunc::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class declarations code of the following CoFLuent sturcture. The output is in c++ header file format.\n{'name': 'UnusedFunc', 'type': 'cofluent:Function', 'ports': [{'name': 'UnusedEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'OPP_UseCase'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*!\n * \\class cfm_baseband_layer\n * \brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n * \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n */\n#ifndef COFS_MODEL_UNUSEDFUNC\n#define COFS_MODEL_UNUSEDFUNC\n\n\n#include \"cfm_unusedfunc_global.h\"\n#include \"cfm_unusedfunc_global_types.h\"\n#include <vector>\n#include \"cofluent.h\"\n\nclass cfm_unusedfunc : public cf_core::cf_function {\npublic:\n\n\n/// constructor\ncfm_unusedfunc(sc_core::sc_module_name name);\n\n/// destructor\nvirtual ~cfm_unusedfunc(void);\n\n\nprotected:\nvoid cb_init_attributes(void);\nvoid cb_init_local_vars(void);\n\npublic:\n};\n#endif\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    },
    {
        "Instruction": "Please act as CoFlunet structure code generator. Please generate the c++ class implementation code of the following CoFLuent sturcture. The output is in c++ cpp file format.\n{'name': 'UnusedFunc', 'type': 'cofluent:Function', 'ports': [{'name': 'UnusedEv', 'type': 'EVENT', 'direction': 'OUT'}], 'globalName': 'OPP_UseCase'}",
        "Response": [
            "//<#!@READ-ONLY-SECTION-START@!#>\n/*\n* \\class cfm_unusedfunc\n* \\brief Intel(R) CoFluent(TM) Studio - Intel Corporation\n* \\details Simulation model of OPP_UseCase generated by C++ Generator for SystemC/TLM2\n*/\n/// Model Source includes start\n#include \"cfm_unusedfunc.h\"\n/// Model Source includes end\nusing namespace std;\nusing namespace sc_core;\nusing namespace cf_dt;\nusing namespace cf_pk;\nusing namespace cf_core;\n\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UnusedFunc definitions' algorithm generated code\n\n//End of 'UnusedFunc definitions' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n\n/// \\name constructor\n//@{\ncfm_unusedfunc ::cfm_unusedfunc() : \n//instantiation of non-vector Event, MessageQueue, SharedVariable\ncf_function(){\ncf_function::init();\n//connections\ncf_function::elab_end();\n}\n//@}\n\n/// \\name destructor\n//@{\ncfm_unusedfunc::~cfm_unusedfunc(void) {\n//<#!@READ-ONLY-SECTION-END@!#>\n//Start of 'UnusedFunc destructor' algorithm generated code\n\n//End of 'UnusedFunc destructor' algorithm generated code\n//<#!@READ-ONLY-SECTION-START@!#>\n}\n\n\n//@{\nvoid cfm_unusedfunc::cb_init_attributes() {\n\n// initialize function attributes\n\n\treturn;\n}\n//@}\n\n//@{\nvoid cfm_unusedfunc::cb_init_local_vars(void) {\n\n\t//<#!@READ-ONLY-SECTION-END@!#>\n\t//Start of 'Router25 initializations' algorithm generated code\n\n\t//End of 'Router25 initializations' algorithm generated code\n\t//<#!@READ-ONLY-SECTION-START@!#>\n}\n//@}\n//<#!@READ-ONLY-SECTION-END@!#>"
        ]
    }
]